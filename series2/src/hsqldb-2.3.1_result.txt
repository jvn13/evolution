 LINES: 		| DoubleIntIndex.java: 164 - 170 || DoubleIntIndex.java: 299 - 305 |
 CLONE CLASS: 	if (key > Integer.MAX_VALUE || key < Integer.MIN_VALUE) { 
 				throw new java.lang.IllegalArgumentException(); 
 				} 
 				if (value > Integer.MAX_VALUE || value < Integer.MIN_VALUE) { 
 				throw new java.lang.IllegalArgumentException(); 
 				} 
 				
 
 LINES: 		| TestHashStructures.java: 64 - 74 || TestHashStructures.java: 144 - 150 |
 CLONE CLASS: 	compareByHIterator(uMap, hMap); 
 				populateByRandomIntKeys(uMap, hMap, testSize); 
 				compareByUIterator(uMap, hMap); 
 				compareByHIterator(uMap, hMap); 
 				depopulateRandomly(uMap, hMap, 20); 
 				compareByUIterator(uMap, hMap); 
 				compareByHIterator(uMap, hMap); 
 				
 
 LINES: 		| RowStoreAVLDiskData.java: 210 - 221 || RowStoreAVLDiskData.java: 249 - 260 |
 CLONE CLASS: 	break; 
 				case RowAction.ACTION_INSERT_DELETE : 
 				if (txModel == TransactionManager.LOCKS) { 
 				remove(row); 
 				} else { 
 				delete(session, row); 
 				remove(row); 
 				} 
 				break; 
 				
 
 LINES: 		| ParserDDL.java: 4814 - 4829 || ParserDDL.java: 4915 - 4930 |
 CLONE CLASS: 	if (grant) { 
 				readThis(Tokens.TO); 
 				} else { 
 				readThis(Tokens.FROM); 
 				} 
 				while (true) { 
 				checkIsSimpleName(); 
 				granteeList.add(token.tokenString); 
 				read(); 
 				if (token.tokenType == Tokens.COMMA) { 
 				read(); 
 				} else { 
 				break; 
 				} 
 				
 
 LINES: 		| ParserDQL.java: 3351 - 3364 || ParserDQL.java: 3377 - 3390 |
 CLONE CLASS: 	} else { 
 				break; 
 				} 
 				read(); 
 				Expression a = e; 
 				e = XreadDateTimeIntervalTerm(); 
 				e = new ExpressionArithmetic(type, a, e); 
 				} 
 				return e; 
 				} 
 				
 
 LINES: 		| BitType.java: 36 - 41 || CharacterType.java: 39 - 44 || BinaryType.java: 36 - 41 |
 CLONE CLASS: 	import org.hsqldb.SessionInterface; 
 				import org.hsqldb.Tokens; 
 				import org.hsqldb.error.Error; 
 				import org.hsqldb.error.ErrorCode; 
 				import org.hsqldb.lib.ArrayUtil; 
 				import org.hsqldb.lib.StringConverter; 
 				
 
 LINES: 		| RowOutputBinary.java: 38 - 45 || RowOutputTextLog.java: 39 - 46 |
 CLONE CLASS: 	import org.hsqldb.error.Error; 
 				import org.hsqldb.error.ErrorCode; 
 				import org.hsqldb.lib.StringConverter; 
 				import org.hsqldb.types.BinaryData; 
 				import org.hsqldb.types.BlobData; 
 				import org.hsqldb.types.ClobData; 
 				import org.hsqldb.types.IntervalMonthData; 
 				import org.hsqldb.types.IntervalSecondData; 
 				
 
 LINES: 		| JDBCPreparedStatement.java: 1290 - 1299 || JDBCPreparedStatement.java: 1381 - 1390 |
 CLONE CLASS: 	return; 
 				} else if (x == null) { 
 				setParameter(parameterIndex, null); 
 				return; 
 				} 
 				final long length = x.length(); 
 				if (length > Integer.MAX_VALUE) { 
 				
 
 LINES: 		| DatabaseInformationFull.java: 3360 - 3365 || DatabaseInformationFull.java: 3535 - 3540 |
 CLONE CLASS: 	addColumn(t, "DATA_TYPE", SQL_IDENTIFIER); 
 				addColumn(t, "CHARACTER_MAXIMUM_LENGTH", CARDINAL_NUMBER); 
 				addColumn(t, "CHARACTER_OCTET_LENGTH", CARDINAL_NUMBER); 
 				addColumn(t, "CHARACTER_SET_CATALOG", SQL_IDENTIFIER); 
 				addColumn(t, "CHARACTER_SET_SCHEMA", SQL_IDENTIFIER); 
 				addColumn(t, "CHARACTER_SET_NAME", SQL_IDENTIFIER); 
 				
 
 LINES: 		| TextFileReader.java: 132 - 138 || TextFileReader.java: 218 - 224 |
 CLONE CLASS: 	break; 
 				default : 
 				wasNormal = true; 
 				complete  = wasCR; 
 				wasCR     = false; 
 				} 
 				
 
 LINES: 		| WebServer.java: 185 - 198 || Server.java: 2513 - 2526 || WebServer.java: 185 - 198 |
 CLONE CLASS: 	try { 
 				server.setProperties(props); 
 				} catch (Exception e) { 
 				server.printError("Failed to set properties"); 
 				server.printStackTrace(e); 
 				return; 
 				} 
 				server.print("Startup sequence initiated from main() method"); 
 				if (fileProps != null) { 
 				server.print("Loaded properties from [" + propsPath 
 				
 
 LINES: 		| SqlFile.java: 3161 - 3166 || SqlFile.java: 3164 - 3169 |
 CLONE CLASS: 	{ 
 				2, 3 
 				}, 
 				{ 
 				2, 3 
 				}, 
 				
 
 LINES: 		| Constraint.java: 254 - 267 || TriggerDef.java: 210 - 220 || NumberSequence.java: 153 - 163 || Charset.java: 166 - 176 || IndexAVL.java: 229 - 239 |
 CLONE CLASS: 	} 
 				public HsqlName getName() { 
 				return name; 
 				} 
 				public HsqlName getCatalogName() { 
 				return name.schema.schema; 
 				} 
 				public HsqlName getSchemaName() { 
 				
 
 LINES: 		| OrderedLongKeyHashMap.java: 199 - 208 || OrderedLongKeyHashMap.java: 234 - 243 |
 CLONE CLASS: 	} 
 				public boolean isEmpty() { 
 				return size() == 0; 
 				} 
 				public void clear() { 
 				OrderedLongKeyHashMap.this.clear(); 
 				} 
 				} 
 				
 
 LINES: 		| TestSql.java: 60 - 68 || TestUpdatableResultSets.java: 48 - 56 || TestTypeConversion.java: 50 - 61 || TestMerge.java: 56 - 64 || TestMultiInsert.java: 56 - 64 |
 CLONE CLASS: 	super(name); 
 				} 
 				protected void setUp() { 
 				super.setUp(); 
 				try { 
 				connection = super.newConnection(); 
 				
 
 LINES: 		| JDBCBlobFile.java: 188 - 195 || JDBCClobFile.java: 258 - 265 |
 CLONE CLASS: 	final long start) throws SQLException { 
 				if (start < 1) { 
 				throw JDBCUtil.outOfRangeArgument("start: " + start); 
 				} else if (pattern == null || pattern.length == 0 
 				|| start > length()) { 
 				return -1L; 
 				} 
 				
 
 LINES: 		| TestStoredProcedure.java: 435 - 445 || TestStoredProcedure.java: 455 - 465 |
 CLONE CLASS: 	conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED); 
 				Statement st = conn.createStatement(); 
 				ResultSet rs = st.executeQuery( 
 				"select count(*) from information_schema.columns where table_name='LOB_IDS' and table_schema='SYSTEM_LOBS'"); 
 				if (rs.next()) { 
 				intparam[0] = rs.getInt(1); 
 				rs.close(); 
 				} 
 				
 
 LINES: 		| ParserDML.java: 696 - 702 || ParserDML.java: 738 - 744 |
 CLONE CLASS: 	throw Error.error(ErrorCode.X_42544); 
 				} 
 				} else { 
 				unresolved = expr.resolveColumnReferences(session, 
 				rangeGroup, rangeGroups, null); 
 				ExpressionColumn.checkColumnsResolved(unresolved); 
 				
 
 LINES: 		| Expression.java: 1126 - 1133 || ExpressionArithmetic.java: 236 - 243 |
 CLONE CLASS: 	if (opType == OpTypes.VALUE) { 
 				return unresolvedSet; 
 				} 
 				for (int i = 0; i < nodes.length; i++) { 
 				if (nodes[i] == null) { 
 				continue; 
 				} 
 				
 
 LINES: 		| HsqlDeque.java: 244 - 251 || LongDeque.java: 209 - 216 || LongDeque.java: 272 - 279 |
 CLONE CLASS: 	for (int i = 0; i < elementCount; i++) { 
 				int index = firstindex + i; 
 				if (index >= list.length) { 
 				index -= list.length; 
 				} 
 				if (list[index] == value) { 
 				
 
 LINES: 		| TestSql.java: 36 - 41 || TransferDb.java: 36 - 41 |
 CLONE CLASS: 	import java.sql.PreparedStatement; 
 				import java.sql.ResultSet; 
 				import java.sql.ResultSetMetaData; 
 				import java.sql.SQLException; 
 				import java.sql.Statement; 
 				import java.sql.Types; 
 				
 
 LINES: 		| BaseHashMap.java: 402 - 410 || BaseHashMap.java: 723 - 731 |
 CLONE CLASS: 	if (accessTable != null) { 
 				accessTable[lookup] = ++accessCount; 
 				} 
 				return returnValue; 
 				} 
 				if (remove) { 
 				
 
 LINES: 		| Expression.java: 323 - 331 || FunctionSQLInvoked.java: 246 - 254 || FunctionCustom.java: 3681 - 3689 |
 CLONE CLASS: 	sb.append(','); 
 				} 
 				sb.append(nodes[i].getSQL()); 
 				} 
 				sb.append(')'); 
 				return sb.toString(); 
 				
 
 LINES: 		| IntKeyIntValueHashMap.java: 71 - 78 || LongKeyIntValueHashMap.java: 78 - 85 |
 CLONE CLASS: 	int lookup = getLookup(key); 
 				if (lookup != -1) { 
 				return intValueTable[lookup]; 
 				} 
 				return defaultValue; 
 				} 
 				
 
 LINES: 		| SchemaManager.java: 2133 - 2139 || ParserRoutine.java: 1581 - 1587 |
 CLONE CLASS: 	break; 
 				} 
 				} 
 				} 
 				break; 
 				} 
 				
 
 LINES: 		| ParserDDL.java: 1656 - 1662 || ParserDQL.java: 4529 - 4535 |
 CLONE CLASS: 	QueryExpression queryExpression; 
 				try { 
 				queryExpression = XreadQueryExpression(); 
 				} catch (HsqlException e) { 
 				queryExpression = XreadJoinedTableAsView(); 
 				} 
 				
 
 LINES: 		| RowStoreAVLHybridExtended.java: 34 - 39 || RowStoreAVL.java: 40 - 45 |
 CLONE CLASS: 	import org.hsqldb.Row; 
 				import org.hsqldb.RowAVL; 
 				import org.hsqldb.RowAction; 
 				import org.hsqldb.Session; 
 				import org.hsqldb.Table; 
 				import org.hsqldb.TableBase; 
 				
 
 LINES: 		| Type.java: 837 - 845 || Type.java: 1044 - 1052 |
 CLONE CLASS: 	return SQL_SMALLINT; 
 				case Types.SQL_BIGINT : 
 				return SQL_BIGINT; 
 				case Types.TINYINT : 
 				return TINYINT; 
 				case Types.SQL_FLOAT : 
 				
 
 LINES: 		| FunctionCustom.java: 690 - 700 || FunctionCustom.java: 704 - 714 |
 CLONE CLASS: 	parseList = new short[] { 
 				Tokens.OPENBRACKET, Tokens.X_KEYSET, 10, 
 				Tokens.SQL_TSI_FRAC_SECOND, Tokens.SQL_TSI_MILLI_SECOND, 
 				Tokens.SQL_TSI_SECOND, Tokens.SQL_TSI_MINUTE, 
 				Tokens.SQL_TSI_HOUR, Tokens.SQL_TSI_DAY, 
 				Tokens.SQL_TSI_WEEK, Tokens.SQL_TSI_MONTH, 
 				Tokens.SQL_TSI_QUARTER, Tokens.SQL_TSI_YEAR, Tokens.COMMA, 
 				Tokens.QUESTION, Tokens.COMMA, Tokens.QUESTION, 
 				Tokens.CLOSEBRACKET 
 				}; 
 				break; 
 				
 
 LINES: 		| TestUtil.java: 39 - 44 || TestDbBackup.java: 37 - 42 |
 CLONE CLASS: 	import java.sql.Connection; 
 				import java.sql.DriverManager; 
 				import java.sql.ResultSet; 
 				import java.sql.SQLException; 
 				import java.sql.Statement; 
 				import java.text.SimpleDateFormat; 
 				
 
 LINES: 		| ParserDQL.java: 1028 - 1033 || ParserDQL.java: 1122 - 1127 |
 CLONE CLASS: 	queryExpression.sortAndSlice.addOrderExpression(e); 
 				} 
 				} else { 
 				queryExpression.addSortAndSlice(sortAndSlice); 
 				} 
 				} 
 				
 
 LINES: 		| ExpressionArrayAggregate.java: 151 - 163 || ExpressionAggregate.java: 192 - 204 |
 CLONE CLASS: 	break; 
 				} 
 				if (getLeftNode() != null) { 
 				sb.append(" arg=["); 
 				sb.append(nodes[LEFT].describe(session, blanks + 1)); 
 				sb.append(']'); 
 				} 
 				return sb.toString(); 
 				} 
 				public HsqlList resolveColumnReferences(Session session, 
 				
 
 LINES: 		| DatabaseManagerSwing.java: 1860 - 1872 || DatabaseManager.java: 1034 - 1046 |
 CLONE CLASS: 	} 
 				gResult.addRow(g); 
 				System.out.println(l + " ms : " + sql); 
 				} 
 				g[0] = "" + total; 
 				g[1] = "total"; 
 				g[2] = ""; 
 				gResult.addRow(g); 
 				lTime = System.currentTimeMillis() - lTime; 
 				
 
 LINES: 		| SqlFileScanner.java: 119 - 124 || SqlFileScanner.java: 221 - 226 || SqlFileScanner.java: 268 - 273 |
 CLONE CLASS: 	int i = 0; 
 				int j = offset; 
 				int l = packed.length(); 
 				while (i < l) { 
 				int count = packed.charAt(i++); 
 				int value = packed.charAt(i++); 
 				
 
 LINES: 		| ArrayUtil.java: 551 - 558 || ArrayUtil.java: 575 - 582 || ArrayUtil.java: 746 - 753 |
 CLONE CLASS: 	k++; 
 				} else { 
 				break; 
 				} 
 				} 
 				return k; 
 				} 
 				
 
 LINES: 		| HsqlDeque.java: 271 - 278 || LongDeque.java: 232 - 239 |
 CLONE CLASS: 	firstindex++; 
 				if (firstindex == list.length) { 
 				firstindex = 0; 
 				} 
 				} else if (target > firstindex) { 
 				System.arraycopy(list, firstindex, list, firstindex + 1, 
 				target - firstindex); 
 				
 
 LINES: 		| NodeAVLDiskLarge.java: 221 - 234 || NodeAVLDisk.java: 265 - 278 |
 CLONE CLASS: 	} 
 				if (node.iParent == NO_POS) { 
 				return null; 
 				} 
 				if (node.nParent == null || !node.nParent.isInMemory()) { 
 				node.nParent = findNode(store, iParent); 
 				} 
 				return node.nParent; 
 				} 
 				public int getBalance(PersistentStore store) { 
 				
 
 LINES: 		| DatabaseInformationFull.java: 2688 - 2700 || DatabaseInformationFull.java: 4394 - 4406 || DatabaseInformationFull.java: 5968 - 5980 |
 CLONE CLASS: 	if (type.isCharacterType()) { 
 				row[character_maximum_length] = 
 				ValuePool.getLong(type.precision); 
 				row[character_octet_length] = 
 				ValuePool.getLong(type.precision * 2); 
 				row[character_set_catalog] = 
 				database.getCatalogName().name; 
 				row[character_set_schema] = 
 				((CharacterType) type).getCharacterSet() 
 				.getSchemaName().name; 
 				row[character_set_name] = 
 				((CharacterType) type).getCharacterSet().getName() 
 				.name; 
 				
 
 LINES: 		| BlobDataID.java: 162 - 169 || BlobDataID.java: 176 - 183 || ClobDataID.java: 197 - 204 || ClobDataID.java: 211 - 218 |
 CLONE CLASS: 	Result resultIn = session.execute(resultOut); 
 				if (resultIn.isError()) { 
 				throw resultIn.getException(); 
 				} 
 				return ((ResultLob) resultIn).getOffset(); 
 				} 
 				
 
 LINES: 		| DataFileCacheSession.java: 126 - 136 || DataFileCache.java: 725 - 735 |
 CLONE CLASS: 	} finally { 
 				writeLock.unlock(); 
 				} 
 				} 
 				public void adjustStoreCount(int adjust) { 
 				writeLock.lock(); 
 				try { 
 				storeCount += adjust; 
 				
 
 LINES: 		| HsqlTaskQueue.java: 62 - 71 || HsqlTimer.java: 479 - 489 |
 CLONE CLASS: 	} 
 				protected synchronized void clearThread() { 
 				try { 
 				taskRunnerThread.setContextClassLoader(null); 
 				} catch (Throwable t) {} 
 				taskRunnerThread = null; 
 				} 
 				
 
 LINES: 		| OracleTransferHelper.java: 123 - 142 || PostgresTransferHelper.java: 145 - 164 |
 CLONE CLASS: 	NewColumnType += columnType.substring(iStartPos 
 				+ HSQLDB_func.length()); 
 				columnType = NewColumnType; 
 				} 
 				} 
 				return (columnType); 
 				} 
 				void beginDataTransfer() { 
 				try { 
 				db.setAutoCommit(false); 
 				} catch (Exception e) {} 
 				} 
 				void endDataTransfer() { 
 				try { 
 				db.commit(); 
 				
 
 LINES: 		| NodeAVLDisk.java: 260 - 267 || NodeAVLDisk.java: 307 - 314 |
 CLONE CLASS: 	RowAVLDisk  row  = this.row; 
 				if (!row.isInMemory()) { 
 				row  = (RowAVLDisk) store.get(this.row, false); 
 				node = (NodeAVLDisk) row.getNode(iId); 
 				} 
 				if (node.iParent == NO_POS) { 
 				
 
 LINES: 		| TestCacheSize.java: 729 - 738 || TestCacheSize.java: 771 - 780 || TestCacheSize.java: 817 - 826 || TestCacheSize.java: 859 - 868 || TestCacheSize.java: 910 - 919 || TestCacheSize.java: 954 - 963 |
 CLONE CLASS: 	} 
 				} 
 				ps.close(); 
 				} catch (SQLException e) { 
 				System.out.println("error : " + random); 
 				e.printStackTrace(); 
 				} 
 				long time = sw.elapsedTime(); 
 				
 
 LINES: 		| ParserDDL.java: 3727 - 3734 || ParserDDL.java: 4279 - 4286 |
 CLONE CLASS: 	}; 
 				HsqlName[] writeLockNames = new HsqlName[] { 
 				database.getCatalogName(), table.getName() 
 				}; 
 				return new StatementSchema(sql, StatementTypes.ALTER_TABLE, args, 
 				null, writeLockNames); 
 				} 
 				
 
 LINES: 		| TransactionManagerMVCC.java: 269 - 281 || TransactionManager2PL.java: 159 - 171 || TransactionManagerMV2PL.java: 209 - 221 |
 CLONE CLASS: 	} 
 				public void rollbackPartial(Session session, int start, long timestamp) { 
 				int limit = session.rowActionList.size(); 
 				if (start == limit) { 
 				return; 
 				} 
 				
 
 LINES: 		| IndexAVLMemory.java: 248 - 255 || IndexAVL.java: 938 - 945 |
 CLONE CLASS: 	if (n == null) { 
 				break; 
 				} 
 				} 
 				x = x.set(store, isleft, ((RowAVL) row).getNode(position)); 
 				balance(store, x, isleft); 
 				
 
 LINES: 		| JDBCStatement.java: 466 - 474 || JDBCPreparedStatement.java: 3227 - 3235 |
 CLONE CLASS: 	if (seconds < 0) { 
 				throw JDBCUtil.outOfRangeArgument(); 
 				} 
 				if (seconds > Short.MAX_VALUE) { 
 				seconds = Short.MAX_VALUE; 
 				} 
 				queryTimeout = seconds; 
 				} 
 				
 
 LINES: 		| Scanner.java: 2109 - 2117 || Scanner.java: 2281 - 2289 |
 CLONE CLASS: 	currentDigits = 0; 
 				if (i == intervalString.length()) { 
 				break; 
 				} 
 				} 
 				} 
 				intervalPosition = i; 
 				
 
 LINES: 		| JDBCBlobClient.java: 136 - 144 || JDBCBlobClient.java: 171 - 179 |
 CLONE CLASS: 	if (position >= 0) { 
 				position++; 
 				} 
 				return position; 
 				} catch (HsqlException e) { 
 				throw JDBCUtil.sqlException(e); 
 				} 
 				} 
 				
 
 LINES: 		| TestLibSpeed.java: 180 - 193 || TestLibSpeed.java: 218 - 231 |
 CLONE CLASS: 	sw.zero(); 
 				for (int j = 0; j < count; j++) { 
 				for (int i = 0; i < sNumeric.length; i++) { 
 				int r = randomgen.nextInt(sNumeric.length); 
 				doubleIntLookup.findFirstEqualKeyIndex(r); 
 				dummy += r; 
 				} 
 				} 
 				System.out.println("DoubleIntTable Lookup " + sw.elapsedTime()); 
 				sw.zero(); 
 				
 
 LINES: 		| NumberType.java: 1074 - 1080 || NumberType.java: 1125 - 1131 |
 CLONE CLASS: 	if (session instanceof Session) { 
 				if (!((Session) session).database.sqlConvertTruncate) { 
 				d = java.lang.Math.rint(d); 
 				} 
 				} 
 				if (Double.isInfinite(d) || Double.isNaN(d) 
 				
 
 LINES: 		| TestOdbcService.java: 168 - 174 || TestOdbcService.java: 273 - 279 || TestOdbcService.java: 308 - 314 |
 CLONE CLASS: 	assertTrue("Not enough rows fetched", rs.next()); 
 				assertEquals(3, rs.getInt(2)); 
 				assertEquals(25, rs.getInt(1)); 
 				assertNull(rs.getString(3)); 
 				assertEquals("str", rs.getString(4)); 
 				assertTrue("Not enough rows fetched", rs.next()); 
 				
 
 LINES: 		| TriggerSample.java: 296 - 336 || TriggerSample.java: 296 - 336 |
 CLONE CLASS: 	default : { 
 				return ""; 
 				} 
 				} 
 				} 
 				public static String getQueueSpec(int qs) { 
 				return (qs < 0) ? "" 
 				: ("QUEUE " + qs); 
 				} 
 				public static String getForEachSpec(int type) { 
 				switch (type) { 
 				case INSERT_BEFORE_ROW : 
 				case INSERT_AFTER_ROW : 
 				case UPDATE_BEFORE_ROW : 
 				case UPDATE_AFTER_ROW : 
 				case DELETE_AFTER_ROW : 
 				case DELETE_BEFORE_ROW : { 
 				return "FOR EACH ROW"; 
 				} 
 				default : { 
 				return "FOR EACH STATEMENT"; 
 				} 
 				} 
 				} 
 				public static String getTriggerDDL(String trn, int typ, String tab, 
 				int qs, 
 				String impl) throws SQLException { 
 				StringBuffer sb = new StringBuffer(); 
 				sb.append("CREATE TRIGGER "); 
 				sb.append(trn); 
 				sb.append(' '); 
 				sb.append(getWhenSpec(typ)); 
 				sb.append(' '); 
 				sb.append(getOperationSpec(typ)); 
 				
 
 LINES: 		| NumberType.java: 1548 - 1553 || NumberType.java: 1610 - 1615 |
 CLONE CLASS: 	return convertToTypeLimits(null, bd); 
 				} 
 				case Types.TINYINT : 
 				case Types.SQL_SMALLINT : 
 				case Types.SQL_INTEGER : { 
 				int ai = ((Number) a).intValue(); 
 				
 
 LINES: 		| ServerConnection.java: 740 - 746 || ServerConnection.java: 1312 - 1318 |
 CLONE CLASS: 	case ResultConstants.DATA : 
 				break; 
 				case ResultConstants.ERROR : 
 				throw new RecoverableOdbcFailure(rOut); 
 				default : 
 				throw new RecoverableOdbcFailure( 
 				
 
 LINES: 		| LobStoreRAFile.java: 99 - 105 || LobStoreInJar.java: 82 - 88 |
 CLONE CLASS: 	return dataBytes; 
 				} catch (Throwable t) { 
 				throw Error.error(ErrorCode.DATA_FILE_ERROR, t); 
 				} 
 				} 
 				public void setBlockBytes(byte[] dataBytes, int blockAddress, 
 				
 
 LINES: 		| RowType.java: 207 - 222 || ArrayType.java: 296 - 311 |
 CLONE CLASS: 	} 
 				public String convertToString(Object a) { 
 				if (a == null) { 
 				return null; 
 				} 
 				return convertToSQLString(a); 
 				} 
 				public String convertToSQLString(Object a) { 
 				if (a == null) { 
 				return Tokens.T_NULL; 
 				} 
 				
 
 LINES: 		| StatementSchema.java: 269 - 277 || StatementCommand.java: 218 - 226 || StatementSession.java: 240 - 248 |
 CLONE CLASS: 	} catch (Throwable t) { 
 				result = Result.newErrorResult(t, null); 
 				} 
 				if (result.isError()) { 
 				result.getException().setStatementType(group, type); 
 				return result; 
 				} 
 				
 
 LINES: 		| SchemaManager.java: 2606 - 2613 || SchemaManager.java: 2648 - 2655 |
 CLONE CLASS: 	readLock.lock(); 
 				try { 
 				HsqlArrayList tableList = getAllTables(false); 
 				HsqlArrayList list      = new HsqlArrayList(); 
 				for (int i = 0; i < tableList.size(); i++) { 
 				Table t = (Table) tableList.get(i); 
 				
 
 LINES: 		| ExpressionLogical.java: 1196 - 1204 || ExpressionArithmetic.java: 617 - 625 |
 CLONE CLASS: 	Object value = 
 				session.sessionContext.rangeIterators[rangePosition] 
 				.getCurrent(columnIndex); 
 				return value; 
 				} 
 				case OpTypes.NEGATE : 
 				return ((NumberType) dataType).negate( 
 				nodes[LEFT].getValue(session, nodes[LEFT].dataType)); 
 				
 
 LINES: 		| SqlFile.java: 6158 - 6166 || OdbcUtil.java: 265 - 273 |
 CLONE CLASS: 	"Non-hex character in input at offset " + i + ": " + c); 
 				} 
 				octet = octet << 4; 
 				c = hexChars.charAt(++i); 
 				if (c >= 'a' && c <= 'f') { 
 				octet += 10 + c - 'a'; 
 				} else if (c >= 'A' && c <= 'F') { 
 				octet += 10 + c - 'A'; 
 				} else if (c >= '0' && c <= '9') { 
 				
 
 LINES: 		| DatabaseManagerSwing.java: 1908 - 1924 || DatabaseManager.java: 1121 - 1137 |
 CLONE CLASS: 	b.append(' '); 
 				} 
 				} 
 				b.append(NL); 
 				for (int i = 0; i < width; i++) { 
 				for (int l = 0; l < size[i]; l++) { 
 				b.append('-'); 
 				} 
 				b.append(' '); 
 				} 
 				b.append(NL); 
 				for (int i = 0; i < height; i++) { 
 				
 
 LINES: 		| LongKeyHashMap.java: 229 - 238 || LongKeyHashMap.java: 264 - 273 |
 CLONE CLASS: 	} 
 				public boolean isEmpty() { 
 				return size() == 0; 
 				} 
 				public void clear() { 
 				LongKeyHashMap.this.clear(); 
 				} 
 				} 
 				
 
 LINES: 		| ParserDDL.java: 2679 - 2686 || ParserDDL.java: 4134 - 4141 |
 CLONE CLASS: 	} else { 
 				readThis(Tokens.ALWAYS); 
 				generatedAlways = true; 
 				} 
 				readThis(Tokens.AS); 
 				readThis(Tokens.IDENTITY); 
 				
 
 LINES: 		| IndexAVL.java: 1259 - 1267 || IndexAVL.java: 1324 - 1332 |
 CLONE CLASS: 	int distinctCount) { 
 				readLock.lock(); 
 				try { 
 				NodeAVL x = getAccessor(store); 
 				NodeAVL l = x; 
 				while (l != null) { 
 				
 
 LINES: 		| ExpressionLogical.java: 157 - 163 || ExpressionLogical.java: 197 - 203 |
 CLONE CLASS: 	dataType = Type.SQL_BOOLEAN; 
 				break; 
 				default : 
 				throw Error.runtimeError(ErrorCode.U_S0500, 
 				"ExpressionLogical"); 
 				} 
 				
 
 LINES: 		| BitType.java: 359 - 367 || BinaryType.java: 488 - 496 |
 CLONE CLASS: 	} 
 				public Object convertToDefaultType(SessionInterface session, Object a) { 
 				if (a == null) { 
 				return a; 
 				} 
 				if (a instanceof byte[]) { 
 				
 
 LINES: 		| FunctionSQL.java: 1516 - 1525 || FunctionSQL.java: 1688 - 1697 |
 CLONE CLASS: 	if (nodes[2].dataType == null) { 
 				nodes[2].dataType = Type.SQL_NUMERIC; 
 				} 
 				if (!nodes[2].dataType.isNumberType()) { 
 				throw Error.error(ErrorCode.X_42563); 
 				} 
 				nodes[2].dataType = 
 				((NumberType) nodes[2].dataType).getIntegralType(); 
 				
 
 LINES: 		| Charset.java: 236 - 243 || Charset.java: 258 - 265 |
 CLONE CLASS: 	for (int i = 0; i < ranges.length; i++) { 
 				if (ch > ranges[i][1]) { 
 				continue; 
 				} 
 				if (ch < ranges[i][0]) { 
 				return false; 
 				} 
 				
 
 LINES: 		| TestSql.java: 916 - 922 || TestBug785429.java: 153 - 159 |
 CLONE CLASS: 	} 
 				} catch (Exception e) { 
 				e.printStackTrace(); 
 				System.out.println("TestSql.tearDown() error: " + e.getMessage()); 
 				} 
 				super.tearDown(); 
 				
 
 LINES: 		| FunctionCustom.java: 3310 - 3324 || FunctionCustom.java: 3330 - 3344 |
 CLONE CLASS: 	if (nodes[0].dataType == null) { 
 				nodes[0].dataType = Type.SQL_DOUBLE; 
 				} 
 				if (nodes[1].dataType == null) { 
 				nodes[1].dataType = Type.SQL_VARCHAR; 
 				} 
 				if (!nodes[0].dataType.isNumberType()) { 
 				throw Error.error(ErrorCode.X_42563); 
 				} 
 				if (!nodes[1].dataType.isCharacterType()) { 
 				throw Error.error(ErrorCode.X_42563); 
 				} 
 				
 
 LINES: 		| HSQLDialect.java: 515 - 521 || HSQLDialect.java: 537 - 543 || HSQLDialect.java: 477 - 483 || HSQLDialect.java: 501 - 507 |
 CLONE CLASS: 	if ( hsqldbVersion < 20 ) { 
 				return Boolean.TRUE; 
 				} 
 				else { 
 				return Boolean.FALSE; 
 				} 
 				} 
 				
 
 LINES: 		| JDBCBlobFile.java: 846 - 854 || JDBCClobFile.java: 1045 - 1053 |
 CLONE CLASS: 	} 
 				public void flush() throws IOException { 
 				m_randomAccessFile.getFD().sync(); 
 				} 
 				public void close() throws IOException { 
 				m_randomAccessFile.close(); 
 				} 
 				
 
 LINES: 		| LobManager.java: 1563 - 1580 || LobManager.java: 1633 - 1650 |
 CLONE CLASS: 	if (result.isError()) { 
 				return result; 
 				} 
 				if (offset + dataLength > length) { 
 				length = offset + dataLength; 
 				result = setLength(lobID, length); 
 				if (result.isError()) { 
 				return result; 
 				} 
 				} 
 				return ResultLob.newLobSetResponse(lobID, length); 
 				} finally { 
 				writeLock.unlock(); 
 				} 
 				} 
 				
 
 LINES: 		| JDBCResultSet.java: 462 - 472 || JDBCResultSet.java: 786 - 796 |
 CLONE CLASS: 	sourceType); 
 				if (x == null) { 
 				return null; 
 				} 
 				long length = x.length(session); 
 				if (length > Integer.MAX_VALUE) { 
 				JDBCUtil.throwError(Error.error(ErrorCode.X_42561)); 
 				} 
 				
 
 LINES: 		| HsqlDateTime.java: 110 - 115 || HsqlDateTime.java: 132 - 137 |
 CLONE CLASS: 	return d.getTime() / 1000; 
 				} 
 				} catch (Exception e) { 
 				throw Error.error(ErrorCode.X_22007); 
 				} 
 				} 
 				
 
 LINES: 		| SchemaManager.java: 2632 - 2640 || SchemaManager.java: 2662 - 2670 || GranteeManager.java: 770 - 778 |
 CLONE CLASS: 	} 
 				} 
 				} 
 				String[] array = new String[list.size()]; 
 				list.toArray(array); 
 				return array; 
 				
 
 LINES: 		| JDBCConnection.java: 3613 - 3618 || JDBCConnection.java: 3685 - 3690 |
 CLONE CLASS: 	if (connProperties != null) { 
 				isCloseResultSet = connProperties.isPropertyTrue( 
 				HsqlDatabaseProperties.url_close_result, false); 
 				isUseColumnName = connProperties.isPropertyTrue( 
 				HsqlDatabaseProperties.url_get_column_name, true); 
 				} 
 				
 
 LINES: 		| BitType.java: 32 - 38 || BooleanType.java: 32 - 38 || BinaryType.java: 32 - 38 || ClobType.java: 32 - 38 |
 CLONE CLASS: 	package org.hsqldb.types; 
 				import org.hsqldb.OpTypes; 
 				import org.hsqldb.Session; 
 				import org.hsqldb.SessionInterface; 
 				import org.hsqldb.Tokens; 
 				import org.hsqldb.error.Error; 
 				
 
 LINES: 		| RowStoreAVLHybrid.java: 255 - 280 || RowStoreAVLHybridExtended.java: 132 - 157 |
 CLONE CLASS: 	public void commitRow(Session session, Row row, int changeAction, 
 				int txModel) { 
 				switch (changeAction) { 
 				case RowAction.ACTION_DELETE : 
 				remove(row); 
 				break; 
 				case RowAction.ACTION_INSERT : 
 				break; 
 				case RowAction.ACTION_INSERT_DELETE : 
 				remove(row); 
 				break; 
 				case RowAction.ACTION_DELETE_FINAL : 
 				delete(session, row); 
 				remove(row); 
 				break; 
 				} 
 				} 
 				public void rollbackRow(Session session, Row row, int changeAction, 
 				
 
 LINES: 		| StringUtil.java: 253 - 261 || StringUtil.java: 271 - 279 |
 CLONE CLASS: 	int          len = s.length; 
 				StringBuffer sb  = new StringBuffer(len * 8); 
 				for (int i = 0; i < len; i++) { 
 				sb.append(quote); 
 				sb.append(s[i]); 
 				sb.append(quote); 
 				if (i + 1 < len) { 
 				
 
 LINES: 		| StatementDML.java: 499 - 506 || StatementDML.java: 671 - 678 |
 CLONE CLASS: 	Result          resultOut          = null; 
 				RowSetNavigator generatedNavigator = null; 
 				if (generatedIndexes != null) { 
 				resultOut = Result.newUpdateCountResult(generatedResultMetaData, 
 				0); 
 				generatedNavigator = resultOut.getChainedResult().getNavigator(); 
 				} 
 				
 
 LINES: 		| ParserCommand.java: 550 - 556 || ParserCommand.java: 577 - 583 |
 CLONE CLASS: 	if (e.getType() != OpTypes.VALUE 
 				&& (e.getType() != OpTypes.SQL_FUNCTION 
 				|| !((FunctionSQL) e).isValueFunction())) { 
 				throw Error.error(ErrorCode.X_0P000); 
 				} 
 				Expression[] args = new Expression[]{ e }; 
 				
 
 LINES: 		| StatementDML.java: 279 - 288 || StatementSet.java: 329 - 338 |
 CLONE CLASS: 	for (int i = 0; i < rangeVariables.length; i++) { 
 				Table    rangeTable = rangeVariables[i].rangeTable; 
 				HsqlName name       = rangeTable.getName(); 
 				if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) { 
 				continue; 
 				} 
 				if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) { 
 				continue; 
 				
 
 LINES: 		| ParserDQL.java: 2486 - 2493 || ParserDQL.java: 3635 - 3642 || ParserDQL.java: 3656 - 3663 || ParserDQL.java: 5751 - 5758 |
 CLONE CLASS: 	ex.setLevel(compileContext.subqueryDepth); 
 				if (lastError == null 
 				|| lastError.getLevel() < ex.getLevel()) { 
 				lastError = ex; 
 				} 
 				rewind(position); 
 				
 
 LINES: 		| TestOdbcService.java: 94 - 100 || TestOdbcService.java: 113 - 119 || TestOdbcService.java: 253 - 259 || TestOdbcService.java: 288 - 294 |
 CLONE CLASS: 	rs = ps.executeQuery(); 
 				assertTrue("No rows fetched", rs.next()); 
 				assertEquals("str", rs.getString(4)); 
 				assertEquals(5, rs.getInt(1)); 
 				assertEquals(3, rs.getInt(2)); 
 				assertEquals("five", rs.getString(3)); 
 				
 
 LINES: 		| JDBCBlobFile.java: 862 - 869 || JDBCClobFile.java: 1082 - 1089 |
 CLONE CLASS: 	final long length) 
 				throws FileNotFoundException, IOException { 
 				if (file == null) { 
 				throw new NullPointerException("file"); 
 				} 
 				if (pos < 0) { 
 				
 
 LINES: 		| ParserDML.java: 274 - 279 || ParserDQL.java: 1170 - 1175 |
 CLONE CLASS: 	break; 
 				} 
 				default : { 
 				throw unexpectedToken(); 
 				} 
 				} 
 				
 
 LINES: 		| Preprocessor.java: 457 - 465 || Preprocessor.java: 475 - 483 |
 CLONE CLASS: 	break; 
 				} 
 				case CONDITION_IN_TRUE : { 
 				this.state = CONDITION_TRIGGERED; 
 				break; 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| CachedObjectBase.java: 73 - 83 || Row.java: 118 - 128 |
 CLONE CLASS: 	} 
 				public void setPos(long pos) { 
 				position = pos; 
 				} 
 				public boolean isNew() { 
 				return false; 
 				} 
 				public boolean hasChanged() { 
 				
 
 LINES: 		| TransferTable.java: 179 - 191 || TransferTable.java: 211 - 223 || TransferTable.java: 243 - 255 || TransferTable.java: 426 - 438 |
 CLONE CLASS: 	while (Statement.charAt(Statement.length() - 1) == ';') { 
 				Statement = Statement.substring(0, Statement.length() 
 				- 1); 
 				} 
 				try { 
 				tracer.trace("Executing " + Statement); 
 				destDb.execute(Statement); 
 				} catch (Exception e) { 
 				tracer.trace("Ignoring error " + e.getMessage()); 
 				} 
 				lastsemicolon = nextsemicolon + 1; 
 				
 
 LINES: 		| TriggerSample.java: 32 - 41 || TriggerSample.java: 32 - 41 |
 CLONE CLASS: 	package org.hsqldb.sample; 
 				import java.io.PrintWriter; 
 				import java.sql.Connection; 
 				import java.sql.DriverManager; 
 				import java.sql.PreparedStatement; 
 				import java.sql.ResultSet; 
 				import java.sql.ResultSetMetaData; 
 				import java.sql.SQLException; 
 				import java.sql.Statement; 
 				
 
 LINES: 		| ParserDDL.java: 1781 - 1787 || ParserDDL.java: 3194 - 3200 || ParserDDL.java: 4262 - 4268 || ParserDQL.java: 3020 - 3026 || ParserDQL.java: 3068 - 3074 || Scanner.java: 1087 - 1093 |
 CLONE CLASS: 	default : 
 				end = true; 
 				break; 
 				} 
 				if (end) { 
 				break; 
 				
 
 LINES: 		| SchemaManager.java: 2591 - 2599 || SchemaManager.java: 2778 - 2786 |
 CLONE CLASS: 	list.add(sb.toString()); 
 				} 
 				String[] array = new String[list.size()]; 
 				list.toArray(array); 
 				return array; 
 				} finally { 
 				
 
 LINES: 		| FunctionCustom.java: 2180 - 2188 || FunctionSQL.java: 1202 - 1210 |
 CLONE CLASS: 	for (int i = 0; i < nodes.length; i++) { 
 				if (nodes[i] != null) { 
 				nodes[i].resolveTypes(session, this); 
 				} 
 				} 
 				switch (funcType) { 
 				case FUNC_POSITION_CHAR : 
 				
 
 LINES: 		| NumberType.java: 1418 - 1426 || IntervalType.java: 820 - 828 |
 CLONE CLASS: 	} 
 				public Object add(Session session, Object a, Object b, Type otherType) { 
 				if (a == null || b == null) { 
 				return null; 
 				} 
 				switch (typeCode) { 
 				
 
 LINES: 		| TriggerSample.java: 271 - 299 || TriggerSample.java: 271 - 299 |
 CLONE CLASS: 	default : { 
 				return ""; 
 				} 
 				} 
 				} 
 				public static String getOperationSpec(int type) { 
 				switch (type) { 
 				case INSERT_AFTER : 
 				case INSERT_AFTER_ROW : 
 				case INSERT_BEFORE_ROW : { 
 				return "INSERT"; 
 				} 
 				case UPDATE_AFTER : 
 				case UPDATE_AFTER_ROW : 
 				case UPDATE_BEFORE_ROW : { 
 				return "UPDATE"; 
 				} 
 				case DELETE_AFTER : 
 				case DELETE_AFTER_ROW : 
 				case DELETE_BEFORE_ROW : { 
 				return "DELETE"; 
 				} 
 				default : { 
 				return ""; 
 				} 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 3646 - 3656 || DatabaseInformationFull.java: 3670 - 3680 |
 CLONE CLASS: 	continue; 
 				} 
 				if (!session.getGrantee().isAccessible(type)) { 
 				continue; 
 				} 
 				row                             = t.getEmptyRowData(); 
 				row[object_catalog]             = database.getCatalogName().name; 
 				row[object_schema]              = type.getSchemaName().name; 
 				row[object_name]                = type.getName().name; 
 				
 
 LINES: 		| ParserDQL.java: 2664 - 2671 || ParserDQL.java: 2786 - 2793 |
 CLONE CLASS: 	read(); 
 				readThis(Tokens.OPENBRACKET); 
 				String  spec    = readQuotedString(); 
 				Scanner scanner = session.getScanner(); 
 				scanner.reset(spec); 
 				scanner.scanNext(); 
 				
 
 LINES: 		| Expression.java: 309 - 316 || ExpressionValue.java: 67 - 74 |
 CLONE CLASS: 	switch (opType) { 
 				case OpTypes.VALUE : 
 				if (valueData == null) { 
 				return Tokens.T_NULL; 
 				} 
 				return dataType.convertToSQLString(valueData); 
 				
 
 LINES: 		| ParserDDL.java: 1536 - 1543 || ParserDDL.java: 1572 - 1579 |
 CLONE CLASS: 	SchemaObject.ReferentialAction.SET_NULL; 
 				break; 
 				default : 
 				throw unexpectedToken(); 
 				} 
 				} else if (token.tokenType == Tokens.CASCADE) { 
 				read(); 
 				
 
 LINES: 		| FunctionCustom.java: 2737 - 2744 || FunctionSQL.java: 1255 - 1262 |
 CLONE CLASS: 	throw Error.error(ErrorCode.X_42563); 
 				} 
 				} 
 				dataType = Type.SQL_BIGINT; 
 				break; 
 				} 
 				
 
 LINES: 		| StatementDMQL.java: 640 - 652 || StatementDMQL.java: 656 - 668 || StatementDMQL.java: 680 - 692 |
 CLONE CLASS: 	appendTable(sb).append('\n'); 
 				appendCondition(session, sb); 
 				for (int i = 0; i < targetRangeVariables.length; i++) { 
 				sb.append(targetRangeVariables[i].describe(session, 
 				blanks)).append('\n'); 
 				} 
 				appendParms(sb).append('\n'); 
 				appendSubqueries(session, sb, 2).append(']'); 
 				return sb.toString(); 
 				} 
 				
 
 LINES: 		| CharacterType.java: 599 - 606 || BooleanType.java: 205 - 215 || NumberType.java: 934 - 941 |
 CLONE CLASS: 	} 
 				public Object convertToTypeJDBC(SessionInterface session, Object a, 
 				Type otherType) { 
 				if (a == null) { 
 				return a; 
 				} 
 				
 
 LINES: 		| TransferSQLText.java: 389 - 402 || TransferSQLText.java: 456 - 469 || TransferSQLText.java: 715 - 728 |
 CLONE CLASS: 	try { 
 				while ((currentLine = WTextRead.readLine()) != null) { 
 				currentLine = currentLine.trim() + ";"; 
 				Tokenizer   = new StringTokenizer(currentLine); 
 				try { 
 				Token = Tokenizer.nextToken(); 
 				} catch (NoSuchElementException NSE) { 
 				continue; 
 				} 
 				if (Token == null) { 
 				continue; 
 				} 
 				
 
 LINES: 		| IndexAVL.java: 1263 - 1270 || IndexAVL.java: 1299 - 1306 |
 CLONE CLASS: 	try { 
 				NodeAVL x = getAccessor(store); 
 				NodeAVL l = x; 
 				while (l != null) { 
 				x = l; 
 				l = x.getLeft(store); 
 				} 
 				
 
 LINES: 		| BlobDataID.java: 59 - 66 || ClobDataID.java: 100 - 107 |
 CLONE CLASS: 	ResultLob resultOut = ResultLob.newLobDuplicateRequest(id); 
 				Result    resultIn  = session.execute(resultOut); 
 				if (resultIn.isError()) { 
 				throw resultIn.getException(); 
 				} 
 				long lobID = ((ResultLob) resultIn).getLobID(); 
 				
 
 LINES: 		| HsqlDateTime.java: 313 - 319 || HsqlDateTime.java: 323 - 329 |
 CLONE CLASS: 	synchronized (cal) { 
 				setTimeInMillis(cal, t); 
 				resetToTime(cal); 
 				return getTimeInMillis(cal); 
 				} 
 				} 
 				
 
 LINES: 		| DatabaseManagerSwing.java: 1994 - 2001 || DatabaseManagerSwing.java: 2007 - 2014 |
 CLONE CLASS: 	if (alreadyHandled == e) { 
 				return; 
 				} 
 				handlePopup(e); 
 				alreadyHandled = e; 
 				} 
 				
 
 LINES: 		| StatementSchema.java: 268 - 274 || StatementCommand.java: 217 - 223 || StatementExpression.java: 141 - 147 || StatementSet.java: 294 - 300 || StatementSchemaDefinition.java: 64 - 70 || StatementSimple.java: 126 - 132 || StatementSession.java: 239 - 245 |
 CLONE CLASS: 	result = getResult(session); 
 				} catch (Throwable t) { 
 				result = Result.newErrorResult(t, null); 
 				} 
 				if (result.isError()) { 
 				result.getException().setStatementType(group, type); 
 				
 
 LINES: 		| DatabaseInformationFull.java: 2990 - 2997 || DatabaseInformationMain.java: 3022 - 3029 |
 CLONE CLASS: 	} catch (HsqlException e) {} 
 				} 
 				} 
 				} 
 				} 
 				} 
 				return t; 
 				
 
 LINES: 		| DatabaseManager.java: 310 - 316 || DatabaseManager.java: 372 - 378 |
 CLONE CLASS: 	} else if (type == DatabaseURL.S_RES) { 
 				databaseMap = resDatabaseMap; 
 				} else if (type == DatabaseURL.S_MEM) { 
 				databaseMap = memDatabaseMap; 
 				} else { 
 				throw Error.runtimeError(ErrorCode.U_S0500, "DatabaseManager"); 
 				} 
 				
 
 LINES: 		| TestUpdatableResultSets.java: 103 - 118 || TestUpdatableResultSets.java: 157 - 172 |
 CLONE CLASS: 	} 
 				connection.rollback(); 
 				rs = statement.executeQuery(select); 
 				while (rs.next()) { 
 				String s = rs.getString(2); 
 				System.out.println(s); 
 				} 
 				connection.commit(); 
 				} catch (SQLException e) { 
 				e.printStackTrace(); 
 				} 
 				
 
 LINES: 		| DatabaseInformationMain.java: 876 - 884 || DatabaseInformationMain.java: 1462 - 1470 |
 CLONE CLASS: 	}, false); 
 				return t; 
 				} 
 				String tableCatalog; 
 				String tableSchema; 
 				String tableName; 
 				
 
 LINES: 		| DirectoryBlockCachedObject.java: 125 - 134 || BitMapCachedObject.java: 97 - 106 || IntArrayCachedObject.java: 94 - 103 |
 CLONE CLASS: 	} 
 				out.writeEnd(); 
 				hasChanged = false; 
 				} 
 				public void write(RowOutputInterface out, LongLookup lookup) { 
 				write(out); 
 				} 
 				
 
 LINES: 		| ParserDDL.java: 4008 - 4014 || ParserDDL.java: 4111 - 4117 |
 CLONE CLASS: 	sequence 
 				}; 
 				HsqlName[] writeLockNames = 
 				database.schemaManager.getCatalogAndBaseTableNames( 
 				table.getName()); 
 				return new StatementSchema(sql, StatementTypes.ALTER_TABLE, args, 
 				
 
 LINES: 		| CharacterType.java: 509 - 514 || CharacterType.java: 552 - 557 |
 CLONE CLASS: 	} 
 				default : 
 				throw Error.runtimeError(ErrorCode.U_S0500, 
 				"CharacterType"); 
 				} 
 				} 
 				
 
 LINES: 		| TestTextTables.java: 210 - 220 || TestTextTables.java: 226 - 236 |
 CLONE CLASS: 	st   = conn.createStatement(); 
 				rs = st.executeQuery("select count(*) from tmsingle"); 
 				assertTrue(rs.next()); 
 				assertEquals(20, rs.getInt(1)); 
 				rs = st.executeQuery("select count(*) from tident"); 
 				assertTrue(rs.next()); 
 				assertEquals(20, rs.getInt(1)); 
 				
 
 LINES: 		| TestOdbcTypes.java: 156 - 163 || TestOdbcTypes.java: 186 - 193 || TestOdbcTypes.java: 216 - 223 || TestOdbcTypes.java: 245 - 252 || TestOdbcTypes.java: 309 - 316 || TestOdbcTypes.java: 338 - 345 || TestOdbcTypes.java: 367 - 374 || TestOdbcTypes.java: 396 - 403 || TestOdbcTypes.java: 425 - 432 || TestOdbcTypes.java: 455 - 462 || TestOdbcTypes.java: 485 - 492 || TestOdbcTypes.java: 516 - 523 || TestOdbcTypes.java: 545 - 552 || TestOdbcTypes.java: 607 - 614 || TestOdbcTypes.java: 637 - 644 || TestOdbcTypes.java: 666 - 673 || TestOdbcTypes.java: 694 - 701 || TestOdbcTypes.java: 726 - 733 || TestOdbcTypes.java: 762 - 769 || TestOdbcTypes.java: 800 - 807 || TestOdbcTypes.java: 833 - 840 || TestOdbcTypes.java: 873 - 880 || TestOdbcTypes.java: 913 - 920 || TestOdbcTypes.java: 954 - 961 || TestOdbcTypes.java: 994 - 1001 || TestOdbcTypes.java: 1039 - 1046 || TestOdbcTypes.java: 1079 - 1086 || TestOdbcTypes.java: 1119 - 1126 || TestOdbcTypes.java: 1159 - 1166 || TestOdbcTypes.java: 1199 - 1206 || TestOdbcTypes.java: 1281 - 1288 || TestOdbcTypes.java: 1323 - 1330 || TestOdbcTypes.java: 1370 - 1377 || TestOdbcTypes.java: 1412 - 1419 || TestOdbcTypes.java: 1540 - 1547 || TestOdbcTypes.java: 1592 - 1599 |
 CLONE CLASS: 	= new junit.framework.AssertionFailedError(se.getMessage()); 
 				ase.initCause(se); 
 				throw ase; 
 				} finally { 
 				try { 
 				if (rs != null) { 
 				rs.close(); 
 				} 
 				
 
 LINES: 		| Grantee.java: 812 - 820 || Grantee.java: 827 - 835 |
 CLONE CLASS: 	if (isFullyAccessibleByRole(table.getName())) { 
 				return true; 
 				} 
 				Right right = (Right) fullRightsMap.get(table.getName()); 
 				if (right == null) { 
 				return false; 
 				} 
 				
 
 LINES: 		| JDBCBlobFile.java: 866 - 875 || JDBCClobFile.java: 1086 - 1095 |
 CLONE CLASS: 	throw new NullPointerException("file"); 
 				} 
 				if (pos < 0) { 
 				throw new IllegalArgumentException("pos: " + pos); 
 				} 
 				if (length < 0) { 
 				throw new IllegalArgumentException("length: " + length); 
 				} 
 				
 
 LINES: 		| HSQLDialect.java: 381 - 389 || HSQLDialect.java: 361 - 369 |
 CLONE CLASS: 	); 
 				} 
 				return constraintName; 
 				} 
 				}; 
 				public String getSelectClauseNullString(int sqlType) { 
 				String literal; 
 				switch ( sqlType ) { 
 				
 
 LINES: 		| WebServer.java: 200 - 206 || Server.java: 2528 - 2534 || WebServer.java: 200 - 206 |
 CLONE CLASS: 	} else { 
 				server.print("Could not load properties from file"); 
 				server.print("Using cli/default properties only"); 
 				} 
 				server.start(); 
 				} 
 				
 
 LINES: 		| TestSql.java: 157 - 172 || TestSql.java: 177 - 192 |
 CLONE CLASS: 	ResultSetMetaData rsmd    = rs.getMetaData(); 
 				String            result0 = ""; 
 				for (; rs.next(); ) { 
 				for (int i = 0; i < rsmd.getColumnCount(); i++) { 
 				result0 += rs.getString(i + 1) + ":"; 
 				} 
 				result0 += "\n"; 
 				} 
 				rs.close(); 
 				System.out.println(result0); 
 				} 
 				{ 
 				
 
 LINES: 		| QuerySpecification.java: 357 - 364 || QueryExpression.java: 450 - 457 |
 CLONE CLASS: 	isPartOneResolved = true; 
 				} 
 				void resolveTypesPartTwo(Session session) { 
 				if (isPartTwoResolved) { 
 				return; 
 				} 
 				
 
 LINES: 		| CharacterType.java: 418 - 424 || CharacterType.java: 439 - 445 |
 CLONE CLASS: 	if (slen > precision) { 
 				if (getRightTrimSise((String) a, ' ') <= precision) { 
 				return ((String) a).substring(0, (int) precision); 
 				} else { 
 				throw Error.error(ErrorCode.X_22001); 
 				} 
 				} 
 				
 
 LINES: 		| ParserDQL.java: 647 - 655 || ParserDQL.java: 673 - 681 || ParserDQL.java: 715 - 723 |
 CLONE CLASS: 	} 
 				if (readIfThis(Tokens.COMMA)) { 
 				continue; 
 				} 
 				if (token.tokenType == Tokens.CLOSEBRACKET) { 
 				break; 
 				} 
 				
 
 LINES: 		| RangeVariableResolver.java: 430 - 441 || RangeVariableResolver.java: 446 - 457 |
 CLONE CLASS: 	if (idx < 0) { 
 				e.isSingleColumnEqual     = true; 
 				e.isSingleColumnCondition = true; 
 				tempMap.put(e.getRightNode().getColumn(), e.getLeftNode()); 
 				continue; 
 				} 
 				if (idx >= firstOuterJoinIndex) { 
 				continue; 
 				} 
 				
 
 LINES: 		| JDBCClobFile.java: 121 - 128 || JDBCClobFile.java: 626 - 633 |
 CLONE CLASS: 	} catch (Exception ex) { 
 				throw JDBCUtil.sqlException(ex); 
 				} finally { 
 				if (adapter != null) { 
 				try { 
 				adapter.close(); 
 				} catch (Exception ex) {} 
 				} 
 				
 
 LINES: 		| TestAllTypes.java: 434 - 449 || TestCacheSize.java: 991 - 1006 || TestHashStructures.java: 538 - 553 |
 CLONE CLASS: 	} 
 				int nextIntRandom(Random r, int range) { 
 				int b = r.nextInt(); 
 				if (b == Integer.MIN_VALUE) { 
 				b = Integer.MAX_VALUE; 
 				} 
 				b = Math.abs(b); 
 				return b % range; 
 				} 
 				public static void main(String[] argv) { 
 				
 
 LINES: 		| DatabaseInformationFull.java: 3361 - 3368 || DatabaseInformationFull.java: 3536 - 3543 || DatabaseInformationFull.java: 5747 - 5754 || DatabaseInformationFull.java: 7841 - 7848 |
 CLONE CLASS: 	addColumn(t, "CHARACTER_MAXIMUM_LENGTH", CARDINAL_NUMBER); 
 				addColumn(t, "CHARACTER_OCTET_LENGTH", CARDINAL_NUMBER); 
 				addColumn(t, "CHARACTER_SET_CATALOG", SQL_IDENTIFIER); 
 				addColumn(t, "CHARACTER_SET_SCHEMA", SQL_IDENTIFIER); 
 				addColumn(t, "CHARACTER_SET_NAME", SQL_IDENTIFIER); 
 				addColumn(t, "COLLATION_CATALOG", SQL_IDENTIFIER); 
 				addColumn(t, "COLLATION_SCHEMA", SQL_IDENTIFIER); 
 				addColumn(t, "COLLATION_NAME", SQL_IDENTIFIER); 
 				
 
 LINES: 		| ExpressionLogical.java: 513 - 522 || ExpressionArrayAggregate.java: 124 - 133 || ExpressionOp.java: 273 - 282 || Expression.java: 373 - 382 || ExpressionAggregate.java: 133 - 142 || ExpressionArithmetic.java: 149 - 158 |
 CLONE CLASS: 	} 
 				return sb.toString(); 
 				} 
 				protected String describe(Session session, int blanks) { 
 				StringBuffer sb = new StringBuffer(64); 
 				sb.append('\n'); 
 				
 
 LINES: 		| TestCacheSize.java: 524 - 530 || TestCacheSize.java: 562 - 568 || TestCacheSize.java: 597 - 603 |
 CLONE CLASS: 	StopWatch        sw        = new StopWatch(); 
 				java.util.Random randomgen = new java.util.Random(); 
 				int              i         = 0; 
 				boolean          slow      = false; 
 				try { 
 				PreparedStatement ps = cConnection.prepareStatement( 
 				
 
 LINES: 		| ParserDDL.java: 2483 - 2491 || ParserDDL.java: 2504 - 2512 |
 CLONE CLASS: 	read(); 
 				isIdentity   = true; 
 				isPKIdentity = true; 
 				typeObject   = Type.SQL_BIGINT; 
 				sequence = new NumberSequence(null, 1, 1, 
 				typeObject); 
 				break; 
 				
 
 LINES: 		| TestLobs.java: 107 - 115 || TestLobs.java: 869 - 877 |
 CLONE CLASS: 	ps.setBlob(1, blob); 
 				ps.executeUpdate(); 
 				data[4] = 50; 
 				blob    = new JDBCBlob(data); 
 				ps.setBlob(1, blob); 
 				ps.executeUpdate(); 
 				ps.close(); 
 				
 
 LINES: 		| DataFileCacheSession.java: 122 - 128 || DataFileCache.java: 710 - 716 || DataFileCache.java: 802 - 808 |
 CLONE CLASS: 	throw Error.error(t, ErrorCode.FILE_IO_ERROR, 
 				ErrorCode.M_DataFileCache_close, new Object[] { 
 				t.toString(), dataFileName 
 				}); 
 				} finally { 
 				writeLock.unlock(); 
 				} 
 				
 
 LINES: 		| JDBCBlobClient.java: 281 - 304 || JDBCClobClient.java: 613 - 639 |
 CLONE CLASS: 	} catch (HsqlException e) { 
 				throw JDBCUtil.sqlException(e); 
 				} 
 				} 
 				public synchronized void free() throws SQLException { 
 				isClosed = true; 
 				
 
 LINES: 		| ParserDDL.java: 4673 - 4681 || ParserDML.java: 832 - 840 || ParserDML.java: 873 - 881 |
 CLONE CLASS: 	} 
 				if (token.tokenType == Tokens.COMMA) { 
 				read(); 
 				continue; 
 				} 
 				break; 
 				
 
 LINES: 		| BaseList.java: 169 - 182 || WrapperIterator.java: 194 - 207 |
 CLONE CLASS: 	} 
 				throw new NoSuchElementException(); 
 				} 
 				public int nextInt() { 
 				throw new NoSuchElementException(); 
 				} 
 				public long nextLong() { 
 				throw new NoSuchElementException(); 
 				} 
 				public void remove() { 
 				
 
 LINES: 		| DatabaseInformationFull.java: 2731 - 2736 || DatabaseInformationFull.java: 3480 - 3485 || DatabaseInformationFull.java: 6011 - 6016 || DatabaseInformationFull.java: 7970 - 7975 |
 CLONE CLASS: 	row[datetime_precision] = ValuePool.getLong(type.scale); 
 				} else if (type.isBinaryType()) { 
 				row[character_maximum_length] = 
 				ValuePool.getLong(type.precision); 
 				row[character_octet_length] = 
 				ValuePool.getLong(type.precision); 
 				
 
 LINES: 		| StatementSchema.java: 1107 - 1113 || StatementSchema.java: 1147 - 1153 |
 CLONE CLASS: 	} catch (HsqlException e) { 
 				if (ifNotExists != null && ifNotExists.booleanValue()) { 
 				return Result.updateZeroResult; 
 				} else { 
 				return Result.newErrorResult(e, sql); 
 				} 
 				} 
 				
 
 LINES: 		| RowType.java: 127 - 139 || ArrayType.java: 153 - 165 |
 CLONE CLASS: 	if (b == null) { 
 				return 1; 
 				} 
 				Object[] arra   = (Object[]) a; 
 				Object[] arrb   = (Object[]) b; 
 				int      length = arra.length; 
 				if (arrb.length < length) { 
 				length = arrb.length; 
 				} 
 				for (int i = 0; i < length; i++) { 
 				
 
 LINES: 		| ParserRoutine.java: 462 - 470 || ParserDML.java: 553 - 561 |
 CLONE CLASS: 	colIndexList.toArray(columnMap); 
 				Expression[] targets = new Expression[targetSet.size()]; 
 				targetSet.toArray(targets); 
 				for (int i = 0; i < targets.length; i++) { 
 				this.resolveOuterReferencesAndTypes(rangeGroups, targets[i]); 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 5474 - 5480 || DatabaseInformationFull.java: 5698 - 5704 |
 CLONE CLASS: 	} 
 				row                   = t.getEmptyRowData(); 
 				row[specific_catalog] = database.getCatalogName().name; 
 				row[specific_schema]  = routine.getSchemaName().name; 
 				row[specific_name]    = routine.getSpecificName().name; 
 				row[routine_catalog]  = database.getCatalogName().name; 
 				
 
 LINES: 		| ParserDDL.java: 4386 - 4392 || ParserCommand.java: 807 - 813 |
 CLONE CLASS: 	cs.setSQL(sql); 
 				return cs; 
 				} 
 				case Tokens.INITIAL : { 
 				read(); 
 				readThis(Tokens.SCHEMA); 
 				
 
 LINES: 		| IntervalType.java: 698 - 709 || DateTimeType.java: 1029 - 1040 |
 CLONE CLASS: 	return sb.toString(); 
 				} 
 				public boolean canConvertFrom(Type otherType) { 
 				if (otherType.typeCode == Types.SQL_ALL_TYPES) { 
 				return true; 
 				} 
 				if (otherType.isCharacterType()) { 
 				return true; 
 				} 
 				
 
 LINES: 		| ParserDDL.java: 2584 - 2594 || ParserDDL.java: 2688 - 2698 |
 CLONE CLASS: 	sequence = new NumberSequence(null, typeObject); 
 				sequence.setAlways(generatedAlways); 
 				if (token.tokenType == Tokens.OPENBRACKET) { 
 				read(); 
 				readSequenceOptions(sequence, false, false, true); 
 				readThis(Tokens.CLOSEBRACKET); 
 				} 
 				isIdentity = true; 
 				
 
 LINES: 		| JDBCBlobFile.java: 508 - 588 || JDBCClobFile.java: 635 - 699 |
 CLONE CLASS: 	if (randomAccessFile != null) { 
 				try { 
 				randomAccessFile.close(); 
 				} catch (Exception ex) {} 
 				} 
 				} 
 				} 
 				public synchronized void free() throws SQLException { 
 				if (m_closed) { 
 				return; 
 				} 
 				m_closed = true; 
 				final List streams = new ArrayList(); 
 				streams.addAll(m_streams); 
 				m_streams = null; 
 				for (Iterator itr = streams.iterator(); itr.hasNext(); ) { 
 				final Object stream = itr.next(); 
 				if (stream instanceof InputStream) { 
 				try { 
 				((InputStream) stream).close(); 
 				} catch (Exception ex) { 
 				} 
 				} else if (stream instanceof OutputStream) { 
 				try { 
 				((OutputStream) stream).close(); 
 				} catch (Exception ex) { 
 				} 
 				} 
 				} 
 				if (m_deleteOnFree) { 
 				try { 
 				m_file.delete(); 
 				} catch (Exception e) {} 
 				} 
 				} 
 				
 
 LINES: 		| ArrayUtil.java: 260 - 266 || ArrayUtil.java: 271 - 277 || ArrayUtil.java: 282 - 288 |
 CLONE CLASS: 	if (array[i] == value) { 
 				return i; 
 				} 
 				} 
 				return -1; 
 				} 
 				
 
 LINES: 		| SqlFile.java: 6292 - 6299 || SqlFile.java: 6330 - 6337 |
 CLONE CLASS: 	SqltoolRB.file_writefail.getString(filePath), e); 
 				} finally { 
 				try { 
 				if (isr != null) isr.close(); 
 				} catch (IOException ioe) { 
 				} 
 				} 
 				
 
 LINES: 		| BitType.java: 225 - 235 || BinaryType.java: 360 - 370 |
 CLONE CLASS: 	} 
 				public Object castToType(SessionInterface session, Object a, 
 				Type otherType) { 
 				return castOrConvertToType(session, a, otherType, true); 
 				} 
 				public Object convertToType(SessionInterface session, Object a, 
 				Type otherType) { 
 				return castOrConvertToType(session, a, otherType, false); 
 				} 
 				
 
 LINES: 		| BinaryData.java: 193 - 215 || BlobDataID.java: 221 - 243 |
 CLONE CLASS: 	} 
 				public void setBytes(SessionInterface session, long pos, byte[] bytes) { 
 				setBytes(session, pos, bytes, 0, bytes.length); 
 				} 
 				public void setBytes(SessionInterface session, long pos, BlobData b, 
 				long offset, long length) { 
 				if (length > Integer.MAX_VALUE) { 
 				throw new IndexOutOfBoundsException(); 
 				} 
 				byte[] bytes = b.getBytes(session, offset, (int) length); 
 				setBytes(session, pos, bytes, 0, bytes.length); 
 				} 
 				public void setBinaryStream(SessionInterface session, long pos, 
 				InputStream in) { 
 				} 
 				
 
 LINES: 		| NodeAVLDiskLarge.java: 454 - 467 || NodeAVLDisk.java: 473 - 486 |
 CLONE CLASS: 	} 
 				public void setInMemory(boolean in) { 
 				if (!in) { 
 				if (nLeft != null) { 
 				nLeft.nParent = null; 
 				} 
 				if (nRight != null) { 
 				nRight.nParent = null; 
 				} 
 				if (nParent != null) { 
 				
 
 LINES: 		| ParserRoutine.java: 420 - 433 || ParserRoutine.java: 483 - 496 |
 CLONE CLASS: 	} 
 				if (!targets[i].getDataType().canBeAssignedFrom( 
 				expression.getNodeDataType(i))) { 
 				throw Error.parseError(ErrorCode.X_42561, null, 
 				scanner.getLineNumber()); 
 				} 
 				} 
 				StatementSet cs = new StatementSet(session, targets, expression, 
 				columnMap, compileContext); 
 				return cs; 
 				} 
 				
 
 LINES: 		| TestOdbcTypes.java: 876 - 882 || TestOdbcTypes.java: 916 - 922 || TestOdbcTypes.java: 957 - 963 || TestOdbcTypes.java: 997 - 1003 || TestOdbcTypes.java: 1042 - 1048 || TestOdbcTypes.java: 1082 - 1088 || TestOdbcTypes.java: 1122 - 1128 || TestOdbcTypes.java: 1162 - 1168 || TestOdbcTypes.java: 1202 - 1208 || TestOdbcTypes.java: 1284 - 1290 || TestOdbcTypes.java: 1326 - 1332 || TestOdbcTypes.java: 1373 - 1379 || TestOdbcTypes.java: 1415 - 1421 || TestOdbcTypes.java: 1543 - 1549 || TestOdbcTypes.java: 1595 - 1601 |
 CLONE CLASS: 	} finally { 
 				try { 
 				if (rs != null) { 
 				rs.close(); 
 				} 
 				if (ps != null) { 
 				ps.close(); 
 				
 
 LINES: 		| TestCacheSize.java: 880 - 886 || TestCacheSize.java: 931 - 937 |
 CLONE CLASS: 	int              i         = 0; 
 				boolean          slow      = false; 
 				int              count     = 0; 
 				int              random    = 0; 
 				try { 
 				PreparedStatement ps = 
 				
 
 LINES: 		| QuerySpecification.java: 1259 - 1266 || QuerySpecification.java: 1276 - 1283 |
 CLONE CLASS: 	int orderCount = sortAndSlice.getOrderLength(); 
 				for (int i = 0; i < orderCount; i++) { 
 				Expression e = (Expression) sortAndSlice.exprList.get(i); 
 				if (e.queryTableColumnIndex != -1) { 
 				continue; 
 				} 
 				
 
 LINES: 		| NodeAVLDiskLarge.java: 288 - 294 || NodeAVLDiskLarge.java: 320 - 326 || NodeAVLDiskLarge.java: 343 - 349 || NodeAVLDiskLarge.java: 373 - 379 || NodeAVLDiskLarge.java: 420 - 426 |
 CLONE CLASS: 	NodeAVLDiskLarge node = this; 
 				RowAVLDisk  row  = this.row; 
 				if (!row.keepInMemory(true)) { 
 				row  = (RowAVLDisk) store.get(this.row, true); 
 				node = (NodeAVLDiskLarge) row.getNode(iId); 
 				} 
 				
 
 LINES: 		| StatementCommand.java: 384 - 390 || StatementCommand.java: 403 - 409 || StatementCommand.java: 421 - 427 || StatementCommand.java: 500 - 506 || StatementCommand.java: 817 - 823 || StatementCommand.java: 982 - 988 || StatementCommand.java: 999 - 1005 || StatementCommand.java: 1110 - 1116 || StatementCommand.java: 1321 - 1327 || StatementSession.java: 571 - 577 || StatementSession.java: 605 - 611 || StatementSession.java: 632 - 638 || StatementSession.java: 687 - 693 |
 CLONE CLASS: 	} 
 				return Result.updateZeroResult; 
 				} catch (HsqlException e) { 
 				return Result.newErrorResult(e, sql); 
 				} 
 				} 
 				
 
 LINES: 		| InputStreamWrapper.java: 67 - 76 || RAShadowFile.java: 264 - 273 |
 CLONE CLASS: 	} 
 				fetchedSize++; 
 				return byteread; 
 				} 
 				public int read(byte bytes[]) throws IOException { 
 				return read(bytes, 0, bytes.length); 
 				} 
 				
 
 LINES: 		| ParserDDL.java: 1059 - 1074 || ParserDDL.java: 1225 - 1240 |
 CLONE CLASS: 	if (token.tokenType == Tokens.ON) { 
 				if (!table.isTemp()) { 
 				throw unexpectedToken(); 
 				} 
 				read(); 
 				readThis(Tokens.COMMIT); 
 				if (token.tokenType == Tokens.DELETE) {} 
 				else if (token.tokenType == Tokens.PRESERVE) { 
 				table.persistenceScope = TableBase.SCOPE_SESSION; 
 				} 
 				read(); 
 				readThis(Tokens.ROWS); 
 				} 
 				
 
 LINES: 		| HSQLDialect.java: 652 - 707 || HSQLDialect.java: 596 - 651 |
 CLONE CLASS: 	public boolean supportsEmptyInList() { 
 				return false; 
 				} 
 				public boolean requiresCastingOfParametersInSelectClause() { 
 				return true; 
 				} 
 				public boolean doesReadCommittedCauseWritersToBlockReaders() { 
 				return hsqldbVersion >= 20; 
 				} 
 				public boolean doesRepeatableReadCauseReadersToBlockWriters() { 
 				return hsqldbVersion >= 20; 
 				} 
 				public boolean supportsLobValueChangePropogation() { 
 				return false; 
 				} 
 				public String toBooleanValueString(boolean bool) { 
 				return String.valueOf( bool ); 
 				} 
 				public boolean supportsTupleDistinctCounts() { 
 				return false; 
 				} 
 				} 
 				
 
 LINES: 		| HsqlDeque.java: 245 - 253 || LongDeque.java: 210 - 218 |
 CLONE CLASS: 	int index = firstindex + i; 
 				if (index >= list.length) { 
 				index -= list.length; 
 				} 
 				if (list[index] == value) { 
 				return i; 
 				} 
 				
 
 LINES: 		| ResultMetaData.java: 361 - 370 || ResultMetaData.java: 493 - 502 |
 CLONE CLASS: 	} 
 				} 
 				return; 
 				} 
 				default : { 
 				throw Error.runtimeError(ErrorCode.U_S0500, "ResultMetaData"); 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| TestBase.java: 138 - 144 || TestBase.java: 138 - 144 || TestCascade.java: 69 - 75 |
 CLONE CLASS: 	} catch (Exception e) { 
 				e.printStackTrace(); 
 				System.out.println(this + ".setUp() error: " + e.getMessage()); 
 				} 
 				} 
 				protected void tearDown() { 
 				
 
 LINES: 		| ArrayUtil.java: 786 - 793 || HashSet.java: 68 - 75 |
 CLONE CLASS: 	continue; 
 				} 
 				return false; 
 				} 
 				return true; 
 				} 
 				
 
 LINES: 		| StatementDMQL.java: 326 - 334 || StatementExpression.java: 100 - 108 || StatementSet.java: 134 - 142 || StatementProcedure.java: 299 - 307 |
 CLONE CLASS: 	} 
 				if (subQueries == null || subQueries.size() == 0) { 
 				return TableDerived.emptyArray; 
 				} 
 				TableDerived[] subQueryArray = new TableDerived[subQueries.size()]; 
 				subQueries.toArray(subQueryArray); 
 				
 
 LINES: 		| HsqlDeque.java: 210 - 220 || LongDeque.java: 158 - 168 |
 CLONE CLASS: 	resetCapacity(); 
 				firstindex--; 
 				if (firstindex < 0) { 
 				firstindex = list.length - 1; 
 				if (endindex == 0) { 
 				endindex = list.length; 
 				} 
 				} 
 				
 
 LINES: 		| ParserDQL.java: 2827 - 2846 || ParserDQL.java: 3224 - 3243 |
 CLONE CLASS: 	case Tokens.EXTRACT : 
 				case Tokens.CHAR_LENGTH : 
 				case Tokens.CHARACTER_LENGTH : 
 				case Tokens.OCTET_LENGTH : 
 				case Tokens.CARDINALITY : 
 				case Tokens.ABS : 
 				case Tokens.MOD : 
 				case Tokens.LN : 
 				case Tokens.EXP : 
 				case Tokens.POWER : 
 				case Tokens.SQRT : 
 				case Tokens.FLOOR : 
 				case Tokens.CEILING : 
 				case Tokens.CEIL : 
 				case Tokens.WIDTH_BUCKET : 
 				FunctionSQL function = 
 				FunctionSQL.newSQLFunction(token.tokenString, 
 				compileContext); 
 				if (function == null) { 
 				
 
 LINES: 		| DatabaseInformationFull.java: 5091 - 5102 || DatabaseInformationFull.java: 5455 - 5466 || DatabaseInformationFull.java: 5562 - 5573 || DatabaseInformationFull.java: 5678 - 5689 |
 CLONE CLASS: 	Iterator it; 
 				Object[] row; 
 				it = database.schemaManager.databaseObjectIterator( 
 				SchemaObject.SPECIFIC_ROUTINE); 
 				while (it.hasNext()) { 
 				Routine        routine = (Routine) it.next(); 
 				OrderedHashSet set     = routine.getReferences(); 
 				for (int i = 0; i < set.size(); i++) { 
 				HsqlName refName = (HsqlName) set.get(i); 
 				
 
 LINES: 		| PersistentStoreCollectionSession.java: 193 - 200 || PersistentStoreCollectionSession.java: 211 - 218 |
 CLONE CLASS: 	if (rowStoreMapSession.isEmpty()) { 
 				return; 
 				} 
 				Iterator it = rowStoreMapSession.values().iterator(); 
 				while (it.hasNext()) { 
 				PersistentStore store = (PersistentStore) it.next(); 
 				
 
 LINES: 		| ConnectionDialog.java: 338 - 352 || ConnectionDialogSwing.java: 378 - 392 |
 CLONE CLASS: 	} 
 				} 
 				public void itemStateChanged(ItemEvent e) { 
 				String s = (String) e.getItem(); 
 				for (int i = 0; i < connTypes.length; i++) { 
 				if (s.equals(connTypes[i][0])) { 
 				mDriver.setText(connTypes[i][1]); 
 				mURL.setText(connTypes[i][2]); 
 				} 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| ExpressionOp.java: 356 - 363 || Expression.java: 1045 - 1052 || Expression.java: 1059 - 1066 || ExpressionArithmetic.java: 238 - 245 |
 CLONE CLASS: 	} 
 				for (int i = 0; i < nodes.length; i++) { 
 				if (nodes[i] == null) { 
 				continue; 
 				} 
 				unresolvedSet = nodes[i].resolveColumnReferences(session, 
 				
 
 LINES: 		| StatementHandler.java: 222 - 231 || StatementSimple.java: 217 - 226 || StatementSession.java: 724 - 733 |
 CLONE CLASS: 	} 
 				public boolean isCatalogLock() { 
 				return false; 
 				} 
 				public boolean isCatalogChange() { 
 				return false; 
 				} 
 				} 
 				
 
 LINES: 		| TestCacheSize.java: 764 - 774 || TestCacheSize.java: 810 - 820 || TestCacheSize.java: 852 - 862 |
 CLONE CLASS: 	ps.execute(); 
 				if (reportProgress && (i + 1) % 10000 == 0 
 				|| (slow && (i + 1) % 100 == 0)) { 
 				System.out.println("Update " + (i + 1) + " : " 
 				+ sw.elapsedTime() + " rps: " 
 				+ (i * 1000 / (sw.elapsedTime() + 1))); 
 				} 
 				} 
 				ps.close(); 
 				
 
 LINES: 		| JDBCResultSet.java: 1038 - 1046 || JDBCResultSet.java: 1917 - 1925 |
 CLONE CLASS: 	int columnIndex) throws SQLException { 
 				checkColumn(columnIndex); 
 				Type   sourceType = resultMetaData.columnTypes[columnIndex - 1]; 
 				Object o          = getColumnInType(columnIndex, sourceType); 
 				if (o == null) { 
 				return null; 
 				
 
 LINES: 		| NumberType.java: 1466 - 1473 || IntervalType.java: 857 - 864 |
 CLONE CLASS: 	} 
 				} 
 				public Object subtract(Session session, Object a, Object b, 
 				Type otherType) { 
 				if (a == null || b == null) { 
 				return null; 
 				
 
 LINES: 		| StatementExpression.java: 129 - 146 || StatementSet.java: 282 - 299 |
 CLONE CLASS: 	return sb.toString(); 
 				} 
 				public Result execute(Session session) { 
 				Result result; 
 				try { 
 				if (subqueries.length > 0) { 
 				materializeSubQueries(session); 
 				} 
 				result = getResult(session); 
 				} catch (Throwable t) { 
 				result = Result.newErrorResult(t, null); 
 				} 
 				if (result.isError()) { 
 				
 
 LINES: 		| DatabaseInformationFull.java: 2550 - 2555 || DatabaseInformationFull.java: 4265 - 4270 |
 CLONE CLASS: 	addColumn(t, "CHARACTER_SET_CATALOG", CHARACTER_DATA); 
 				addColumn(t, "CHARACTER_SET_SCHEMA", SQL_IDENTIFIER); 
 				addColumn(t, "CHARACTER_SET_NAME", SQL_IDENTIFIER); 
 				addColumn(t, "COLLATION_CATALOG", SQL_IDENTIFIER); 
 				addColumn(t, "COLLATION_SCHEMA", SQL_IDENTIFIER); 
 				addColumn(t, "COLLATION_NAME", SQL_IDENTIFIER); 
 				
 
 LINES: 		| TestViewAsterisks.java: 539 - 549 || TestViewAsterisks.java: 554 - 564 |
 CLONE CLASS: 	new Object[][] { 
 				new Object[] { 
 				new Integer(1), "first A" 
 				}, new Object[] { 
 				new Integer(1), "first B" 
 				}, new Object[] { 
 				new Integer(2), "second A" 
 				}, new Object[] { 
 				new Integer(2), "second B" 
 				} 
 				}); 
 				
 
 LINES: 		| TestDateTime.java: 211 - 234 || TestDateTime.java: 311 - 334 |
 CLONE CLASS: 	iDeletedCount = deleteStatement.executeUpdate(); 
 				Assert.assertEquals( 
 				"Exactly one record with time data shoud have been deleted.", 
 				iDeletedCount, 1); 
 				Assert.assertNotNull( 
 				"The inserted time shouldn't be retrieved as null from the database", 
 				retrievedTime); 
 				String selectString = selectTime.toString(); 
 				String retrievedString = retrievedTime.toString(); 
 				boolean result = 
 				retrievedString.equals(selectString); 
 				Assert.assertTrue( 
 				"The time retrieved from database " 
 				+ DateFormat.getDateTimeInstance().format(retrievedTime) 
 				+ " is not the same as the inserted one " 
 				+ DateFormat.getDateTimeInstance().format(insertTime), result); 
 				} 
 				
 
 LINES: 		| ParserDDL.java: 2887 - 2894 || ParserDQL.java: 1407 - 1414 |
 CLONE CLASS: 	} 
 				end = true; 
 				break; 
 				} 
 				if (end) { 
 				break; 
 				
 
 LINES: 		| Result.java: 363 - 369 || Result.java: 388 - 394 |
 CLONE CLASS: 	if (result.generateKeys == ResultConstants 
 				.RETURN_GENERATED_KEYS_COL_NAMES || result 
 				.generateKeys == ResultConstants 
 				.RETURN_GENERATED_KEYS_COL_INDEXES) { 
 				result.generatedMetaData = new ResultMetaData(in); 
 				} 
 				break; 
 				
 
 LINES: 		| JDBCBlobFile.java: 768 - 796 || JDBCClobFile.java: 961 - 989 |
 CLONE CLASS: 	} 
 				protected final void checkIsFile(boolean checkExists) throws SQLException { 
 				boolean exists = false; 
 				boolean isFile = false; 
 				try { 
 				exists = m_file.exists(); 
 				} catch (Exception ex) { 
 				throw JDBCUtil.sqlException(ex); 
 				} 
 				if (exists) { 
 				try { 
 				isFile = m_file.isFile(); 
 				} catch (Exception ex) { 
 				throw JDBCUtil.sqlException(ex); 
 				} 
 				} 
 				if (exists) { 
 				if (!isFile) { 
 				throw JDBCUtil.invalidArgument("Is not a file: " + m_file); 
 				} 
 				} else if (checkExists) { 
 				throw JDBCUtil.invalidArgument("Does not exist: " + m_file); 
 				} 
 				} 
 				
 
 LINES: 		| Scanner.java: 986 - 995 || Scanner.java: 1807 - 1816 |
 CLONE CLASS: 	case '0' : 
 				case '1' : 
 				case '2' : 
 				case '3' : 
 				case '4' : 
 				case '5' : 
 				case '6' : 
 				case '7' : 
 				case '8' : 
 				case '9' : 
 				
 
 LINES: 		| DateTimeType.java: 1071 - 1093 || DateTimeType.java: 1121 - 1142 |
 CLONE CLASS: 	if (a == null || b == null) { 
 				return null; 
 				} 
 				if (otherType.isNumberType()) { 
 				if (typeCode == Types.SQL_DATE) { 
 				b = ((NumberType) otherType).floor(b); 
 				} 
 				b = Type.SQL_INTERVAL_SECOND_MAX_PRECISION.multiply( 
 				IntervalSecondData.oneDay, b); 
 				} 
 				switch (typeCode) { 
 				case Types.SQL_TIME_WITH_TIME_ZONE : 
 				case Types.SQL_TIME : 
 				if (b instanceof IntervalMonthData) { 
 				throw Error.runtimeError(ErrorCode.U_S0500, 
 				"DateTimeType"); 
 				} else if (b instanceof IntervalSecondData) { 
 				return addSeconds((TimeData) a, 
 				
 
 LINES: 		| JDBCResultSet.java: 50 - 58 || JDBCCallableStatement.java: 46 - 54 |
 CLONE CLASS: 	import java.sql.Time; 
 				import java.sql.Timestamp; 
 				import java.util.Calendar; 
 				import java.util.Map; 
 				import java.sql.NClob; 
 				import java.sql.RowId; 
 				import java.sql.SQLXML; 
 				
 
 LINES: 		| SchemaManager.java: 1191 - 1197 || SchemaManager.java: 1217 - 1223 || SchemaManager.java: 1242 - 1248 || SchemaManager.java: 1267 - 1273 || SchemaManager.java: 1293 - 1299 || SchemaManager.java: 1974 - 1980 || IntKeyHashMapConcurrent.java: 78 - 84 || LongKeyHashMap.java: 78 - 84 |
 CLONE CLASS: 	} 
 				return null; 
 				} finally { 
 				readLock.unlock(); 
 				} 
 				} 
 				
 
 LINES: 		| ExpressionOp.java: 648 - 661 || ExpressionOp.java: 726 - 739 |
 CLONE CLASS: 	boolean wasEscape   = false; 
 				int     escapeCount = 0; 
 				int     i           = 0; 
 				int     j           = 0; 
 				for (; i < array.length; i++) { 
 				if (array[i] == escapeChar) { 
 				if (wasEscape) { 
 				escapeCount++; 
 				newArray[j++] = array[i]; 
 				wasEscape     = false; 
 				continue; 
 				
 
 LINES: 		| BitMap.java: 505 - 512 || BitMap.java: 539 - 546 || BitMap.java: 579 - 586 |
 CLONE CLASS: 	if (shift == 0) { 
 				return; 
 				} 
 				shift = 8 - shift; 
 				if (count > shift) { 
 				mask           = ((source & 0xff) << 8) >>> shift; 
 				
 
 LINES: 		| Expression.java: 590 - 601 || Expression.java: 677 - 688 |
 CLONE CLASS: 	case OpTypes.COUNT : 
 				case OpTypes.SUM : 
 				case OpTypes.MIN : 
 				case OpTypes.MAX : 
 				case OpTypes.AVG : 
 				case OpTypes.EVERY : 
 				case OpTypes.SOME : 
 				case OpTypes.STDDEV_POP : 
 				case OpTypes.STDDEV_SAMP : 
 				case OpTypes.VAR_POP : 
 				case OpTypes.VAR_SAMP : 
 				return false; 
 				
 
 LINES: 		| Expression.java: 625 - 634 || Expression.java: 689 - 714 |
 CLONE CLASS: 	} 
 				if (nodes.length == 0) { 
 				return false; 
 				} 
 				boolean result = true; 
 				for (int i = 0; i < nodes.length; i++) { 
 				result &= (nodes[i] == null 
 				
 
 LINES: 		| TestTextTables.java: 54 - 59 || TestTextTables.java: 66 - 71 |
 CLONE CLASS: 	TestUtil.deleteDatabase("/hsql/testtext/test"); 
 				TestUtil.delete("/hsql/testtext/t.txt"); 
 				TestUtil.delete("/hsql/testtext/tt.txt"); 
 				TestUtil.delete("/hsql/testtext/tident.txt"); 
 				TestUtil.delete("/hsql/testtext/tsingle.txt"); 
 				initDatabase(); 
 				
 
 LINES: 		| TestOdbcService.java: 133 - 140 || TestOdbcService.java: 320 - 327 |
 CLONE CLASS: 	assertFalse("Too many rows fetched", rs.next()); 
 				rs.close(); 
 				verifySimpleQueryOutput(); 
 				} catch (SQLException se) { 
 				junit.framework.AssertionFailedError ase 
 				= new junit.framework.AssertionFailedError(se.getMessage()); 
 				ase.initCause(se); 
 				
 
 LINES: 		| BitType.java: 153 - 167 || CharacterType.java: 276 - 302 || BinaryType.java: 239 - 253 |
 CLONE CLASS: 	default : 
 				throw Error.error(ErrorCode.X_42562); 
 				} 
 				} 
 				public Type getCombinedType(Session session, Type other, int operation) { 
 				if (operation != OpTypes.CONCAT) { 
 				return getAggregateType(other); 
 				} 
 				Type newType; 
 				
 
 LINES: 		| AbstractTestOdbc.java: 195 - 201 || TestOdbcService.java: 137 - 143 || TestOdbcService.java: 148 - 154 || TestOdbcService.java: 239 - 245 || TestOdbcService.java: 324 - 330 || TestOdbcService.java: 343 - 349 |
 CLONE CLASS: 	} catch (SQLException se) { 
 				junit.framework.AssertionFailedError ase 
 				= new junit.framework.AssertionFailedError(se.getMessage()); 
 				ase.initCause(se); 
 				throw ase; 
 				} 
 				} 
 				
 
 LINES: 		| ParserBase.java: 159 - 166 || ParserBase.java: 190 - 197 |
 CLONE CLASS: 	break; 
 				} else { 
 				if (ArrayUtil.find(startTokens, token.tokenType) != -1) { 
 				break; 
 				} 
 				} 
 				read(); 
 				
 
 LINES: 		| StatementCompound.java: 376 - 385 || StatementCompound.java: 500 - 509 || StatementCompound.java: 671 - 680 |
 CLONE CLASS: 	result = executeProtected(session, statements[i]); 
 				result = handleCondition(session, result); 
 				if (result.isError()) { 
 				break; 
 				} 
 				if (result.getType() == ResultConstants.VALUE) { 
 				break; 
 				} 
 				
 
 LINES: 		| SchemaManager.java: 2596 - 2602 || SchemaManager.java: 2638 - 2644 || SchemaManager.java: 2668 - 2674 || SchemaManager.java: 2699 - 2705 || SchemaManager.java: 2783 - 2789 || SchemaManager.java: 2827 - 2833 |
 CLONE CLASS: 	list.toArray(array); 
 				return array; 
 				} finally { 
 				readLock.unlock(); 
 				} 
 				} 
 				
 
 LINES: 		| TestBench.java: 671 - 685 || JDBCBench.java: 763 - 777 |
 CLONE CLASS: 	E.printStackTrace(); 
 				} 
 				return null; 
 				} 
 				public static void connectClose(Connection c) { 
 				if (c == null) { 
 				return; 
 				} 
 				try { 
 				c.close(); 
 				} catch (Exception E) { 
 				
 
 LINES: 		| ParserDDL.java: 2963 - 2969 || ParserDDL.java: 2996 - 3002 |
 CLONE CLASS: 	if (constName == null) { 
 				constName = database.nameManager.newAutoName("CT", 
 				schemaObject.getSchemaName(), 
 				schemaObject.getName(), SchemaObject.CONSTRAINT); 
 				} 
 				Constraint c = 
 				
 
 LINES: 		| ParserCommand.java: 543 - 550 || ParserCommand.java: 570 - 577 |
 CLONE CLASS: 	args); 
 				} 
 				if (!e.getDataType().isCharacterType()) { 
 				throw Error.error(ErrorCode.X_0P000); 
 				} 
 				if (e.getType() != OpTypes.VALUE 
 				
 
 LINES: 		| RowAction.java: 639 - 654 || RowAction.java: 715 - 730 |
 CLONE CLASS: 	if (tail != null) { 
 				tail.next = null; 
 				} 
 				} else { 
 				if (head == null) { 
 				head = tail = action; 
 				} else { 
 				tail.next = action; 
 				tail      = action; 
 				} 
 				} 
 				action = action.next; 
 				} while (action != null); 
 				if (head == null) { 
 				
 
 LINES: 		| Scanner.java: 1579 - 1586 || Scanner.java: 1598 - 1605 || Scanner.java: 1627 - 1634 |
 CLONE CLASS: 	} 
 				token.tokenString = sqlString.substring(currentPosition 
 				+ 2, pos); 
 				token.tokenType   = Tokens.X_REMARK; 
 				token.isDelimiter = true; 
 				return; 
 				
 
 LINES: 		| TestAllTypes.java: 419 - 425 || TestCacheSize.java: 763 - 769 || TestCacheSize.java: 851 - 857 |
 CLONE CLASS: 	ps.setInt(1, random); 
 				ps.execute(); 
 				if (reportProgress && (i + 1) % 10000 == 0 
 				|| (slow && (i + 1) % 100 == 0)) { 
 				System.out.println("Update " + (i + 1) + " : " 
 				+ sw.elapsedTime() + " rps: " 
 				
 
 LINES: 		| TestTriggers.java: 79 - 84 || TestTriggers.java: 100 - 105 |
 CLONE CLASS: 	try { 
 				runStatements(); 
 				} catch (SQLException e) { 
 				e.printStackTrace(); 
 				assertTrue(false); 
 				} 
 				
 
 LINES: 		| ParserDDL.java: 3192 - 3199 || ParserDQL.java: 3016 - 3025 || ParserDQL.java: 3064 - 3073 |
 CLONE CLASS: 	break; 
 				} 
 				default : 
 				end = true; 
 				break; 
 				} 
 				if (end) { 
 				
 
 LINES: 		| IntKeyIntValueHashMap.java: 157 - 166 || IntKeyIntValueHashMap.java: 192 - 201 |
 CLONE CLASS: 	} 
 				public boolean isEmpty() { 
 				return size() == 0; 
 				} 
 				public void clear() { 
 				IntKeyIntValueHashMap.this.clear(); 
 				} 
 				} 
 				
 
 LINES: 		| TestSql.java: 61 - 71 || TestMerge.java: 57 - 67 || TestMultiInsert.java: 57 - 67 |
 CLONE CLASS: 	} 
 				protected void setUp() { 
 				super.setUp(); 
 				try { 
 				connection = super.newConnection(); 
 				stmnt      = connection.createStatement(); 
 				} catch (Exception e) {} 
 				} 
 				
 
 LINES: 		| JDBCSQLXML.java: 2399 - 2456 || JDBCSQLXML.java: 2932 - 2989 |
 CLONE CLASS: 	} 
 				public void ignorableWhitespace(char[] ch, int start, 
 				int length) throws SAXException { 
 				characters(ch, start, length); 
 				} 
 				public void processingInstruction(String target, 
 				String data) throws SAXException { 
 				checkClosed(); 
 				
 
 LINES: 		| StatementCommand.java: 908 - 916 || StatementCommand.java: 948 - 956 |
 CLONE CLASS: 	PersistentStore store = table.getRowStore(session); 
 				store.setSpaceManager(tableSpace); 
 				return Result.updateZeroResult; 
 				} catch (HsqlException e) { 
 				return Result.newErrorResult(e, sql); 
 				} 
 				} 
 				
 
 LINES: 		| BinaryData.java: 259 - 267 || BlobDataID.java: 113 - 121 || ClobDataID.java: 236 - 244 |
 CLONE CLASS: 	} 
 				public long getId() { 
 				return id; 
 				} 
 				public void setId(long id) { 
 				this.id = id; 
 				} 
 				
 
 LINES: 		| StatementSchema.java: 1131 - 1137 || StatementSchema.java: 1237 - 1243 |
 CLONE CLASS: 	schemaManager.addSchemaObject(type); 
 				break; 
 				} catch (HsqlException e) { 
 				return Result.newErrorResult(e, sql); 
 				} 
 				} 
 				
 
 LINES: 		| IntValueHashMap.java: 263 - 269 || LongValueHashMap.java: 214 - 220 |
 CLONE CLASS: 	while (it.hasNext()) { 
 				Object key = it.next(); 
 				put(key, t.get(key)); 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 2696 - 2709 || DatabaseInformationFull.java: 5976 - 5989 |
 CLONE CLASS: 	((CharacterType) type).getCharacterSet() 
 				.getSchemaName().name; 
 				row[character_set_name] = 
 				((CharacterType) type).getCharacterSet().getName() 
 				.name; 
 				row[collation_catalog] = database.getCatalogName().name; 
 				row[collation_schema] = 
 				((CharacterType) type).getCollation().getSchemaName() 
 				.name; 
 				row[collation_name] = 
 				((CharacterType) type).getCollation().getName().name; 
 				} else if (type.isNumberType()) { 
 				row[numeric_precision] = ValuePool.getLong( 
 				((NumberType) type).getNumericPrecisionInRadix()); 
 				
 
 LINES: 		| DatabaseInformationFull.java: 6302 - 6309 || DatabaseInformationFull.java: 6341 - 6348 || DatabaseInformationFull.java: 6379 - 6386 || DatabaseInformationFull.java: 6416 - 6423 |
 CLONE CLASS: 	t.createPrimaryKeyConstraint(name, new int[]{ 0 }, false); 
 				return t; 
 				} 
 				Session sys = database.sessionManager.newSysSession( 
 				SqlInvariants.INFORMATION_SCHEMA_HSQLNAME, session.getUser()); 
 				String sql = (String) statementMap.get(""); 
 				
 
 LINES: 		| SchemaManager.java: 950 - 965 || TableWorks.java: 905 - 920 |
 CLONE CLASS: 	Table      t = c.getMain(); 
 				if (t != table) { 
 				tableSet.add(t); 
 				} 
 				t = c.getRef(); 
 				if (t != table) { 
 				tableSet.add(t); 
 				} 
 				constraintNameSet.add(c.getMainName()); 
 				constraintNameSet.add(c.getRefName()); 
 				indexNameSet.add(c.getRefIndex().getName()); 
 				} 
 				
 
 LINES: 		| ServerConnection.java: 1049 - 1056 || ServerConnection.java: 1419 - 1429 |
 CLONE CLASS: 	} else { 
 				throw new RecoverableOdbcFailure( 
 				null, 
 				"Description packet request type invalid: " + c, 
 				"08P01"); 
 				} 
 				if (server.isTrace()) { 
 				
 
 LINES: 		| DatabaseInformationFull.java: 4726 - 4731 || DatabaseInformationFull.java: 5056 - 5061 || DatabaseInformationFull.java: 5184 - 5189 || DatabaseInformationFull.java: 5428 - 5433 || DatabaseInformationFull.java: 5645 - 5650 || DatabaseInformationFull.java: 5733 - 5738 |
 CLONE CLASS: 	addColumn(t, "SPECIFIC_CATALOG", SQL_IDENTIFIER); 
 				addColumn(t, "SPECIFIC_SCHEMA", SQL_IDENTIFIER); 
 				addColumn(t, "SPECIFIC_NAME", SQL_IDENTIFIER); 
 				addColumn(t, "ROUTINE_CATALOG", SQL_IDENTIFIER); 
 				addColumn(t, "ROUTINE_SCHEMA", SQL_IDENTIFIER); 
 				addColumn(t, "ROUTINE_NAME", SQL_IDENTIFIER); 
 				
 
 LINES: 		| Right.java: 618 - 624 || Right.java: 698 - 704 |
 CLONE CLASS: 	case GrantConstants.EXECUTE : 
 				return isFull; 
 				default : 
 				throw Error.runtimeError(ErrorCode.U_S0500, "Right"); 
 				} 
 				} 
 				
 
 LINES: 		| RowStoreAVLDisk.java: 258 - 266 || RowStoreAVLDiskData.java: 230 - 238 || RowStoreAVLMemory.java: 158 - 166 |
 CLONE CLASS: 	} 
 				public void rollbackRow(Session session, Row row, int changeAction, 
 				int txModel) { 
 				switch (changeAction) { 
 				case RowAction.ACTION_DELETE : 
 				if (txModel == TransactionManager.LOCKS) { 
 				
 
 LINES: 		| ConnectionDialogCommon.java: 247 - 255 || ConnectionDialogCommon.java: 287 - 295 |
 CLONE CLASS: 	try { 
 				if (recentSettings == null) { 
 				setHomeDir(); 
 				if (homedir == null) { 
 				return; 
 				} 
 				recentSettings = new File(homedir, fileName); 
 				
 
 LINES: 		| DatabaseManagerSwing.java: 1670 - 1682 || DatabaseManager.java: 883 - 895 |
 CLONE CLASS: 	} catch (SQLException e) { 
 				lTime = System.currentTimeMillis() - lTime; 
 				g[0]  = "SQL Error"; 
 				gResult.setHead(g); 
 				String s = e.getMessage(); 
 				s    += " / Error Code: " + e.getErrorCode(); 
 				s    += " / State: " + e.getSQLState(); 
 				g[0] = s; 
 				gResult.addRow(g); 
 				
 
 LINES: 		| DatabaseInformationFull.java: 3449 - 3454 || DatabaseInformationFull.java: 7941 - 7946 |
 CLONE CLASS: 	.name; 
 				row[character_set_name] = 
 				((CharacterType) type).getCharacterSet().getName().name; 
 				row[collation_catalog] = database.getCatalogName().name; 
 				row[collation_schema] = 
 				((CharacterType) type).getCollation().getSchemaName().name; 
 				
 
 LINES: 		| OrderedIntHashSet.java: 106 - 132 || OrderedLongHashSet.java: 106 - 132 |
 CLONE CLASS: 	if (!super.containsKey(array[i])) { 
 				break; 
 				} 
 				} 
 				return i; 
 				} 
 				break; 
 				} 
 				} 
 				return i; 
 				} 
 				public boolean addAll(Collection col) { 
 				int      oldSize = size(); 
 				Iterator it      = col.iterator(); 
 				while (it.hasNext()) { 
 				
 
 LINES: 		| BaseHashMap.java: 359 - 368 || BaseHashMap.java: 687 - 696 |
 CLONE CLASS: 	if (longKey == 0) { 
 				hasZeroKey   = false; 
 				zeroKeyIndex = -1; 
 				} 
 				if (isIntKey) { 
 				intKeyTable[lookup] = 0; 
 				} else { 
 				longKeyTable[lookup] = 0; 
 				} 
 				
 
 LINES: 		| RowStoreAVLDisk.java: 42 - 47 || RowStoreAVLDiskData.java: 41 - 46 |
 CLONE CLASS: 	import org.hsqldb.Session; 
 				import org.hsqldb.Table; 
 				import org.hsqldb.TransactionManager; 
 				import org.hsqldb.error.Error; 
 				import org.hsqldb.error.ErrorCode; 
 				import org.hsqldb.index.Index; 
 				
 
 LINES: 		| RowInputBase.java: 286 - 295 || RowInputBase.java: 310 - 319 |
 CLONE CLASS: 	mark = 0; 
 				reset(); 
 				if (buffer.length < rowsize) { 
 				buffer = new byte[rowsize]; 
 				} 
 				filePos   = filepos; 
 				size      = count = rowsize; 
 				
 
 LINES: 		| JDBCBench.java: 474 - 481 || JDBCBench.java: 492 - 499 || JDBCBench.java: 510 - 517 |
 CLONE CLASS: 	if (createExtension.length() > 0) { 
 				Query += createExtension; 
 				} 
 				Stmt.execute(Query); 
 				Stmt.clearWarnings(); 
 				if (tableExtension.length() > 0) { 
 				
 
 LINES: 		| RowSetNavigatorData.java: 290 - 312 || RowSetNavigatorDataTable.java: 306 - 328 |
 CLONE CLASS: 	} 
 				public void read(RowInputInterface in, 
 				ResultMetaData meta) throws IOException {} 
 				public void write(RowOutputInterface out, 
 				ResultMetaData meta) throws IOException { 
 				reset(); 
 				out.writeLong(id); 
 				out.writeInt(size); 
 				out.writeInt(0); 
 				out.writeInt(size); 
 				while (hasNext()) { 
 				Object[] data = getNext(); 
 				out.writeData(meta.getExtendedColumnCount(), meta.columnTypes, 
 				data, null, null); 
 				} 
 				reset(); 
 				} 
 				
 
 LINES: 		| JDBCStatementBase.java: 182 - 3752 || JDBCPreparedStatement.java: 3900 - 3908 |
 CLONE CLASS: 	SQLWarning w = JDBCUtil.sqlWarning(current); 
 				if (rootWarning == null) { 
 				rootWarning = w; 
 				} else { 
 				rootWarning.setNextWarning(w); 
 				} 
 				if (rootWarning == null) { 
 				rootWarning = w; 
 				} else { 
 				rootWarning.setNextWarning(w); 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| TransactionManagerCommon.java: 417 - 425 || TransactionManagerCommon.java: 449 - 457 |
 CLONE CLASS: 	canUnlock = true; 
 				break; 
 				} 
 				} 
 				if (!canUnlock) { 
 				return; 
 				} 
 				
 
 LINES: 		| StatementSchema.java: 1485 - 1503 || ParserDDL.java: 5187 - 5205 |
 CLONE CLASS: 	if (session.isProcessingLog()) { 
 				return; 
 				} 
 				if (SqlInvariants.isSystemSchemaName(schema.name)) { 
 				throw Error.error(ErrorCode.X_42503); 
 				} 
 				if (session.parser.isSchemaDefinition) { 
 				if (schema == session.getCurrentSchemaHsqlName()) { 
 				return; 
 				} 
 				Error.error(ErrorCode.X_42505, schema.name); 
 				} 
 				session.getGrantee().checkSchemaUpdateOrGrantRights(schema.name); 
 				session.checkDDLWrite(); 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 2269 - 2275 || DatabaseInformationFull.java: 4135 - 4141 |
 CLONE CLASS: 	t.insertSys(session, store, row); 
 				} 
 				} 
 				} 
 				} 
 				return t; 
 				
 
 LINES: 		| JDBCStatement.java: 500 - 566 || JDBCConnection.java: 1460 - 1535 |
 CLONE CLASS: 	} 
 				public synchronized SQLWarning getWarnings() throws SQLException { 
 				checkClosed(); 
 				return rootWarning; 
 				} 
 				public synchronized void clearWarnings() throws SQLException { 
 				checkClosed(); 
 				rootWarning = null; 
 				} 
 				
 
 LINES: 		| TestMerge.java: 32 - 39 || TestMultiInsert.java: 32 - 39 |
 CLONE CLASS: 	package org.hsqldb.test; 
 				import java.sql.Connection; 
 				import java.sql.PreparedStatement; 
 				import java.sql.ResultSet; 
 				import java.sql.ResultSetMetaData; 
 				import java.sql.SQLException; 
 				import java.sql.Statement; 
 				
 
 LINES: 		| Log.java: 38 - 43 || Logger.java: 44 - 49 |
 CLONE CLASS: 	import org.hsqldb.HsqlException; 
 				import org.hsqldb.HsqlNameManager; 
 				import org.hsqldb.HsqlNameManager.HsqlName; 
 				import org.hsqldb.NumberSequence; 
 				import org.hsqldb.Row; 
 				import org.hsqldb.Session; 
 				
 
 LINES: 		| HSQLDialect.java: 405 - 411 || HSQLDialect.java: 373 - 379 |
 CLONE CLASS: 	break; 
 				case Types.DATE: 
 				literal = "cast(null as date)"; 
 				break; 
 				case Types.TIMESTAMP: 
 				literal = "cast(null as timestamp)"; 
 				break; 
 				
 
 LINES: 		| LongKeyLongValueHashMap.java: 151 - 158 || LongKeyLongValueHashMap.java: 186 - 193 || IntKeyIntValueHashMap.java: 144 - 151 || IntKeyIntValueHashMap.java: 179 - 186 || OrderedLongKeyHashMap.java: 186 - 193 || OrderedLongKeyHashMap.java: 221 - 228 || OrderedIntKeyHashMap.java: 143 - 150 || OrderedIntKeyHashMap.java: 178 - 185 || MultiValueHashMap.java: 141 - 148 || MultiValueHashMap.java: 181 - 188 || IntKeyHashMapConcurrent.java: 182 - 189 || IntKeyHashMapConcurrent.java: 217 - 224 || LongKeyHashMap.java: 216 - 223 || LongKeyHashMap.java: 251 - 258 || LongKeyIntValueHashMap.java: 155 - 162 || LongKeyIntValueHashMap.java: 190 - 197 || HashMap.java: 200 - 207 || IntValueHashMap.java: 235 - 242 || IntKeyHashMap.java: 128 - 135 || IntKeyHashMap.java: 163 - 170 |
 CLONE CLASS: 	throw new RuntimeException(); 
 				} 
 				public boolean add(Object value) { 
 				throw new RuntimeException(); 
 				} 
 				public boolean addAll(Collection c) { 
 				
 
 LINES: 		| Table.java: 1562 - 1571 || Table.java: 2385 - 2394 || Table.java: 2411 - 2420 || Table.java: 2507 - 2516 |
 CLONE CLASS: 	} 
 				switch (tableType) { 
 				case TableBase.FUNCTION_TABLE : 
 				case TableBase.SYSTEM_SUBQUERY : 
 				case TableBase.INFO_SCHEMA_TABLE : 
 				case TableBase.VIEW_TABLE : 
 				case TableBase.TEMP_TABLE : { 
 				
 
 LINES: 		| ExpressionOp.java: 609 - 1200 || Expression.java: 1521 - 1536 || ExpressionArithmetic.java: 606 - 621 |
 CLONE CLASS: 	} 
 				} 
 				public Object getValue(Session session) { 
 				switch (opType) { 
 				case OpTypes.VALUE : 
 				return valueData; 
 				} 
 				public Object getValue(Session session) { 
 				switch (opType) { 
 				case OpTypes.VALUE : 
 				return valueData; 
 				case OpTypes.SIMPLE_COLUMN : { 
 				Object value = 
 				session.sessionContext.rangeIterators[rangePosition] 
 				.getCurrent(columnIndex); 
 				return value; 
 				
 
 LINES: 		| ExpressionArrayAggregate.java: 260 - 270 || FunctionSQLInvoked.java: 279 - 289 |
 CLONE CLASS: 	return super.equals(other); 
 				} 
 				return false; 
 				} 
 				public Object updateAggregatingValue(Session session, Object currValue) { 
 				if (!condition.testCondition(session)) { 
 				return currValue; 
 				} 
 				
 
 LINES: 		| BaseHashMap.java: 388 - 395 || BaseHashMap.java: 709 - 716 |
 CLONE CLASS: 	} 
 				return returnValue; 
 				} 
 				if (isObjectValue) { 
 				returnValue              = objectValueTable[lookup]; 
 				objectValueTable[lookup] = objectValue; 
 				
 
 LINES: 		| FunctionSQL.java: 1950 - 1956 || FunctionSQL.java: 1996 - 2002 |
 CLONE CLASS: 	sb.append(' ').append(Tokens.T_USING).append( 
 				' ').append(Tokens.T_OCTETS); 
 				} 
 				} 
 				sb.append(')'); 
 				break; 
 				
 
 LINES: 		| DatabaseInformationFull.java: 1790 - 1797 || DatabaseInformationFull.java: 3058 - 3065 || DatabaseInformationFull.java: 3920 - 3927 || DatabaseInformationFull.java: 5336 - 5343 || DatabaseInformationFull.java: 5437 - 5444 || DatabaseInformationFull.java: 5544 - 5551 || DatabaseInformationFull.java: 6908 - 6915 || DatabaseInformationFull.java: 7017 - 7024 || DatabaseInformationFull.java: 7127 - 7134 || DatabaseInformationFull.java: 8184 - 8191 || DatabaseInformationFull.java: 8302 - 8309 |
 CLONE CLASS: 	SchemaObject.INDEX); 
 				t.createPrimaryKeyConstraint(name, new int[] { 
 				0, 1, 2, 3, 4, 5 
 				}, false); 
 				return t; 
 				} 
 				
 
 LINES: 		| LongKeyLongValueHashMap.java: 164 - 173 || LongKeyLongValueHashMap.java: 199 - 208 |
 CLONE CLASS: 	} 
 				public boolean isEmpty() { 
 				return size() == 0; 
 				} 
 				public void clear() { 
 				LongKeyLongValueHashMap.this.clear(); 
 				} 
 				} 
 				
 
 LINES: 		| Result.java: 460 - 466 || Result.java: 1169 - 1175 |
 CLONE CLASS: 	default : 
 				throw Error.runtimeError(ErrorCode.U_S0500, "Result"); 
 				} 
 				break; 
 				} 
 				case ResultConstants.PREPARE_ACK : 
 				
 
 LINES: 		| DatabaseInformationFull.java: 6953 - 6961 || DatabaseInformationFull.java: 8235 - 8243 |
 CLONE CLASS: 	row[specific_catalog] = database.getCatalogName().name; 
 				row[specific_schema]  = refName.schema.name; 
 				row[specific_name]    = refName.name; 
 				try { 
 				t.insertSys(session, store, row); 
 				} catch (HsqlException e) {} 
 				} 
 				} 
 				
 
 LINES: 		| ClientConnection.java: 565 - 582 || Session.java: 2068 - 2085 |
 CLONE CLASS: 	} 
 				return calendar; 
 				} 
 				public Calendar getCalendarGMT() { 
 				if (calendarGMT == null) { 
 				calendarGMT = new GregorianCalendar(TimeZone.getTimeZone("GMT")); 
 				} 
 				return calendarGMT; 
 				} 
 				public SimpleDateFormat getSimpleDateFormatGMT() { 
 				if (simpleDateFormatGMT == null) { 
 				simpleDateFormatGMT = new SimpleDateFormat("MMMM", Locale.ENGLISH); 
 				
 
 LINES: 		| DatabaseInformationFull.java: 2350 - 2370 || DatabaseInformationFull.java: 2468 - 2488 |
 CLONE CLASS: 	int      columnCount; 
 				Iterator tables; 
 				Table    table; 
 				Object[] row; 
 				Type     type; 
 				HsqlName tableName; 
 				tables = allTables(); 
 				Grantee grantee = session.getGrantee(); 
 				while (tables.hasNext()) { 
 				table       = (Table) tables.next(); 
 				columnCount = table.getColumnCount(); 
 				tableName   = table.getName(); 
 				for (int i = 0; i < columnCount; i++) { 
 				ColumnSchema column = table.getColumn(i); 
 				type = column.getDataType(); 
 				
 
 LINES: 		| CharacterType.java: 424 - 436 || CharacterType.java: 668 - 680 |
 CLONE CLASS: 	} 
 				char[] b = new char[(int) precision]; 
 				((String) a).getChars(0, slen, b, 0); 
 				for (int i = slen; i < precision; i++) { 
 				b[i] = ' '; 
 				} 
 				return new String(b); 
 				} 
 				case Types.SQL_VARCHAR : { 
 				
 
 LINES: 		| DatabaseManagerSwing.java: 1366 - 1374 || DatabaseManager.java: 781 - 789 |
 CLONE CLASS: 	txtCommand.requestFocus(); 
 				txtCommand.setCaretPosition(help[0].length()); 
 				} 
 				public void windowActivated(WindowEvent e) {} 
 				public void windowDeactivated(WindowEvent e) {} 
 				public void windowClosed(WindowEvent e) {} 
 				
 
 LINES: 		| SchemaManager.java: 1211 - 1217 || SchemaManager.java: 1236 - 1242 || SchemaManager.java: 1261 - 1267 || SchemaManager.java: 1287 - 1293 |
 CLONE CLASS: 	return (Type) object; 
 				} 
 				} 
 				if (raise) { 
 				throw Error.error(ErrorCode.X_42501, name); 
 				} 
 				
 
 LINES: 		| TransactionManagerMVCC.java: 77 - 87 || TransactionManagerMV2PL.java: 64 - 74 |
 CLONE CLASS: 	} 
 				public long getGlobalChangeTimestamp() { 
 				return globalChangeTimestamp.get(); 
 				} 
 				public boolean isMVRows() { 
 				return true; 
 				} 
 				public boolean isMVCC() { 
 				
 
 LINES: 		| DateTimeType.java: 751 - 757 || DateTimeType.java: 800 - 806 |
 CLONE CLASS: 	break; 
 				} 
 				if (a instanceof java.util.Date) { 
 				long millis; 
 				int  nanos       = 0; 
 				int  zoneSeconds = 0; 
 				
 
 LINES: 		| DoubleIntIndex.java: 184 - 190 || DoubleIntIndex.java: 224 - 230 || DoubleIntIndex.java: 262 - 268 |
 CLONE CLASS: 	if (count == capacity) { 
 				if (fixedSize) { 
 				return false; 
 				} else { 
 				doubleCapacity(); 
 				} 
 				} 
 				
 
 LINES: 		| JDBCConnection.java: 1668 - 1730 || JDBCConnection.java: 2408 - 2477 |
 CLONE CLASS: 	ResultConstants.RETURN_NO_GENERATED_KEYS, null, null); 
 				} catch (HsqlException e) { 
 				throw JDBCUtil.sqlException(e); 
 				} 
 				} 
 				public synchronized CallableStatement prepareCall(String sql, 
 				
 
 LINES: 		| ExpressionOp.java: 361 - 371 || ExpressionArithmetic.java: 243 - 253 |
 CLONE CLASS: 	} 
 				unresolvedSet = nodes[i].resolveColumnReferences(session, 
 				rangeGroup, rangeCount, rangeGroups, unresolvedSet, 
 				acceptsSequences); 
 				} 
 				return unresolvedSet; 
 				} 
 				public void resolveTypes(Session session, Expression parent) { 
 				
 
 LINES: 		| ClientConnection.java: 406 - 413 || ClientConnection.java: 429 - 436 |
 CLONE CLASS: 	null); 
 				Result in = execute(resultOut); 
 				if (in.isError()) { 
 				throw Error.error(in); 
 				} 
 				} 
 				
 
 LINES: 		| IndexAVLMemory.java: 137 - 151 || IndexAVL.java: 651 - 665 |
 CLONE CLASS: 	} 
 				p = f; 
 				while (f != null) { 
 				checkNodes(store, f); 
 				f = next(store, f); 
 				} 
 				} finally { 
 				readLock.unlock(); 
 				} 
 				} 
 				void checkNodes(PersistentStore store, NodeAVL p) { 
 				
 
 LINES: 		| BitType.java: 74 - 82 || BinaryType.java: 98 - 106 |
 CLONE CLASS: 	} 
 				public Class getJDBCClass() { 
 				return byte[].class; 
 				} 
 				public String getJDBCClassName() { 
 				return "[B"; 
 				} 
 				
 
 LINES: 		| TestJDBCSavepoints.java: 169 - 183 || TestJDBCSavepoints.java: 505 - 519 |
 CLONE CLASS: 	conn1.setAutoCommit(false); 
 				sql = "insert into t values(?,?,?,?)"; 
 				ps  = conn1.prepareStatement(sql); 
 				ps.setString(2, "Mary"); 
 				ps.setString(3, "Peterson-Clancy"); 
 				i = 0; 
 				for (; i < 10; i++) { 
 				ps.setInt(1, i); 
 				ps.setInt(4, i); 
 				ps.executeUpdate(); 
 				} 
 				
 
 LINES: 		| StatementExpression.java: 189 - 196 || StatementSet.java: 348 - 355 |
 CLONE CLASS: 	} 
 				for (int i = 0; i < routines.length; i++) { 
 				set.addAll(routines[i].getTableNamesForRead()); 
 				} 
 				} 
 				void collectTableNamesForWrite(OrderedHashSet set) {} 
 				
 
 LINES: 		| RefCapablePropertyResourceBundle.java: 223 - 238 || RefCapablePropertyResourceBundle.java: 271 - 286 |
 CLONE CLASS: 	case EMPTYSTRING_BEHAVIOR: 
 				varValue = ""; 
 				break; 
 				case NOOP_BEHAVIOR: 
 				break; 
 				default: 
 				throw new RuntimeException( 
 				"Undefined value for behavior: " + behavior); 
 				} 
 				sb.append(s.substring(previousEnd, matcher.start()) 
 				+ ((varValue == null) ? matcher.group() : varValue)); 
 				previousEnd = matcher.end(); 
 				} 
 				return (previousEnd < 1) ? s 
 				: (sb.toString() + s.substring(previousEnd)); 
 				} 
 				
 
 LINES: 		| JDBCParameterMetaData.java: 356 - 371 || JDBCResultSetMetaData.java: 943 - 958 |
 CLONE CLASS: 	} 
 				} 
 				private Type translateType(Type type) { 
 				if (this.translateTTIType) { 
 				if (type.isIntervalType()) { 
 				type = ((IntervalType) type).getCharacterType(); 
 				} else if (type.isDateTimeTypeWithZone()) { 
 				type = ((DateTimeType) type).getDateTimeTypeWithoutZone(); 
 				} 
 				
 
 LINES: 		| TestBench.java: 199 - 224 || JDBCBench.java: 183 - 208 |
 CLONE CLASS: 	Vector      vClient  = new Vector(); 
 				Thread      Client   = null; 
 				Enumeration e        = null; 
 				Connection  guardian = null; 
 				try { 
 				java.util.Date start = new java.util.Date(); 
 				if (init) { 
 				System.out.println("Start: " + start.toString()); 
 				System.out.print("Initializing dataset..."); 
 				createDatabase(url, user, password); 
 				double seconds = (System.currentTimeMillis() - start.getTime()) 
 				/ 1000D; 
 				System.out.println("done. in " + seconds + " seconds\n"); 
 				System.out.println("Complete: " 
 				+ (new java.util.Date()).toString()); 
 				} 
 				System.out.println("* Starting Benchmark Run *"); 
 				MemoryWatcher = new MemoryWatcherThread(); 
 				MemoryWatcher.start(); 
 				
 
 LINES: 		| ValuePoolHashMap.java: 232 - 239 || ValuePoolHashMap.java: 277 - 284 |
 CLONE CLASS: 	lookup                 = hashIndex.linkNode(index, lastLookup); 
 				objectKeyTable[lookup] = testValue; 
 				if (accessCount > ACCESS_MAX) { 
 				resetAccessCount(); 
 				} 
 				accessTable[lookup] = accessCount++; 
 				
 
 LINES: 		| TransactionManager2PL.java: 112 - 122 || TransactionManagerMV2PL.java: 162 - 172 |
 CLONE CLASS: 	endTransactionTPL(session); 
 				} finally { 
 				writeLock.unlock(); 
 				} 
 				session.tempSet.clear(); 
 				return true; 
 				} 
 				public void rollback(Session session) { 
 				
 
 LINES: 		| CharacterType.java: 349 - 358 || BooleanType.java: 121 - 130 || NumberType.java: 672 - 681 || IntervalType.java: 443 - 452 || BinaryType.java: 299 - 308 || StringComparator.java: 46 - 55 || BlobType.java: 136 - 145 || ClobType.java: 128 - 137 || RowType.java: 119 - 128 || RowType.java: 362 - 372 || ArrayType.java: 145 - 154 || DateTimeType.java: 401 - 410 |
 CLONE CLASS: 	if (a == b) { 
 				return 0; 
 				} 
 				if (a == null) { 
 				return -1; 
 				} 
 				if (b == null) { 
 				return 1; 
 				
 
 LINES: 		| LongKeyLongValueHashMap.java: 183 - 191 || IntKeyIntValueHashMap.java: 176 - 184 || OrderedLongKeyHashMap.java: 218 - 226 || OrderedIntKeyHashMap.java: 175 - 183 || MultiValueHashMap.java: 178 - 186 || IntKeyHashMapConcurrent.java: 214 - 222 || LongKeyHashMap.java: 248 - 256 || LongKeyIntValueHashMap.java: 187 - 195 || HashMap.java: 197 - 205 || IntValueHashMap.java: 232 - 240 || IntKeyHashMap.java: 160 - 168 |
 CLONE CLASS: 	} 
 				public boolean contains(Object o) { 
 				throw new RuntimeException(); 
 				} 
 				public boolean add(Object value) { 
 				throw new RuntimeException(); 
 				} 
 				
 
 LINES: 		| KMPSearchAlgorithm.java: 469 - 486 || KMPSearchAlgorithm.java: 505 - 521 || KMPSearchAlgorithm.java: 543 - 559 |
 CLONE CLASS: 	table[i] = j + 1; 
 				j++; 
 				i++; 
 				} else if (j > 0) { 
 				j = table[j]; 
 				} else { 
 				table[i] = 0; 
 				i++; 
 				j = 0; 
 				} 
 				} 
 				return table; 
 				} 
 				
 
 LINES: 		| TransactionManagerMVCC.java: 246 - 268 || TransactionManager2PL.java: 134 - 157 || TransactionManagerMV2PL.java: 184 - 207 |
 CLONE CLASS: 	} finally { 
 				writeLock.unlock(); 
 				} 
 				} 
 				public void rollbackSavepoint(Session session, int index) { 
 				long timestamp = session.sessionContext.savepointTimestamps.get(index); 
 				Integer oi = (Integer) session.sessionContext.savepoints.get(index); 
 				int     start  = oi.intValue(); 
 				while (session.sessionContext.savepoints.size() > index + 1) { 
 				session.sessionContext.savepoints.remove( 
 				session.sessionContext.savepoints.size() - 1); 
 				session.sessionContext.savepointTimestamps.removeLast(); 
 				} 
 				rollbackPartial(session, start, timestamp); 
 				} 
 				public void rollbackAction(Session session) { 
 				rollbackPartial(session, session.actionIndex, 
 				session.actionStartTimestamp); 
 				
 
 LINES: 		| SchemaManager.java: 2478 - 2496 || SchemaManager.java: 2512 - 2530 |
 CLONE CLASS: 	} 
 				while (true) { 
 				Iterator it = unresolved.iterator(); 
 				if (!it.hasNext()) { 
 				break; 
 				} 
 				OrderedHashSet newResolved = new OrderedHashSet(); 
 				SchemaObjectSet.addAllSQL(resolved, unresolved, list, it, 
 				newResolved); 
 				unresolved.removeAll(newResolved); 
 				if (newResolved.size() == 0) { 
 				break; 
 				} 
 				} 
 				
 
 LINES: 		| TransferTable.java: 286 - 291 || TransferTable.java: 441 - 446 |
 CLONE CLASS: 	lastsemicolon).indexOf(';'); 
 				} 
 				} 
 				} catch (Exception e) { 
 				try { 
 				if (!destDb.getAutoCommit()) { 
 				
 
 LINES: 		| TransactionManagerCommon.java: 738 - 746 || TransactionManagerCommon.java: 764 - 772 |
 CLONE CLASS: 	if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) { 
 				continue; 
 				} 
 				Session holder = (Session) tableWriteLocks.get(name); 
 				if (holder != null && holder != session) { 
 				return false; 
 				} 
 				
 
 LINES: 		| TestBench.java: 843 - 863 || JDBCBench.java: 919 - 939 |
 CLONE CLASS: 	try { 
 				if (pstmt1 != null) { 
 				pstmt1.close(); 
 				} 
 				if (pstmt2 != null) { 
 				pstmt2.close(); 
 				} 
 				if (pstmt3 != null) { 
 				pstmt3.close(); 
 				} 
 				if (pstmt4 != null) { 
 				pstmt4.close(); 
 				} 
 				if (pstmt5 != null) { 
 				pstmt5.close(); 
 				} 
 				} catch (Exception E) { 
 				
 
 LINES: 		| KMPSearchAlgorithm.java: 131 - 142 || KMPSearchAlgorithm.java: 200 - 211 |
 CLONE CLASS: 	return streamIndex; 
 				} 
 				} 
 				return -1; 
 				} 
 				int patternIndex = 0; 
 				if (table == null) { 
 				table = computeTable(pattern); 
 				} 
 				
 
 LINES: 		| ExpressionOp.java: 655 - 662 || ExpressionOp.java: 674 - 681 || ExpressionOp.java: 733 - 740 || ExpressionOp.java: 752 - 759 |
 CLONE CLASS: 	if (wasEscape) { 
 				escapeCount++; 
 				newArray[j++] = array[i]; 
 				wasEscape     = false; 
 				continue; 
 				} 
 				
 
 LINES: 		| DataFileCache.java: 945 - 951 || TextCache.java: 324 - 331 |
 CLONE CLASS: 	} finally { 
 				writeLock.unlock(); 
 				} 
 				} 
 				public CachedObject get(CachedObject object, PersistentStore store, 
 				boolean keep) { 
 				
 
 LINES: 		| IntervalType.java: 652 - 659 || IntervalType.java: 825 - 832 || IntervalType.java: 864 - 871 |
 CLONE CLASS: 	return null; 
 				} 
 				switch (typeCode) { 
 				case Types.SQL_INTERVAL_YEAR : 
 				case Types.SQL_INTERVAL_YEAR_TO_MONTH : 
 				case Types.SQL_INTERVAL_MONTH : 
 				
 
 LINES: 		| Grantee.java: 588 - 602 || Grantee.java: 607 - 621 |
 CLONE CLASS: 	Table table = (Table) object; 
 				if (isFullyAccessibleByRole(table.getName())) { 
 				return; 
 				} 
 				Right right = (Right) fullRightsMap.get(table.getName()); 
 				if (right != null && right.canReference(table, checkList)) { 
 				return; 
 				} 
 				} 
 				throw Error.error(ErrorCode.X_42501, object.getName().name); 
 				} 
 				
 
 LINES: 		| ParserBase.java: 781 - 787 || ParserBase.java: 808 - 814 || ParserBase.java: 826 - 832 |
 CLONE CLASS: 	} else if (token.namePrePrefix != null) { 
 				tokenS = token.namePrePrefix; 
 				} else if (token.namePrefix != null) { 
 				tokenS = token.namePrefix; 
 				} else { 
 				tokenS = token.tokenString; 
 				} 
 				
 
 LINES: 		| OrderedIntKeyHashMap.java: 107 - 114 || MultiValueHashMap.java: 105 - 112 || IntKeyHashMapConcurrent.java: 146 - 153 || HashMap.java: 117 - 124 || IntKeyHashMap.java: 92 - 99 |
 CLONE CLASS: 	} 
 				} 
 				public Set keySet() { 
 				if (keySet == null) { 
 				keySet = new KeySet(); 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 4986 - 4993 || DatabaseInformationFull.java: 7700 - 7707 |
 CLONE CLASS: 	SchemaObject.INDEX); 
 				t.createPrimaryKeyConstraint(name, new int[] { 
 				0, 1, 2, 3, 4, 5, 6, 7 
 				}, false); 
 				return t; 
 				} 
 				
 
 LINES: 		| NodeAVLDiskLarge.java: 216 - 223 || NodeAVLDiskLarge.java: 263 - 270 |
 CLONE CLASS: 	RowAVLDisk  row  = this.row; 
 				if (!row.isInMemory()) { 
 				row  = (RowAVLDisk) store.get(this.row, false); 
 				node = (NodeAVLDiskLarge) row.getNode(iId); 
 				} 
 				if (node.iParent == NO_POS) { 
 				
 
 LINES: 		| DataFileCache.java: 1404 - 1410 || DataFileCache.java: 1419 - 1425 |
 CLONE CLASS: 	deleteFile(database, backupFileName); 
 				if (fa.isStreamElement(backupFileName)) { 
 				throw Error.error(ErrorCode.DATA_FILE_ERROR, 
 				"cannot delete old backup file"); 
 				} 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 3474 - 3481 || DatabaseInformationFull.java: 3816 - 3823 || DatabaseInformationFull.java: 7964 - 7971 |
 CLONE CLASS: 	row[datetime_precision] = ValuePool.getLong(type.scale); 
 				} else if (type.isIntervalType()) { 
 				row[data_type] = "INTERVAL"; 
 				row[interval_type] = 
 				((IntervalType) type).getQualifier(type.typeCode); 
 				row[interval_precision] = ValuePool.getLong(type.precision); 
 				row[datetime_precision] = ValuePool.getLong(type.scale); 
 				} else if (type.isBinaryType()) { 
 				
 
 LINES: 		| ExpressionLogical.java: 136 - 141 || ExpressionLogical.java: 665 - 670 |
 CLONE CLASS: 	case OpTypes.EQUAL : 
 				case OpTypes.GREATER_EQUAL : 
 				case OpTypes.GREATER_EQUAL_PRE : 
 				case OpTypes.GREATER : 
 				case OpTypes.SMALLER : 
 				case OpTypes.SMALLER_EQUAL : 
 				
 
 LINES: 		| DatabaseInformationMain.java: 1302 - 1310 || DatabaseInformationMain.java: 2938 - 2946 || DatabaseInformationMain.java: 3365 - 3373 |
 CLONE CLASS: 	}, false); 
 				return t; 
 				} 
 				String  tableCatalog; 
 				String  tableSchema; 
 				String  tableName; 
 				
 
 LINES: 		| TestDbBackup.java: 457 - 463 || TestDbBackup.java: 470 - 476 |
 CLONE CLASS: 	+ "to file '/x/bad.tar'"); 
 				} 
 				caught = false; 
 				try { 
 				conn.createStatement().executeUpdate("BACKUP DATABASE TO '" 
 				+ baseDir.getAbsolutePath() 
 				
 
 LINES: 		| ParserDDL.java: 3086 - 3092 || ParserDDL.java: 3120 - 3126 || ParserDDL.java: 3160 - 3166 |
 CLONE CLASS: 	if (constName == null) { 
 				constName = database.nameManager.newAutoName("CT", 
 				table.getSchemaName(), table.getName(), 
 				SchemaObject.CONSTRAINT); 
 				} 
 				Constraint c = 
 				
 
 LINES: 		| FunctionCustom.java: 2056 - 2069 || FunctionCustom.java: 2086 - 2099 |
 CLONE CLASS: 	if (data[0] == null || data[1] == null) { 
 				return null; 
 				} 
 				Object st = Type.SQL_VARCHAR.trim(session, data[1], ' ', true, 
 				true); 
 				st = Type.SQL_VARCHAR.upper(session, st); 
 				st = Type.SQL_VARCHAR.convertToDefaultType(session, st); 
 				int token    = Tokens.get((String) st); 
 				int typeCode = IntervalType.getFieldNameTypeForToken(token); 
 				switch (typeCode) { 
 				
 
 LINES: 		| SchemaManager.java: 2004 - 2012 || SchemaManager.java: 2050 - 2058 |
 CLONE CLASS: 	break; 
 				} 
 				refName = null; 
 				} 
 				if (refName == null) { 
 				return; 
 				} 
 				
 
 LINES: 		| StatementCommand.java: 610 - 616 || StatementCommand.java: 1017 - 1023 || StatementCommand.java: 1155 - 1162 |
 CLONE CLASS: 	session.database.schemaManager.setSchemaChangeTimestamp(); 
 				return Result.updateZeroResult; 
 				} catch (HsqlException e) { 
 				return Result.newErrorResult(e, sql); 
 				} 
 				} 
 				
 
 LINES: 		| Expression.java: 909 - 920 || ExpressionColumn.java: 947 - 958 |
 CLONE CLASS: 	} 
 				OrderedHashSet collectRangeVariables(OrderedHashSet set) { 
 				for (int i = 0; i < nodes.length; i++) { 
 				if (nodes[i] != null) { 
 				set = nodes[i].collectRangeVariables(set); 
 				} 
 				} 
 				
 
 LINES: 		| AuthBeanMultiplexer.java: 112 - 120 || AuthUtils.java: 89 - 97 |
 CLONE CLASS: 	} finally { 
 				if (rs != null) try { 
 				rs.close(); 
 				} catch (SQLException se) { 
 				logger.error( 
 				"Failed to close ResultSet for retrieving db name"); 
 				} 
 				rs = null; 
 				} 
 				
 
 LINES: 		| NumberType.java: 1533 - 1545 || NumberType.java: 1590 - 1602 |
 CLONE CLASS: 	} 
 				case Types.SQL_NUMERIC : 
 				case Types.SQL_DECIMAL : { 
 				if (!(a instanceof BigDecimal)) { 
 				a = convertToDefaultType(null, a); 
 				} 
 				if (!(b instanceof BigDecimal)) { 
 				b = convertToDefaultType(null, b); 
 				} 
 				BigDecimal abd = (BigDecimal) a; 
 				BigDecimal bbd = (BigDecimal) b; 
 				
 
 LINES: 		| RowSetNavigatorData.java: 560 - 572 || RowSetNavigatorDataTable.java: 560 - 572 |
 CLONE CLASS: 	return; 
 				} 
 				reset(); 
 				for (int i = 0; i < limitcount; i++) { 
 				next(); 
 				} 
 				while (hasNext()) { 
 				next(); 
 				removeCurrent(); 
 				} 
 				
 
 LINES: 		| NodeAVL.java: 273 - 280 || NodeAVLDisk.java: 552 - 559 |
 CLONE CLASS: 	} 
 				public boolean hasChanged() { 
 				return false; 
 				} 
 				public boolean isKeepInMemory() { 
 				return false; 
 				
 
 LINES: 		| JDBCClob.java: 613 - 624 || JDBCClob.java: 713 - 724 |
 CLONE CLASS: 	final long pos) throws SQLException { 
 				if (!m_createdByConnection) { 
 				throw JDBCUtil.notSupported(); 
 				} 
 				checkClosed(); 
 				if (pos < MIN_POS || pos > MAX_POS) { 
 				throw JDBCUtil.outOfRangeArgument("pos: " + pos); 
 				} 
 				
 
 LINES: 		| ScriptWriterEncode.java: 64 - 72 || ScriptWriterEncode.java: 81 - 89 |
 CLONE CLASS: 	try { 
 				cryptOut = crypto.getOutputStream(fileStreamOut); 
 				fileStreamOut = new GZIPOutputStream(cryptOut); 
 				isCrypt       = true; 
 				} catch (IOException e) { 
 				throw Error.error(e, ErrorCode.FILE_IO_ERROR, 
 				ErrorCode.M_Message_Pair, new Object[] { 
 				e.toString(), outFile 
 				}); 
 				
 
 LINES: 		| QuerySpecification.java: 2585 - 2591 || Type.java: 1225 - 1231 || SchemaObjectSet.java: 553 - 559 || ResultMetaData.java: 523 - 529 |
 CLONE CLASS: 	return false; 
 				} 
 				} 
 				return true; 
 				} 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 2724 - 2729 || DatabaseInformationFull.java: 6004 - 6009 |
 CLONE CLASS: 	row[datetime_precision] = ValuePool.getLong(type.scale); 
 				} else if (type.isIntervalType()) { 
 				row[data_type] = "INTERVAL"; 
 				row[interval_type] = 
 				((IntervalType) type).getQualifier(type.typeCode); 
 				row[interval_precision] = 
 				
 
 LINES: 		| Crypto.java: 149 - 159 || Crypto.java: 172 - 182 |
 CLONE CLASS: 	destOffset); 
 				} catch (java.security.InvalidKeyException e) { 
 				throw Error.error(ErrorCode.X_S0531, e); 
 				} catch (BadPaddingException e) { 
 				throw Error.error(ErrorCode.X_S0531, e); 
 				} catch (IllegalBlockSizeException e) { 
 				throw Error.error(ErrorCode.X_S0531, e); 
 				} catch (ShortBufferException e) { 
 				throw Error.error(ErrorCode.X_S0531, e); 
 				} 
 				} 
 				
 
 LINES: 		| TestTextTable.java: 219 - 225 || TestViewAsterisks.java: 99 - 105 |
 CLONE CLASS: 	setupDatabase(); 
 				} 
 				protected void tearDown() { 
 				executeStatement("SHUTDOWN"); 
 				super.tearDown(); 
 				} 
 				
 
 LINES: 		| HsqldbTransferHelper.java: 78 - 85 || PostgresTransferHelper.java: 111 - 118 |
 CLONE CLASS: 	} 
 				return (columnType); 
 				} 
 				String fixupColumnDefWrite(TransferTable t, ResultSetMetaData meta, 
 				String columnType, ResultSet columnDesc, 
 				int columnIndex) throws SQLException { 
 				
 
 LINES: 		| RowSetNavigatorDataTable.java: 395 - 425 || RowSetNavigatorDataTable.java: 454 - 484 |
 CLONE CLASS: 	Object[]    compareData = null; 
 				RowIterator it; 
 				Row         otherRow  = null; 
 				Object[]    otherData = null; 
 				sortFull(session); 
 				other.sortFull(session); 
 				it = fullIndex.emptyIterator(); 
 				while (hasNext()) { 
 				Object[] currentData = getNext(); 
 				boolean newGroup = 
 				compareData == null 
 				|| fullIndex.compareRowNonUnique( 
 				session, currentData, compareData, 
 				fullIndex.getColumnCount()) != 0; 
 				if (newGroup) { 
 				compareData = currentData; 
 				it          = other.findFirstRow(currentData); 
 				} 
 				otherRow  = it.getNextRow(); 
 				otherData = otherRow == null ? null 
 				: otherRow.getData(); 
 				if (otherData != null 
 				&& fullIndex.compareRowNonUnique( 
 				session, currentData, otherData, 
 				fullIndex.getColumnCount()) == 0) { 
 				
 
 LINES: 		| NodeAVLDiskLarge.java: 529 - 537 || NodeAVLDisk.java: 540 - 548 |
 CLONE CLASS: 	} 
 				public void setStorageSize(int size) {} 
 				public int getStorageSize() { 
 				return 0; 
 				} 
 				public void setPos(long pos) {} 
 				
 
 LINES: 		| IntKeyHashMapConcurrent.java: 91 - 97 || LongKeyHashMap.java: 91 - 97 |
 CLONE CLASS: 	return super.addOrRemove(key, 0, null, value, false); 
 				} finally { 
 				writeLock.unlock(); 
 				} 
 				} 
 				public boolean containsValue(Object value) { 
 				
 
 LINES: 		| JDBCPreparedStatement.java: 4348 - 4357 || JDBCPreparedStatement.java: 4418 - 4429 |
 CLONE CLASS: 	if (is.session.getDatabaseUniqueName().equals( 
 				session.getDatabaseUniqueName())) { 
 				throw JDBCUtil.sqlException(ErrorCode.JDBC_INVALID_ARGUMENT, 
 				"invalid Reader"); 
 				} 
 				parameterValues[i - 1] = o; 
 				streamLengths[i - 1]   = streamLength; 
 				parameterSet[i - 1]    = Boolean.FALSE; 
 				return; 
 				
 
 LINES: 		| RowAction.java: 818 - 827 || RowAction.java: 850 - 859 |
 CLONE CLASS: 	if (mode == TransactionManager.ACTION_READ) { 
 				actionType = action.ACTION_DELETE; 
 				} else if (mode == TransactionManager.ACTION_DUP) { 
 				actionType = ACTION_INSERT; 
 				session.tempSet.clear(); 
 				session.tempSet.add(action); 
 				} else if (mode == TransactionManager.ACTION_REF) { 
 				actionType = ACTION_DELETE; 
 				} 
 				
 
 LINES: 		| TestAllTypes.java: 109 - 121 || TestCacheSize.java: 190 - 202 |
 CLONE CLASS: 	} 
 				} catch (Exception e) { 
 				e.printStackTrace(); 
 				System.out.println("TestSql.setUp() error: " + e.getMessage()); 
 				} 
 				} 
 				public void testFillUp() { 
 				
 
 LINES: 		| Collation.java: 496 - 505 || Schema.java: 113 - 312 || Constraint.java: 303 - 245 || TriggerDef.java: 229 - 181 || NumberSequence.java: 172 - 199 || Grantee.java: 159 - 168 || IndexAVL.java: 248 - 257 |
 CLONE CLASS: 	return new OrderedHashSet(); 
 				} 
 				public OrderedHashSet getComponents() { 
 				return null; 
 				} 
 				public void compile(Session session, SchemaObject parentObject) {} 
 				public String getSQL() { 
 				
 
 LINES: 		| ParserDQL.java: 2968 - 2979 || ParserDQL.java: 4908 - 4919 |
 CLONE CLASS: 	if (token.tokenType == Tokens.LEFTBRACKET) { 
 				read(); 
 				Expression e1 = XreadNumericValueExpression(); 
 				readThis(Tokens.RIGHTBRACKET); 
 				e = new ExpressionAccessor(e, e1); 
 				} 
 				return e; 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 2006 - 2019 || DatabaseInformationFull.java: 3306 - 3319 |
 CLONE CLASS: 	Iterator it = 
 				database.schemaManager.databaseObjectIterator(SchemaObject.DOMAIN); 
 				while (it.hasNext()) { 
 				Type domain = (Type) it.next(); 
 				if (!domain.isDomainType()) { 
 				continue; 
 				} 
 				if (!session.getGrantee().isFullyAccessibleByRole( 
 				domain.getName())) { 
 				continue; 
 				} 
 				
 
 LINES: 		| TransactionManagerMVCC.java: 130 - 137 || TransactionManagerMVCC.java: 177 - 184 |
 CLONE CLASS: 	} 
 				for (int i = 0; i < session.tempSet.size(); i++) { 
 				Session current = 
 				((RowActionBase) session.tempSet.get(i)).session; 
 				current.abortTransaction = true; 
 				} 
 				
 
 LINES: 		| IndexAVL.java: 705 - 713 || IndexAVL.java: 720 - 728 |
 CLONE CLASS: 	int i = colTypes[j].compare(session, a[colIndex[j]], 
 				b[rowColMap[j]]); 
 				if (i != 0) { 
 				return i; 
 				} 
 				} 
 				return 0; 
 				
 
 LINES: 		| ExpressionOp.java: 656 - 680 || ExpressionOp.java: 734 - 758 |
 CLONE CLASS: 	escapeCount++; 
 				newArray[j++] = array[i]; 
 				wasEscape     = false; 
 				continue; 
 				} 
 				wasEscape = true; 
 				if (i == array.length - 1) { 
 				throw Error.error(ErrorCode.X_22025); 
 				} 
 				continue; 
 				} 
 				if (array[i] == '_' || array[i] == '%') { 
 				if (wasEscape) { 
 				escapeCount++; 
 				newArray[j++] = array[i]; 
 				wasEscape     = false; 
 				continue; 
 				
 
 LINES: 		| RowInputText.java: 280 - 289 || RowInputText.java: 297 - 306 |
 CLONE CLASS: 	} 
 				s = s.trim(); 
 				if (s.length() == 0) { 
 				return null; 
 				} 
 				return ValuePool.getInt(Integer.parseInt(s)); 
 				} 
 				
 
 LINES: 		| WebServer.java: 143 - 189 || WebServer.java: 143 - 189 |
 CLONE CLASS: 	argProps = HsqlProperties.argArrayToProps(args, 
 				ServerProperties.sc_key_prefix); 
 				String[] errors = argProps.getErrorKeys(); 
 				if (errors.length != 0) { 
 				System.out.println("no value for argument:" + errors[0]); 
 				printHelp("webserver.help"); 
 				return; 
 				} 
 				String propsPath = argProps.getProperty(ServerProperties.sc_key_props); 
 				String propsExtension = ""; 
 				if (propsPath == null) { 
 				propsPath      = "webserver"; 
 				propsExtension = ".properties"; 
 				} 
 				propsPath = FileUtil.getFileUtil().canonicalOrAbsolutePath(propsPath); 
 				ServerProperties fileProps = ServerConfiguration.getPropertiesFromFile( 
 				ServerConstants.SC_PROTOCOL_HTTP, propsPath, propsExtension); 
 				ServerProperties props = 
 				fileProps == null 
 				? new ServerProperties(ServerConstants.SC_PROTOCOL_HTTP) 
 				: fileProps; 
 				props.addProperties(argProps); 
 				ServerConfiguration.translateDefaultDatabaseProperty(props); 
 				ServerConfiguration.translateDefaultNoSystemExitProperty(props); 
 				ServerConfiguration.translateAddressProperty(props); 
 				Server server = new WebServer(); 
 				try { 
 				server.setProperties(props); 
 				} catch (Exception e) { 
 				server.printError("Failed to set properties"); 
 				server.printStackTrace(e); 
 				
 
 LINES: 		| TransactionManager2PL.java: 270 - 286 || TransactionManagerMV2PL.java: 475 - 491 |
 CLONE CLASS: 	} 
 				} 
 				public void beginAction(Session session, Statement cs) { 
 				if (session.hasLocks(cs)) { 
 				return; 
 				} 
 				writeLock.lock(); 
 				try { 
 				if (cs.getCompileTimestamp() 
 				
 
 LINES: 		| TransferDb.java: 109 - 116 || TransferDb.java: 126 - 133 |
 CLONE CLASS: 	try { 
 				srcStatement.close(); 
 				} catch (SQLException e) {} 
 				srcStatement = null; 
 				} 
 				try { 
 				
 
 LINES: 		| TestAllTypes.java: 343 - 349 || TestCacheSize.java: 538 - 544 |
 CLONE CLASS: 	slow = true; 
 				} 
 				if (reportProgress && (i + 1) % 10000 == 0 
 				|| (slow && (i + 1) % 100 == 0)) { 
 				System.out.println("Select " + (i + 1) + " : " 
 				+ sw.elapsedTime() + " rps: " 
 				
 
 LINES: 		| ParserDQL.java: 5352 - 5359 || ParserDQL.java: 5461 - 5468 || ParserDQL.java: 5490 - 5497 |
 CLONE CLASS: 	break; 
 				} 
 				} while (true); 
 				readThis(Tokens.CLOSEBRACKET); 
 				return casewhen; 
 				} 
 				
 
 LINES: 		| JDBCPreparedStatement.java: 418 - 424 || JDBCPreparedStatement.java: 447 - 453 |
 CLONE CLASS: 	parameterValues[--parameterIndex] = Integer.valueOf(x); 
 				parameterSet[parameterIndex]      = Boolean.TRUE; 
 				return; 
 				} 
 				setIntParameter(parameterIndex, x); 
 				} 
 				
 
 LINES: 		| CharacterType.java: 521 - 528 || BinaryType.java: 452 - 459 |
 CLONE CLASS: 	if (!cast) { 
 				throw Error.error(ErrorCode.X_22001); 
 				} 
 				session.addWarning(Error.error(ErrorCode.W_01004)); 
 				} 
 				switch (typeCode) { 
 				
 
 LINES: 		| DatabaseInformationFull.java: 3286 - 3293 || DatabaseInformationFull.java: 6597 - 6604 || DatabaseInformationFull.java: 7867 - 7874 |
 CLONE CLASS: 	SchemaObject.INDEX); 
 				t.createPrimaryKeyConstraint(name, new int[] { 
 				0, 1, 2, 4, 5, 6 
 				}, false); 
 				return t; 
 				} 
 				
 
 LINES: 		| BooleanType.java: 89 - 97 || OtherType.java: 99 - 107 |
 CLONE CLASS: 	} 
 				if (other == SQL_ALL_TYPES) { 
 				return this; 
 				} 
 				if (typeCode == other.typeCode) { 
 				return this; 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 1341 - 1352 || DatabaseInformationMain.java: 3500 - 3511 |
 CLONE CLASS: 	tables = allTables(); 
 				while (tables.hasNext()) { 
 				table = (Table) tables.next(); 
 				if (!isAccessibleTable(session, table)) { 
 				continue; 
 				} 
 				row                = t.getEmptyRowData(); 
 				row[table_catalog] = database.getCatalogName().name; 
 				
 
 LINES: 		| NumberType.java: 1661 - 1668 || NumberType.java: 1889 - 1896 || NumberType.java: 1920 - 1927 |
 CLONE CLASS: 	if (a == null) { 
 				return null; 
 				} 
 				switch (typeCode) { 
 				case Types.SQL_REAL : 
 				case Types.SQL_FLOAT : 
 				
 
 LINES: 		| BitMap.java: 482 - 499 || BitMap.java: 557 - 574 |
 CLONE CLASS: 	int shift     = pos & 0x07; 
 				int mask      = (source & 0xff) >>> shift; 
 				int innermask = 0xff >> shift; 
 				int index     = pos / 8; 
 				if (count < 8) { 
 				innermask = innermask >>> (8 - count); 
 				innermask = innermask << (8 - count); 
 				} 
 				mask      &= innermask; 
 				innermask = ~innermask; 
 				if (index >= map.length) { 
 				return; 
 				} 
 				byte b = map[index]; 
 				
 
 LINES: 		| KMPSearchAlgorithm.java: 356 - 367 || KMPSearchAlgorithm.java: 420 - 431 |
 CLONE CLASS: 	patternIndex++; 
 				} else { 
 				final int tableValue = table[patternIndex]; 
 				matchStart += (patternIndex - tableValue); 
 				if (patternIndex > 0) { 
 				patternIndex = tableValue; 
 				} 
 				patternIndex++; 
 				} 
 				
 
 LINES: 		| SchemaObjectSet.java: 289 - 296 || SchemaObjectSet.java: 320 - 327 |
 CLONE CLASS: 	break; 
 				default : 
 				throw Error.runtimeError(ErrorCode.U_S0500, "SchemaObjectSet"); 
 				} 
 				return code; 
 				} 
 				
 
 LINES: 		| FunctionCustom.java: 3196 - 3202 || FunctionSQL.java: 1324 - 1330 || FunctionSQL.java: 1337 - 1343 || FunctionSQL.java: 1350 - 1356 |
 CLONE CLASS: 	if (nodes[0].dataType == null) { 
 				throw Error.error(ErrorCode.X_42567); 
 				} 
 				if (!nodes[0].dataType.isArrayType()) { 
 				throw Error.error(ErrorCode.X_42563); 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 6268 - 6276 || DatabaseInformationFull.java: 6307 - 6315 || DatabaseInformationFull.java: 6346 - 6354 || DatabaseInformationFull.java: 6384 - 6392 || DatabaseInformationFull.java: 6421 - 6429 |
 CLONE CLASS: 	Session sys = database.sessionManager.newSysSession( 
 				SqlInvariants.INFORMATION_SCHEMA_HSQLNAME, session.getUser()); 
 				String sql = (String) statementMap.get(""); 
 				Result rs  = sys.executeDirectStatement(sql); 
 				t.insertSys(session, store, rs); 
 				return t; 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 5073 - 5081 || DatabaseInformationFull.java: 5340 - 5348 || DatabaseInformationFull.java: 5441 - 5449 || DatabaseInformationFull.java: 5548 - 5556 || DatabaseInformationFull.java: 5661 - 5669 |
 CLONE CLASS: 	}, false); 
 				return t; 
 				} 
 				final int specific_catalog = 0; 
 				final int specific_schema  = 1; 
 				final int specific_name    = 2; 
 				
 
 LINES: 		| RowAction.java: 181 - 187 || RowAction.java: 243 - 249 |
 CLONE CLASS: 	|| ArrayUtil.haveCommonElement( 
 				colMap, action.changeColumnMap)) { 
 				if (!session.tempSet.isEmpty()) { 
 				session.tempSet.clear(); 
 				} 
 				session.tempSet.add(action); 
 				
 
 LINES: 		| TestUpdatableResultSets.java: 66 - 76 || TestUpdatableResultSets.java: 123 - 133 |
 CLONE CLASS: 	try { 
 				statement.execute("drop table t1 if exists"); 
 				statement.execute( 
 				"create table t1 (i int primary key, c varchar(10), t varbinary(3))"); 
 				String            insert = "insert into t1 values(?,?,?)"; 
 				String            select = "select i, c, t from t1"; 
 				PreparedStatement ps     = connection.prepareStatement(insert); 
 				for (int i = 0; i < 10; i++) { 
 				ps.setInt(1, i); 
 				
 
 LINES: 		| BooleanType.java: 139 - 146 || OtherType.java: 127 - 135 |
 CLONE CLASS: 	} 
 				public Object convertToTypeLimits(SessionInterface session, Object a) { 
 				return a; 
 				} 
 				public Object convertToType(SessionInterface session, Object a, 
 				Type otherType) { 
 				
 
 LINES: 		| DatabaseInformationFull.java: 610 - 618 || DatabaseInformationFull.java: 2672 - 2680 |
 CLONE CLASS: 	if (!columnList.contains(column.getName())) { 
 				continue; 
 				} 
 				row                   = t.getEmptyRowData(); 
 				row[table_cat]        = database.getCatalogName().name; 
 				row[table_schem]      = table.getSchemaName().name; 
 				row[table_name]       = table.getName().name; 
 				row[column_name]      = column.getName().name; 
 				
 
 LINES: 		| DatabaseInformationMain.java: 754 - 761 || DatabaseInformationMain.java: 949 - 956 || DatabaseInformationMain.java: 1708 - 1715 |
 CLONE CLASS: 	if (translateTTI) { 
 				if (type.isIntervalType()) { 
 				type = ((IntervalType) type).getCharacterType(); 
 				} else if (type.isDateTimeTypeWithZone()) { 
 				type = ((DateTimeType) type) 
 				.getDateTimeTypeWithoutZone(); 
 				} 
 				} 
 				
 
 LINES: 		| SchemaManager.java: 1202 - 1216 || SchemaManager.java: 1227 - 1241 |
 CLONE CLASS: 	readLock.lock(); 
 				try { 
 				Schema schema = (Schema) schemaMap.get(schemaName); 
 				if (schema != null) { 
 				SchemaObject object = schema.typeLookup.getObject(name); 
 				if (object != null) { 
 				return (Type) object; 
 				} 
 				} 
 				if (raise) { 
 				throw Error.error(ErrorCode.X_42501, name); 
 				
 
 LINES: 		| Expression.java: 1130 - 1136 || ExpressionColumn.java: 929 - 935 |
 CLONE CLASS: 	for (int i = 0; i < nodes.length; i++) { 
 				if (nodes[i] == null) { 
 				continue; 
 				} 
 				unresolvedSet = nodes[i].getUnkeyedColumns(unresolvedSet); 
 				} 
 				
 
 LINES: 		| TransactionManagerMVCC.java: 143 - 150 || TransactionManagerMV2PL.java: 108 - 115 |
 CLONE CLASS: 	} 
 				} 
 				public boolean commitTransaction(Session session) { 
 				if (session.abortTransaction) { 
 				return false; 
 				} 
 				
 
 LINES: 		| TestMerge.java: 307 - 317 || TestMerge.java: 332 - 342 |
 CLONE CLASS: 	"WHEN MATCHED THEN " + 
 				"UPDATE SET T.A = X.A, T.B = 'UPDATED' " + 
 				"WHEN NOT MATCHED THEN " + 
 				"INSERT VALUES (X.I, X.A, 'INSERTED');" 
 				); 
 				printTable("SA.T", "*", 4); 
 				} catch (SQLException e) { 
 				fail(e.getMessage()); 
 				} 
 				
 
 LINES: 		| NumberType.java: 1448 - 1453 || NumberType.java: 1496 - 1501 |
 CLONE CLASS: 	return convertToTypeLimits(null, abd); 
 				} 
 				case Types.TINYINT : 
 				case Types.SQL_SMALLINT : 
 				case Types.SQL_INTEGER : { 
 				int ai = ((Number) a).intValue(); 
 				
 
 LINES: 		| FunctionCustom.java: 2977 - 2988 || FunctionCustom.java: 3083 - 3094 |
 CLONE CLASS: 	for (int i = 0; i < nodes.length; i++) { 
 				if (nodes[i].dataType == null) { 
 				nodes[i].dataType = Type.SQL_VARCHAR; 
 				} else if (!nodes[i].dataType.isCharacterType()) { 
 				throw Error.error(ErrorCode.X_42561); 
 				} 
 				} 
 				dataType = Type.SQL_VARCHAR_DEFAULT; 
 				break; 
 				} 
 				
 
 LINES: 		| ExpressionLogical.java: 292 - 298 || ExpressionLogical.java: 314 - 320 |
 CLONE CLASS: 	if (e1 == null) { 
 				return e2; 
 				} 
 				if (e2 == null) { 
 				return e1; 
 				} 
 				
 
 LINES: 		| Table.java: 2201 - 2209 || Table.java: 2223 - 2231 || Table.java: 2249 - 2257 |
 CLONE CLASS: 	if (!database.isReferentialIntegrity()) { 
 				return; 
 				} 
 				TriggerDef[] trigVec = triggerLists[trigVecIndex]; 
 				for (int i = 0, size = trigVec.length; i < size; i++) { 
 				TriggerDef td         = trigVec[i]; 
 				boolean    sqlTrigger = td instanceof TriggerDefSQL; 
 				
 
 LINES: 		| IntKeyHashMap.java: 141 - 150 || IntKeyHashMap.java: 176 - 185 |
 CLONE CLASS: 	} 
 				public boolean isEmpty() { 
 				return size() == 0; 
 				} 
 				public void clear() { 
 				IntKeyHashMap.this.clear(); 
 				} 
 				} 
 				
 
 LINES: 		| ExpressionOp.java: 358 - 366 || Expression.java: 1061 - 1069 || ExpressionArithmetic.java: 240 - 248 |
 CLONE CLASS: 	for (int i = 0; i < nodes.length; i++) { 
 				if (nodes[i] == null) { 
 				continue; 
 				} 
 				unresolvedSet = nodes[i].resolveColumnReferences(session, 
 				rangeGroup, rangeCount, rangeGroups, unresolvedSet, 
 				acceptsSequences); 
 				} 
 				
 
 LINES: 		| Session.java: 1306 - 1314 || Session.java: 1332 - 1340 |
 CLONE CLASS: 	} 
 				if (abortTransaction) { 
 				rollback(false); 
 				sessionContext.currentStatement = null; 
 				return Result.newErrorResult(Error.error(ErrorCode.X_40001)); 
 				} 
 				
 
 LINES: 		| TestDateTime.java: 159 - 166 || TestDateTime.java: 250 - 257 |
 CLONE CLASS: 	final String INSERT_TIME = 
 				"insert into time_test(time_test) values (?)"; 
 				final String SELECT_TIME = 
 				"select time_test.* from time_test where time_test = ?"; 
 				final String DELETE_TIME = 
 				"delete from time_test where time_test = ?"; 
 				
 
 LINES: 		| RAShadowFile.java: 251 - 257 || RAShadowFile.java: 278 - 284 |
 CLONE CLASS: 	if (!initialised) { 
 				initialise(); 
 				} 
 				if (fetchedSize == limitSize) { 
 				return -1; 
 				} 
 				
 
 LINES: 		| Scanner.java: 1571 - 1584 || Scanner.java: 1619 - 1632 |
 CLONE CLASS: 	int pos = sqlString.indexOf('\r', currentPosition + 2); 
 				if (pos == -1) { 
 				pos = sqlString.indexOf('\n', currentPosition + 2); 
 				} 
 				if (pos == -1) { 
 				pos = limit; 
 				} 
 				token.tokenString = sqlString.substring(currentPosition 
 				+ 2, pos); 
 				token.tokenType   = Tokens.X_REMARK; 
 				token.isDelimiter = true; 
 				
 
 LINES: 		| TestHarness.java: 184 - 189 || TestHarness.java: 209 - 214 |
 CLONE CLASS: 	con.close(); 
 				} 
 				} catch (SQLException e) { 
 				e.printStackTrace(); 
 				} 
 				} 
 				
 
 LINES: 		| ParserDQL.java: 1847 - 1854 || ParserDQL.java: 1857 - 1864 |
 CLONE CLASS: 	break; 
 				} 
 				if (table.isUpdatable()) { 
 				break; 
 				} 
 				throw Error.error(ErrorCode.X_42545); 
 				
 
 LINES: 		| DatabaseInformationFull.java: 5746 - 5751 || DatabaseInformationFull.java: 7840 - 7845 |
 CLONE CLASS: 	addColumn(t, "DATA_TYPE", CHARACTER_DATA); 
 				addColumn(t, "CHARACTER_MAXIMUM_LENGTH", CARDINAL_NUMBER); 
 				addColumn(t, "CHARACTER_OCTET_LENGTH", CARDINAL_NUMBER); 
 				addColumn(t, "CHARACTER_SET_CATALOG", SQL_IDENTIFIER); 
 				addColumn(t, "CHARACTER_SET_SCHEMA", SQL_IDENTIFIER); 
 				addColumn(t, "CHARACTER_SET_NAME", SQL_IDENTIFIER); 
 				
 
 LINES: 		| DatabaseManager.java: 349 - 355 || DatabaseManager.java: 403 - 409 |
 CLONE CLASS: 	} else if (type == DatabaseURL.S_RES) { 
 				databaseMap = resDatabaseMap; 
 				} else if (type == DatabaseURL.S_MEM) { 
 				databaseMap = memDatabaseMap; 
 				} else { 
 				throw (Error.runtimeError(ErrorCode.U_S0500, "DatabaseManager")); 
 				} 
 				
 
 LINES: 		| RowStoreAVLDiskData.java: 67 - 73 || RowStoreAVLMemory.java: 61 - 67 |
 CLONE CLASS: 	this.manager      = manager; 
 				this.table        = table; 
 				this.indexList    = table.getIndexList(); 
 				this.accessorList = new CachedObject[indexList.length]; 
 				manager.setStore(table, this); 
 				} 
 				
 
 LINES: 		| JDBCArrayBasic.java: 418 - 490 || JDBCArray.java: 430 - 502 |
 CLONE CLASS: 	} 
 				public ResultSet getResultSet(long index, int count, 
 				java.util.Map<String, 
 				Class<?>> map) throws SQLException { 
 				return getResultSet(index, count); 
 				} 
 				public String toString() { 
 				if (arrayType == null) { 
 				arrayType = Type.getDefaultArrayType(elementType.typeCode); 
 				} 
 				return arrayType.convertToString(data); 
 				} 
 				public void free() throws SQLException { 
 				
 
 LINES: 		| TestBench.java: 866 - 886 || TestBench.java: 994 - 1014 || JDBCBench.java: 943 - 963 |
 CLONE CLASS: 	} 
 				connectClose(Conn); 
 				Conn = null; 
 				} 
 				int doOne(int bid, int tid, int aid, int delta) { 
 				int aBalance = 0; 
 				if (Conn == null) { 
 				incrementFailedTransactionCount(); 
 				return 0; 
 				} 
 				try { 
 				
 
 LINES: 		| TestOdbcTypes.java: 1352 - 1358 || TestOdbcTypes.java: 1394 - 1400 |
 CLONE CLASS: 	ps.setInt(1, 3); 
 				ps.setTimestamp(2, aTimestamp); 
 				assertEquals(1, ps.executeUpdate()); 
 				ps.setInt(1, 4); 
 				assertEquals(1, ps.executeUpdate()); 
 				ps.close(); 
 				netConn.commit(); 
 				
 
 LINES: 		| DatabaseInformationFull.java: 3133 - 3142 || DatabaseInformationFull.java: 6265 - 6273 || DatabaseInformationFull.java: 6304 - 6312 || DatabaseInformationFull.java: 6343 - 6351 || DatabaseInformationFull.java: 6381 - 6389 || DatabaseInformationFull.java: 6418 - 6426 |
 CLONE CLASS: 	return t; 
 				} 
 				Session sys = database.sessionManager.newSysSession( 
 				SqlInvariants.INFORMATION_SCHEMA_HSQLNAME, session.getUser()); 
 				String sql = (String) statementMap.get(""); 
 				Result rs  = sys.executeDirectStatement(sql); 
 				t.insertSys(session, store, rs); 
 				
 
 LINES: 		| SqlFile.java: 3692 - 3698 || SqlFile.java: 3701 - 3707 |
 CLONE CLASS: 	if (statement != null) try { 
 				statement.close(); 
 				} catch (SQLException sen) { 
 				} finally { 
 				statement = null; 
 				} 
 				
 
 LINES: 		| JDBCBench.java: 899 - 904 || JDBCBench.java: 938 - 943 |
 CLONE CLASS: 	} 
 				} catch (Exception E) { 
 				System.out.println(E.toString()); 
 				E.printStackTrace(); 
 				} 
 				} 
 				
 
 LINES: 		| Log.java: 600 - 608 || Log.java: 641 - 649 || Log.java: 656 - 664 |
 CLONE CLASS: 	throw Error.error(ErrorCode.FILE_IO_ERROR, logFileName); 
 				} 
 				if (maxLogSize > 0 && dbLogWriter.size() > maxLogSize) { 
 				database.logger.setCheckpointRequired(); 
 				} 
 				setModified(); 
 				} 
 				
 
 LINES: 		| StatementExpression.java: 94 - 106 || StatementSet.java: 128 - 140 |
 CLONE CLASS: 	TableDerived[] getSubqueries(Session session) { 
 				OrderedHashSet subQueries = null; 
 				if (expression != null) { 
 				subQueries = expression.collectAllSubqueries(subQueries); 
 				} 
 				if (subQueries == null || subQueries.size() == 0) { 
 				return TableDerived.emptyArray; 
 				} 
 				TableDerived[] subQueryArray = new TableDerived[subQueries.size()]; 
 				
 
 LINES: 		| QuerySpecification.java: 1918 - 1924 || QuerySpecification.java: 1938 - 1944 |
 CLONE CLASS: 	sb.append(exprColumns[i].getSQL()); 
 				if (i < limit - 1) { 
 				sb.append(','); 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| ExpressionArrayAggregate.java: 157 - 165 || ExpressionOp.java: 337 - 345 || ExpressionArithmetic.java: 226 - 234 |
 CLONE CLASS: 	sb.append(']'); 
 				} 
 				return sb.toString(); 
 				} 
 				public HsqlList resolveColumnReferences(Session session, 
 				RangeGroup rangeGroup, int rangeCount, RangeGroup[] rangeGroups, 
 				HsqlList unresolvedSet, boolean acceptsSequences) { 
 				
 
 LINES: 		| ExpressionLogical.java: 522 - 535 || ExpressionOp.java: 282 - 295 || Expression.java: 382 - 395 || ExpressionValue.java: 85 - 98 || ExpressionArithmetic.java: 158 - 171 |
 CLONE CLASS: 	sb.append('\n'); 
 				for (int i = 0; i < blanks; i++) { 
 				sb.append(' '); 
 				} 
 				switch (opType) { 
 				case OpTypes.VALUE : 
 				sb.append("VALUE = ").append( 
 				dataType.convertToSQLString(valueData)); 
 				sb.append(", TYPE = ").append(dataType.getNameString()); 
 				return sb.toString(); 
 				
 
 LINES: 		| HsqlArrayHeap.java: 294 - 302 || JDBCColumnMetaData.java: 153 - 160 |
 CLONE CLASS: 	sb.append(','); 
 				sb.append(' '); 
 				} 
 				} 
 				sb.append(']'); 
 				return sb.toString(); 
 				} 
 				
 
 LINES: 		| ArrayUtil.java: 1506 - 1514 || ArrayUtil.java: 1550 - 1558 || ArrayUtil.java: 1581 - 1589 |
 CLONE CLASS: 	continue mainLoop; 
 				} 
 				} 
 				return false; 
 				} 
 				return true; 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 3545 - 3554 || DatabaseInformationFull.java: 4272 - 4281 |
 CLONE CLASS: 	addColumn(t, "NUMERIC_PRECISION_RADIX", CARDINAL_NUMBER); 
 				addColumn(t, "NUMERIC_SCALE", CARDINAL_NUMBER); 
 				addColumn(t, "DATETIME_PRECISION", CARDINAL_NUMBER); 
 				addColumn(t, "INTERVAL_TYPE", CHARACTER_DATA); 
 				addColumn(t, "INTERVAL_PRECISION", CARDINAL_NUMBER); 
 				addColumn(t, "UDT_CATALOG", SQL_IDENTIFIER); 
 				addColumn(t, "UDT_SCHEMA", SQL_IDENTIFIER); 
 				addColumn(t, "UDT_NAME", SQL_IDENTIFIER); 
 				addColumn(t, "SCOPE_CATALOG", SQL_IDENTIFIER); 
 				addColumn(t, "SCOPE_SCHEMA", SQL_IDENTIFIER); 
 				
 
 LINES: 		| ParserBase.java: 493 - 500 || ParserBase.java: 528 - 535 |
 CLONE CLASS: 	if (minus) { 
 				val = -val; 
 				} 
 				read(); 
 				return val; 
 				} 
 				
 
 LINES: 		| TestStoredProcedure.java: 540 - 549 || TestBug778213.java: 166 - 176 || TestJDBCSavepoints.java: 539 - 551 || TestBug808460.java: 67 - 77 || TestINPredicateParameterizationAndCorrelation.java: 195 - 205 || TestDatabaseMetaData.java: 271 - 280 || TestLikePredicateOptimizations.java: 287 - 297 |
 CLONE CLASS: 	} 
 				public static void main(String[] args) throws Exception { 
 				TestResult            result; 
 				TestCase              test; 
 				java.util.Enumeration failures; 
 				int                   count; 
 				result = new TestResult(); 
 				
 
 LINES: 		| TestSql.java: 361 - 490 || TestSqlPersistent.java: 436 - 565 |
 CLONE CLASS: 	double  value    = 0; 
 				boolean wasEqual = false; 
 				String  message  = "DB operation completed"; 
 				String ddl1 = 
 				"DROP TABLE t1 IF EXISTS;" 
 				+ "CREATE TABLE t1 ( d DECIMAL, f DOUBLE, l BIGINT, i INTEGER, s SMALLINT, t TINYINT, " 
 				+ "dt DATE DEFAULT CURRENT_DATE, ti TIME DEFAULT CURRENT_TIME, ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP );"; 
 				try { 
 				stmnt.execute(ddl1); 
 				PreparedStatement ps = connection.prepareStatement( 
 				"INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)"); 
 				ps.setString(1, "0.2"); 
 				ps.setDouble(2, 0.2); 
 				ps.setLong(3, java.lang.Long.MAX_VALUE); 
 				ps.setInt(4, Integer.MAX_VALUE); 
 				ps.setInt(5, Short.MAX_VALUE); 
 				ps.setInt(6, 0); 
 				ps.setDate(7, new java.sql.Date(System.currentTimeMillis())); 
 				ps.setTime(8, new java.sql.Time(System.currentTimeMillis())); 
 				ps.setTimestamp( 
 				9, new java.sql.Timestamp(System.currentTimeMillis())); 
 				ps.execute(); 
 				ps.setInt(1, 0); 
 				ps.setDouble(2, java.lang.Double.NaN); 
 				ps.setLong(3, java.lang.Long.MIN_VALUE); 
 				ps.setInt(4, Integer.MIN_VALUE); 
 				ps.setInt(5, Short.MIN_VALUE); 
 				ps.setInt(6, 0); 
 				ps.setTimestamp( 
 				7, new java.sql.Timestamp(System.currentTimeMillis() + 1)); 
 				ps.setTime(8, new java.sql.Time(System.currentTimeMillis() + 1)); 
 				ps.setDate(9, new java.sql.Date(System.currentTimeMillis() + 1)); 
 				ps.execute(); 
 				ps.setInt(1, 0); 
 				ps.setDouble(2, java.lang.Double.POSITIVE_INFINITY); 
 				ps.setInt(4, Integer.MIN_VALUE); 
 				ps.setObject(5, new Short((short) 2), Types.SMALLINT); 
 				ps.setObject(6, new Integer(2), Types.TINYINT); 
 				ps.setObject(7, new java.sql.Date(System.currentTimeMillis() + 2)); 
 				ps.setObject(8, new java.sql.Time(System.currentTimeMillis() + 2)); 
 				ps.setObject(9, new java.sql.Timestamp(System.currentTimeMillis() 
 				+ 2)); 
 				ps.execute(); 
 				ps.setObject(1, new Float(0), Types.INTEGER); 
 				ps.setObject(4, new Float(1), Types.INTEGER); 
 				ps.setDouble(2, java.lang.Double.NEGATIVE_INFINITY); 
 				ps.execute(); 
 				ResultSet rs = 
 				stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1"); 
 				boolean result = rs.next(); 
 				value = rs.getDouble(2); 
 				int integerValue = rs.getInt(4); 
 				if (rs.next()) { 
 				value        = rs.getDouble(2); 
 				wasEqual     = Double.isNaN(value); 
 				integerValue = rs.getInt(4); 
 				integerValue = rs.getInt(1); 
 				} 
 				if (rs.next()) { 
 				value    = rs.getDouble(2); 
 				wasEqual = wasEqual && value == Double.POSITIVE_INFINITY; 
 				} 
 				if (rs.next()) { 
 				value    = rs.getDouble(2); 
 				wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY; 
 				} 
 				rs = stmnt.executeQuery("SELECT MAX(i) FROM t1"); 
 				if (rs.next()) { 
 				int max = rs.getInt(1); 
 				System.out.println("Max value for i: " + max); 
 				} 
 				try { 
 				ps.setString(5, "three"); 
 				fail("update did not fail"); 
 				} catch (SQLException e) {} 
 				{ 
 				stmnt.execute("drop table CDTYPE if exists"); 
 				stmnt.execute( 
 				"CREATE TABLE cdType (ID INTEGER NOT NULL, name VARCHAR(50), PRIMARY KEY(ID))"); 
 				rs = stmnt.executeQuery("SELECT MAX(ID) FROM cdType"); 
 				if (rs.next()) { 
 				int max = rs.getInt(1); 
 				System.out.println("Max value for ID: " + max); 
 				} else { 
 				System.out.println("Max value for ID not returned"); 
 				} 
 				stmnt.executeUpdate( 
 				"INSERT INTO cdType VALUES (10,'Test String');"); 
 				stmnt.execute("CALL IDENTITY();"); 
 				try { 
 				stmnt.executeUpdate( 
 				"INSERT INTO cdType VALUES (10,'Test String');"); 
 				} catch (SQLException e1) { 
 				
 
 LINES: 		| ParserRoutine.java: 2117 - 2130 || ParserRoutine.java: 2148 - 2161 |
 CLONE CLASS: 	sqlState = parseSQLStateValue(); 
 				if (readIfThis(Tokens.SET)) { 
 				readThis(Tokens.MESSAGE_TEXT); 
 				readThis(Tokens.EQUALS); 
 				message = XreadSimpleValueSpecificationOrNull(); 
 				if (message == null) { 
 				throw unexpectedToken(); 
 				} 
 				resolveOuterReferencesAndTypes(routine, context, message); 
 				} 
 				
 
 LINES: 		| HSQLDialect.java: 417 - 519 || HSQLDialect.java: 379 - 481 |
 CLONE CLASS: 	break; 
 				case Types.TIME: 
 				literal = "cast(null as time)"; 
 				break; 
 				default: 
 				literal = "cast(null as int)"; 
 				} 
 				return literal; 
 				} 
 				public boolean supportsUnionAll() { 
 				return true; 
 				} 
 				public boolean supportsTemporaryTables() { 
 				return true; 
 				} 
 				public String generateTemporaryTableName(String baseTableName) { 
 				if ( hsqldbVersion < 20 ) { 
 				return "HT_" + baseTableName; 
 				} 
 				else { 
 				return "MODULE.HT_" + baseTableName; 
 				} 
 				} 
 				public String getCreateTemporaryTableString() { 
 				if ( hsqldbVersion < 20 ) { 
 				return "create global temporary table"; 
 				} 
 				else { 
 				return "declare local temporary table"; 
 				} 
 				} 
 				public String getCreateTemporaryTablePostfix() { 
 				return ""; 
 				} 
 				public String getDropTemporaryTableString() { 
 				return "drop table"; 
 				} 
 				public Boolean performTemporaryTableDDLInIsolation() { 
 				if ( hsqldbVersion < 20 ) { 
 				return Boolean.TRUE; 
 				} 
 				else { 
 				return Boolean.FALSE; 
 				
 
 LINES: 		| JDBCSQLXML.java: 2071 - 2110 || JDBCSQLXML.java: 2996 - 3035 |
 CLONE CLASS: 	} 
 				public void setDocumentLocator(Locator locator) { 
 				this.locator = locator; 
 				} 
 				public Locator getDocumentLocator() { 
 				return this.locator; 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 2270 - 2276 || DatabaseInformationFull.java: 2992 - 2998 || DatabaseInformationFull.java: 4136 - 4142 || DatabaseInformationMain.java: 3024 - 3030 || DatabaseInformationMain.java: 3443 - 3449 |
 CLONE CLASS: 	} 
 				} 
 				} 
 				} 
 				return t; 
 				} 
 				
 
 LINES: 		| LobStoreRAFile.java: 139 - 146 || LobStoreMem.java: 136 - 143 |
 CLONE CLASS: 	} 
 				} 
 				public int getBlockSize() { 
 				return lobBlockSize; 
 				} 
 				public long getLength() { 
 				
 
 LINES: 		| RowType.java: 167 - 176 || ArrayType.java: 198 - 207 |
 CLONE CLASS: 	} 
 				return arrb; 
 				} 
 				public Object convertToType(SessionInterface session, Object a, 
 				Type otherType) { 
 				if (a == null) { 
 				return null; 
 				
 
 LINES: 		| JDBCStatement.java: 642 - 742 || JDBCPreparedStatement.java: 3368 - 3478 |
 CLONE CLASS: 	} 
 				public synchronized ResultSet getResultSet() throws SQLException { 
 				return super.getResultSet(); 
 				} 
 				public synchronized int getUpdateCount() throws SQLException { 
 				return super.getUpdateCount(); 
 				} 
 				public synchronized boolean getMoreResults() throws SQLException { 
 				return getMoreResults(JDBCStatementBase.CLOSE_CURRENT_RESULT); 
 				} 
 				public synchronized void setFetchDirection( 
 				int direction) throws SQLException { 
 				
 
 LINES: 		| StatementCompound.java: 375 - 381 || StatementCompound.java: 499 - 505 |
 CLONE CLASS: 	for (int i = 0; i < statements.length; i++) { 
 				result = executeProtected(session, statements[i]); 
 				result = handleCondition(session, result); 
 				if (result.isError()) { 
 				break; 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 4975 - 4984 || DatabaseInformationFull.java: 7686 - 7698 |
 CLONE CLASS: 	addColumn(t, "GRANTOR", SQL_IDENTIFIER); 
 				addColumn(t, "GRANTEE", SQL_IDENTIFIER); 
 				addColumn(t, "OBJECT_CATALOG", SQL_IDENTIFIER); 
 				addColumn(t, "OBJECT_SCHEMA", SQL_IDENTIFIER); 
 				addColumn(t, "OBJECT_NAME", SQL_IDENTIFIER); 
 				addColumn(t, "OBJECT_TYPE", CHARACTER_DATA); 
 				addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA); 
 				addColumn(t, "IS_GRANTABLE", YES_OR_NO); 
 				HsqlName name = HsqlNameManager.newInfoSchemaObjectName( 
 				
 
 LINES: 		| DatabaseInformationFull.java: 4737 - 4744 || DatabaseInformationFull.java: 5196 - 5203 |
 CLONE CLASS: 	SchemaObject.INDEX); 
 				t.createPrimaryKeyConstraint(name, new int[] { 
 				0, 1, 2, 3, 4, 5, 6, 7, 8, 9 
 				}, false); 
 				return t; 
 				} 
 				
 
 LINES: 		| OracleTransferHelper.java: 157 - 167 || PostgresTransferHelper.java: 88 - 98 |
 CLONE CLASS: 	} 
 				String CompareString = "nextval(\'\"" + SeqName + "\"\'"; 
 				if (columnType.indexOf(CompareString) >= 0) { 
 				columnType = "SERIAL"; 
 				} 
 				for (int Idx = 0; Idx < Funcs.length; Idx++) { 
 				
 
 LINES: 		| TestAllTypes.java: 169 - 177 || TestCacheSize.java: 246 - 255 |
 CLONE CLASS: 	sw.zero(); 
 				sStatement = cConnection.createStatement(); 
 				java.util.Random randomgen = new java.util.Random(); 
 				sStatement.execute(ddl1); 
 				sStatement.execute(ddl2); 
 				sStatement.execute(ddl3); 
 				
 
 LINES: 		| StatementDML.java: 1499 - 1506 || StatementDML.java: 1585 - 1592 |
 CLONE CLASS: 	} catch (HsqlException e) { 
 				String[] info = getConstraintInfo(c); 
 				refiterator.release(); 
 				throw Error.error(null, ErrorCode.X_27000, 
 				ErrorCode.CONSTRAINT, info); 
 				} 
 				
 
 LINES: 		| Grantee.java: 938 - 956 || Grantee.java: 973 - 991 |
 CLONE CLASS: 	if (existing == null) { 
 				existing = add.duplicate(); 
 				fullRightsMap.put(key, existing); 
 				} else { 
 				existing.add(add); 
 				} 
 				if (add.grantableRights == null) { 
 				continue; 
 				} 
 				if (existing.grantableRights == null) { 
 				existing.grantableRights = add.grantableRights.duplicate(); 
 				} else { 
 				existing.grantableRights.add(add.grantableRights); 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| FunctionSQL.java: 1423 - 1429 || FunctionSQL.java: 1447 - 1453 |
 CLONE CLASS: 	if (nodes[0].dataType == null) { 
 				nodes[0].dataType = Type.SQL_DOUBLE; 
 				} 
 				if (!nodes[0].dataType.isNumberType()) { 
 				throw Error.error(ErrorCode.X_42563); 
 				} 
 				
 
 LINES: 		| DoubleIntIndex.java: 516 - 524 || ArraySort.java: 67 - 75 |
 CLONE CLASS: 	if (compare < 0) { 
 				high = mid; 
 				} else if (compare > 0) { 
 				low = mid + 1; 
 				} else { 
 				high  = mid; 
 				found = mid; 
 				} 
 				} 
 				
 
 LINES: 		| ParserDDL.java: 2967 - 2977 || ParserDDL.java: 3090 - 3100 |
 CLONE CLASS: 	} 
 				Constraint c = 
 				new Constraint(constName, set, 
 				SchemaObject.ConstraintTypes.UNIQUE); 
 				constraintList.add(c); 
 				break; 
 				} 
 				case Tokens.FOREIGN : { 
 				
 
 LINES: 		| ExpressionLogical.java: 1611 - 1621 || ExpressionLogical.java: 1650 - 1660 |
 CLONE CLASS: 	if (hasMatch) { 
 				return Boolean.FALSE; 
 				} 
 				hasMatch = true; 
 				} 
 				} 
 				return hasMatch ? Boolean.TRUE 
 				: Boolean.FALSE; 
 				} 
 				
 
 LINES: 		| LockFile.java: 1998 - 2023 || LockFile.java: 2219 - 2244 |
 CLONE CLASS: 	final String inMethod, 
 				final IOException reason) { 
 				super(lockFile, inMethod); 
 				this.reason = reason; 
 				} 
 				public IOException getReason() { 
 				return this.reason; 
 				} 
 				public String getMessage() { 
 				return super.getMessage() + " reason: " + reason; 
 				} 
 				
 
 LINES: 		| SchemaObjectSet.java: 60 - 68 || SchemaObjectSet.java: 87 - 95 || SchemaObjectSet.java: 118 - 126 |
 CLONE CLASS: 	switch (type) { 
 				case SchemaObject.VIEW : 
 				case SchemaObject.TABLE : 
 				case SchemaObject.SEQUENCE : 
 				case SchemaObject.CHARSET : 
 				case SchemaObject.DOMAIN : 
 				case SchemaObject.TYPE : 
 				case SchemaObject.COLLATION : 
 				
 
 LINES: 		| DatabaseInformationFull.java: 2544 - 2549 || DatabaseInformationFull.java: 3369 - 3374 || DatabaseInformationFull.java: 3544 - 3549 || DatabaseInformationFull.java: 4271 - 4276 || DatabaseInformationFull.java: 5755 - 5760 || DatabaseInformationFull.java: 7849 - 7854 |
 CLONE CLASS: 	addColumn(t, "NUMERIC_PRECISION", CARDINAL_NUMBER); 
 				addColumn(t, "NUMERIC_PRECISION_RADIX", CARDINAL_NUMBER); 
 				addColumn(t, "NUMERIC_SCALE", CARDINAL_NUMBER); 
 				addColumn(t, "DATETIME_PRECISION", CARDINAL_NUMBER); 
 				addColumn(t, "INTERVAL_TYPE", CHARACTER_DATA); 
 				addColumn(t, "INTERVAL_PRECISION", CARDINAL_NUMBER); 
 				
 
 LINES: 		| StatementExpression.java: 144 - 151 || StatementSet.java: 297 - 304 || StatementSchemaDefinition.java: 67 - 74 || StatementSimple.java: 129 - 136 || StatementCompound.java: 350 - 357 |
 CLONE CLASS: 	} 
 				if (result.isError()) { 
 				result.getException().setStatementType(group, type); 
 				} 
 				return result; 
 				} 
 				
 
 LINES: 		| SchemaManager.java: 2495 - 2509 || SchemaManager.java: 2551 - 2565 |
 CLONE CLASS: 	} 
 				} 
 				schemas = schemaMap.values().iterator(); 
 				while (schemas.hasNext()) { 
 				Schema schema = (Schema) schemas.next(); 
 				if (SqlInvariants.isLobsSchemaName(schema.getName().name)) { 
 				continue; 
 				} 
 				if (SqlInvariants.isSystemSchemaName(schema.getName().name)) { 
 				continue; 
 				} 
 				
 
 LINES: 		| NumberType.java: 1469 - 1476 || IntervalType.java: 860 - 867 |
 CLONE CLASS: 	public Object subtract(Session session, Object a, Object b, 
 				Type otherType) { 
 				if (a == null || b == null) { 
 				return null; 
 				} 
 				switch (typeCode) { 
 				
 
 LINES: 		| TestBatchExecution.java: 156 - 167 || TestBatchExecution.java: 180 - 191 |
 CLONE CLASS: 	stmnt.execute(drop_table_sql); 
 				println("---------------------------------------"); 
 				println("shutting down database"); 
 				stmnt.execute(shutdown_sql); 
 				println("---------------------------------------"); 
 				conn  = DriverManager.getConnection(url, "SA", ""); 
 				stmnt = conn.createStatement(); 
 				println(""); 
 				println("***************************************"); 
 				
 
 LINES: 		| TransferTable.java: 287 - 304 || TransferTable.java: 341 - 358 || TransferTable.java: 442 - 459 |
 CLONE CLASS: 	} 
 				} 
 				} catch (Exception e) { 
 				try { 
 				if (!destDb.getAutoCommit()) { 
 				destDb.rollback(); 
 				} 
 				} catch (Exception e1) {} 
 				throw (e); 
 				} 
 				if (!destDb.getAutoCommit()) { 
 				destDb.commit(); 
 				try { 
 				destDb.setAutoCommit(true); 
 				} catch (Exception e) {} 
 				
 
 LINES: 		| WebServer.java: 201 - 280 || WebServer.java: 201 - 280 |
 CLONE CLASS: 	server.print("Could not load properties from file"); 
 				server.print("Using cli/default properties only"); 
 				} 
 				server.start(); 
 				} 
 				public String getDefaultWebPage() { 
 				return serverProperties.getProperty( 
 				ServerProperties.sc_key_web_default_page); 
 				} 
 				public String getHelpString() { 
 				return ResourceBundleHandler.getString(serverBundleHandle, 
 				"webserver.help"); 
 				} 
 				public String getProductName() { 
 				return "HSQLDB web server"; 
 				} 
 				public String getProtocol() { 
 				return isTls() ? "HTTPS" 
 				: "HTTP"; 
 				} 
 				public String getWebRoot() { 
 				return serverProperties.getProperty(ServerProperties.sc_key_web_root); 
 				} 
 				} 
 				
 
 LINES: 		| ClosableCharArrayWriter.java: 364 - 382 || ClosableByteArrayOutputStream.java: 329 - 348 |
 CLONE CLASS: 	} 
 				public synchronized String toString() { 
 				try { 
 				checkFreed(); 
 				} catch (IOException ex) { 
 				throw new RuntimeException(ex.toString()); 
 				} 
 				return new String(buf, 0, count); 
 				} 
 				
 
 LINES: 		| RowOutputBinary.java: 390 - 396 || RowInputBase.java: 225 - 231 || RowOutputBase.java: 255 - 261 |
 CLONE CLASS: 	break; 
 				case Types.SQL_INTERVAL_DAY : 
 				case Types.SQL_INTERVAL_DAY_TO_HOUR : 
 				case Types.SQL_INTERVAL_DAY_TO_MINUTE : 
 				case Types.SQL_INTERVAL_DAY_TO_SECOND : 
 				case Types.SQL_INTERVAL_HOUR : 
 				
 
 LINES: 		| TestDbBackup.java: 58 - 64 || AbstractTestOdbc.java: 80 - 86 |
 CLONE CLASS: 	static { 
 				try { 
 				Class.forName("org.hsqldb.jdbc.JDBCDriver"); 
 				} catch (ClassNotFoundException cnfe) { 
 				throw new RuntimeException( 
 				"<clinit> failed.  JDBC Driver class not in CLASSPATH"); 
 				} 
 				
 
 LINES: 		| Right.java: 594 - 603 || Right.java: 653 - 662 |
 CLONE CLASS: 	if (isFull) { 
 				return true; 
 				} 
 				switch (privilegeType) { 
 				case GrantConstants.DELETE : 
 				return isFullDelete; 
 				case GrantConstants.SELECT : 
 				
 
 LINES: 		| TransferSQLText.java: 628 - 635 || TransferSQLText.java: 685 - 692 |
 CLONE CLASS: 	} 
 				if (WTextRead != null) { 
 				try { 
 				WTextRead.close(); 
 				WTextRead = null; 
 				} catch (IOException e) {} 
 				
 
 LINES: 		| ParserBase.java: 544 - 553 || ParserBase.java: 560 - 569 || ParserBase.java: 577 - 586 |
 CLONE CLASS: 	read(); 
 				if (token.tokenType != Tokens.X_VALUE 
 				|| token.dataType.typeCode != Types.SQL_CHAR) { 
 				break; 
 				} 
 				String s = token.tokenString; 
 				read(); 
 				
 
 LINES: 		| NumberSequence.java: 356 - 368 || NumberSequence.java: 486 - 498 || NumberSequence.java: 527 - 539 |
 CLONE CLASS: 	max = Long.MAX_VALUE; 
 				min = Long.MIN_VALUE; 
 				break; 
 				case Types.SQL_NUMERIC : 
 				case Types.SQL_DECIMAL : 
 				max = Long.MAX_VALUE; 
 				min = Long.MIN_VALUE; 
 				break; 
 				default : 
 				throw Error.runtimeError(ErrorCode.U_S0500, "NumberSequence"); 
 				} 
 				
 
 LINES: 		| RowInputText.java: 276 - 286 || RowInputText.java: 293 - 303 || RowInputText.java: 310 - 320 || RowInputText.java: 327 - 337 || RowInputText.java: 344 - 354 || RowInputText.java: 361 - 371 || RowInputText.java: 378 - 388 || RowInputText.java: 395 - 405 || RowInputText.java: 413 - 423 || RowInputText.java: 431 - 441 || RowInputText.java: 449 - 459 || RowInputText.java: 510 - 520 || RowInputText.java: 529 - 539 |
 CLONE CLASS: 	String s = readString(); 
 				if (s == null) { 
 				return null; 
 				} 
 				s = s.trim(); 
 				if (s.length() == 0) { 
 				return null; 
 				} 
 				
 
 LINES: 		| OrderedIntKeyHashMap.java: 156 - 165 || OrderedIntKeyHashMap.java: 191 - 200 |
 CLONE CLASS: 	} 
 				public boolean isEmpty() { 
 				return size() == 0; 
 				} 
 				public void clear() { 
 				OrderedIntKeyHashMap.this.clear(); 
 				} 
 				} 
 				
 
 LINES: 		| SchemaObjectSet.java: 64 - 69 || SchemaObjectSet.java: 91 - 96 || SchemaObjectSet.java: 122 - 127 || SchemaObjectSet.java: 276 - 281 |
 CLONE CLASS: 	case SchemaObject.SEQUENCE : 
 				case SchemaObject.CHARSET : 
 				case SchemaObject.DOMAIN : 
 				case SchemaObject.TYPE : 
 				case SchemaObject.COLLATION : 
 				case SchemaObject.PROCEDURE : 
 				
 
 LINES: 		| SqlFile.java: 2300 - 2309 || SqlFile.java: 2770 - 2778 |
 CLONE CLASS: 	if (!m.matches()) 
 				throw new BadSpecial(SqltoolRB.pl_malformat.getString()); 
 				if (m.groupCount() < 1 || m.group(1) == null) { 
 				stdprintln(SqltoolRB.deprecated_noop.getString("*")); 
 				return; 
 				} 
 				String[] tokens = m.group(1).split("\\s+", -1); 
 				
 
 LINES: 		| HsqlDeque.java: 227 - 237 || LongDeque.java: 188 - 198 |
 CLONE CLASS: 	} 
 				public void clear() { 
 				if (elementCount == 0) { 
 				return; 
 				} 
 				firstindex = endindex = elementCount = 0; 
 				for (int i = 0; i < list.length; i++) { 
 				
 
 LINES: 		| SqlFile.java: 6002 - 6010 || SqlFile.java: 6031 - 6039 |
 CLONE CLASS: 	if (buffer == null) { 
 				stdprintln(nobufferYetString); 
 				return; 
 				} 
 				newVal.append(buffer.val); 
 				if (matcher.groupCount() > 1 && matcher.group(2) != null 
 				&& matcher.group(2).length() > 0) 
 				newVal.append(matcher.group(2)); 
 				newType = buffer.type; 
 				
 
 LINES: 		| RangeVariableJoined.java: 344 - 364 || RangeVariable.java: 930 - 950 |
 CLONE CLASS: 	sb = new StringBuffer(); 
 				String temp = "INNER"; 
 				if (isLeftJoin) { 
 				temp = "LEFT OUTER"; 
 				if (isRightJoin) { 
 				temp = "FULL"; 
 				} 
 				} else if (isRightJoin) { 
 				temp = "RIGHT OUTER"; 
 				} 
 				sb.append(b).append("join type=").append(temp).append("\n"); 
 				sb.append(b).append("table=").append(rangeTable.getName().name).append( 
 				"\n"); 
 				if (tableAlias != null) { 
 				sb.append(b).append("alias=").append(tableAlias.name).append("\n"); 
 				} 
 				
 
 LINES: 		| SqlFile.java: 2405 - 2411 || SqlFile.java: 2547 - 2553 || SqlFile.java: 2611 - 2617 |
 CLONE CLASS: 	} catch (QuitNow qn) { 
 				throw qn; 
 				} catch (RuntimeException re) { 
 				throw re; 
 				} catch (Exception e) { 
 				throw new BadSpecial(SqltoolRB.pl_block_fail.getString(), e); 
 				} finally { 
 				
 
 LINES: 		| RowOutputBinary.java: 41 - 49 || RowOutputBase.java: 42 - 50 || RowOutputTextLog.java: 42 - 50 || RowOutputText.java: 42 - 50 |
 CLONE CLASS: 	import org.hsqldb.types.BinaryData; 
 				import org.hsqldb.types.BlobData; 
 				import org.hsqldb.types.ClobData; 
 				import org.hsqldb.types.IntervalMonthData; 
 				import org.hsqldb.types.IntervalSecondData; 
 				import org.hsqldb.types.JavaObjectData; 
 				import org.hsqldb.types.TimeData; 
 				import org.hsqldb.types.TimestampData; 
 				import org.hsqldb.types.Type; 
 				
 
 LINES: 		| DatabaseInformationFull.java: 5338 - 5347 || DatabaseInformationFull.java: 5439 - 5448 || DatabaseInformationFull.java: 5546 - 5555 |
 CLONE CLASS: 	t.createPrimaryKeyConstraint(name, new int[] { 
 				0, 1, 2, 3, 4, 5 
 				}, false); 
 				return t; 
 				} 
 				final int specific_catalog = 0; 
 				final int specific_schema  = 1; 
 				
 
 LINES: 		| StatementDMQL.java: 437 - 471 || StatementResultUpdate.java: 209 - 243 |
 CLONE CLASS: 	switch (type) { 
 				case StatementTypes.CALL : { 
 				break; 
 				} 
 				case StatementTypes.INSERT : { 
 				session.getGrantee().checkInsert(targetTable, 
 				insertCheckColumns); 
 				break; 
 				} 
 				case StatementTypes.SELECT_CURSOR : 
 				break; 
 				case StatementTypes.DELETE_WHERE : { 
 				session.getGrantee().checkDelete(targetTable); 
 				break; 
 				} 
 				case StatementTypes.UPDATE_WHERE : { 
 				session.getGrantee().checkUpdate(targetTable, 
 				updateCheckColumns); 
 				break; 
 				} 
 				case StatementTypes.MERGE : { 
 				session.getGrantee().checkInsert(targetTable, 
 				insertCheckColumns); 
 				session.getGrantee().checkUpdate(targetTable, 
 				updateCheckColumns); 
 				break; 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| TestStoredProcedure.java: 226 - 240 || TestStoredProcedure.java: 262 - 276 |
 CLONE CLASS: 	ResultSet rs = cs.getResultSet(); 
 				rs.next(); 
 				assertEquals(rs.getString(1), "SYSTEM_LOBS"); 
 				assertEquals(rs.getString(2), "LOB_IDS"); 
 				rs.close(); 
 				if (cs.getMoreResults()) { 
 				rs = cs.getResultSet(); 
 				rs.next(); 
 				assertEquals(rs.getString(1), "SYSTEM_LOBS"); 
 				assertEquals(rs.getString(2), "LOBS"); 
 				rs.close(); 
 				} 
 				
 
 LINES: 		| JDBCResultSet.java: 1040 - 1047 || JDBCResultSet.java: 1919 - 1926 || JDBCResultSet.java: 4411 - 4418 || JDBCResultSet.java: 4473 - 4480 || JDBCResultSet.java: 7616 - 7623 || JDBCResultSet.java: 7636 - 7643 |
 CLONE CLASS: 	checkColumn(columnIndex); 
 				Type   sourceType = resultMetaData.columnTypes[columnIndex - 1]; 
 				Object o          = getColumnInType(columnIndex, sourceType); 
 				if (o == null) { 
 				return null; 
 				} 
 				
 
 LINES: 		| DataFileCache.java: 979 - 986 || DataFileCache.java: 1034 - 1041 |
 CLONE CLASS: 	return object; 
 				} 
 				} finally { 
 				readLock.unlock(); 
 				} 
 				return getFromFile(pos, store, keep); 
 				} 
 				
 
 LINES: 		| JDBCResultSet.java: 4821 - 4830 || JDBCCallableStatement.java: 1348 - 1357 |
 CLONE CLASS: 	.isDateTimeTypeWithZone()) { 
 				Calendar calendar = cal == null ? session.getCalendar() 
 				: cal; 
 				millis = HsqlDateTime.convertMillisToCalendar(calendar, millis); 
 				millis = HsqlDateTime.getNormalisedTime(millis); 
 				} 
 				return new Time(millis); 
 				} 
 				
 
 LINES: 		| TransactionManager2PL.java: 90 - 105 || TransactionManagerMV2PL.java: 114 - 129 |
 CLONE CLASS: 	return false; 
 				} 
 				writeLock.lock(); 
 				try { 
 				int limit = session.rowActionList.size(); 
 				session.actionTimestamp         = getNextGlobalChangeTimestamp(); 
 				session.transactionEndTimestamp = session.actionTimestamp; 
 				endTransaction(session); 
 				for (int i = 0; i < limit; i++) { 
 				RowAction action = (RowAction) session.rowActionList.get(i); 
 				
 
 LINES: 		| Expression.java: 447 - 457 || ExpressionColumnAccessor.java: 130 - 143 || ExpressionColumn.java: 1111 - 1124 |
 CLONE CLASS: 	} 
 				public boolean equals(Expression other) { 
 				if (other == this) { 
 				return true; 
 				} 
 				if (other == null) { 
 				return false; 
 				} 
 				
 
 LINES: 		| BaseHashMap.java: 324 - 331 || BaseHashMap.java: 666 - 673 || BaseHashMap.java: 780 - 787 |
 CLONE CLASS: 	int    index       = hashIndex.getHashIndex(hash); 
 				int    lookup      = hashIndex.hashTable[index]; 
 				int    lastLookup  = -1; 
 				Object returnValue = null; 
 				for (; lookup >= 0; 
 				lastLookup = lookup, 
 				lookup = hashIndex.getNextLookup(lookup)) { 
 				
 
 LINES: 		| StatementCommand.java: 319 - 327 || StatementCommand.java: 340 - 348 |
 CLONE CLASS: 	try { 
 				int     value = ((Integer) parameters[0]).intValue(); 
 				boolean check = parameters[1] == null; 
 				session.checkAdmin(); 
 				session.checkDDLWrite(); 
 				if (check && !session.database.getProperties() 
 				.validateProperty(HsqlDatabaseProperties 
 				
 
 LINES: 		| CharacterType.java: 296 - 308 || BinaryType.java: 247 - 259 |
 CLONE CLASS: 	public Type getCombinedType(Session session, Type other, int operation) { 
 				if (operation != OpTypes.CONCAT) { 
 				return getAggregateType(other); 
 				} 
 				Type newType; 
 				long newPrecision = this.precision + other.precision; 
 				switch (other.typeCode) { 
 				case Types.SQL_ALL_TYPES : 
 				return this; 
 				
 
 LINES: 		| TableWorks.java: 32 - 38 || TableBase.java: 32 - 38 |
 CLONE CLASS: 	package org.hsqldb; 
 				import org.hsqldb.HsqlNameManager.HsqlName; 
 				import org.hsqldb.error.Error; 
 				import org.hsqldb.error.ErrorCode; 
 				import org.hsqldb.index.Index; 
 				import org.hsqldb.lib.ArrayUtil; 
 				
 
 LINES: 		| ScriptWriterEncode.java: 100 - 116 || ScriptWriterBase.java: 263 - 283 |
 CLONE CLASS: 	} 
 				protected void openFile() { 
 				try { 
 				FileAccess   fa  = isDump ? FileUtil.getFileUtil() 
 				: database.logger.getFileAccess(); 
 				OutputStream fos = fa.openOutputStreamElement(outFile); 
 				outDescriptor = fa.getFileSync(fos); 
 				fileStreamOut = fos; 
 				fileStreamOut = new BufferedOutputStream(fos, 1 << 14); 
 				} catch (IOException e) { 
 				throw Error.error(e, ErrorCode.FILE_IO_ERROR, 
 				ErrorCode.M_Message_Pair, new Object[] { 
 				e.toString(), outFile 
 				}); 
 				
 
 LINES: 		| NodeAVL.java: 253 - 263 || NodeAVLDiskLarge.java: 525 - 535 || NodeAVLDisk.java: 536 - 546 |
 CLONE CLASS: 	public void updateAccessCount(int count) {} 
 				public int getAccessCount() { 
 				return 0; 
 				} 
 				public void setStorageSize(int size) {} 
 				public int getStorageSize() { 
 				return 0; 
 				} 
 				
 
 LINES: 		| ParserDDL.java: 2825 - 2833 || ParserDDL.java: 4205 - 4213 |
 CLONE CLASS: 	if (token.tokenType == Tokens.MAXVALUE) { 
 				sequence.setDefaultMaxValue(); 
 				} else if (token.tokenType == Tokens.MINVALUE) { 
 				sequence.setDefaultMinValue(); 
 				} else if (token.tokenType == Tokens.CYCLE) { 
 				sequence.setCycle(false); 
 				} else { 
 				throw unexpectedToken(); 
 				} 
 				
 
 LINES: 		| RowSetNavigatorData.java: 199 - 208 || RowSetNavigatorDataTable.java: 204 - 213 |
 CLONE CLASS: 	if (columnMap == null) { 
 				data = (Object[]) ArrayUtil.resizeArrayIfDifferent(data, 
 				visibleColumnCount); 
 				} else { 
 				Object[] newData = new Object[visibleColumnCount]; 
 				ArrayUtil.projectRow(data, columnMap, newData); 
 				data = newData; 
 				} 
 				
 
 LINES: 		| TestUpdatableResultSets.java: 113 - 119 || TestUpdatableResultSets.java: 167 - 173 || TestUpdatableResultSets.java: 282 - 288 |
 CLONE CLASS: 	} 
 				connection.commit(); 
 				} catch (SQLException e) { 
 				e.printStackTrace(); 
 				} 
 				} 
 				
 
 LINES: 		| TestMerge.java: 232 - 242 || TestMerge.java: 257 - 267 |
 CLONE CLASS: 	"WHEN MATCHED THEN " + 
 				"UPDATE SET T.A = X.A, T.B = 'UPDATED' " + 
 				"WHEN NOT MATCHED THEN " + 
 				"INSERT VALUES (X.I, X.A, 'INSERTED');" 
 				); 
 				printTable("SA.T", "*", 5); 
 				} catch (SQLException e) { 
 				fail(e.getMessage()); 
 				} 
 				
 
 LINES: 		| JDBCResultSet.java: 1042 - 1049 || JDBCResultSet.java: 4413 - 4420 |
 CLONE CLASS: 	Type   sourceType = resultMetaData.columnTypes[columnIndex - 1]; 
 				Object o          = getColumnInType(columnIndex, sourceType); 
 				if (o == null) { 
 				return null; 
 				} 
 				if (o instanceof BlobDataID) { 
 				
 
 LINES: 		| RowStoreAVLHybridExtended.java: 115 - 122 || RowStoreAVLHybridExtended.java: 188 - 195 |
 CLONE CLASS: 	NodeAVL node  = ((RowAVL) row).getNode(0); 
 				int     count = 0; 
 				while (node != null) { 
 				count++; 
 				node = node.nNext; 
 				} 
 				
 
 LINES: 		| TestOdbcService.java: 136 - 141 || TestOdbcService.java: 147 - 152 || TestOdbcService.java: 323 - 328 |
 CLONE CLASS: 	verifySimpleQueryOutput(); 
 				} catch (SQLException se) { 
 				junit.framework.AssertionFailedError ase 
 				= new junit.framework.AssertionFailedError(se.getMessage()); 
 				ase.initCause(se); 
 				throw ase; 
 				
 
 LINES: 		| RowType.java: 142 - 162 || ArrayType.java: 168 - 188 |
 CLONE CLASS: 	if (result != 0) { 
 				return result; 
 				} 
 				} 
 				if (arra.length > arrb.length) { 
 				return 1; 
 				} else if (arra.length < arrb.length) { 
 				return -1; 
 				} 
 				return 0; 
 				} 
 				public Object convertToTypeLimits(SessionInterface session, Object a) { 
 				if (a == null) { 
 				return null; 
 				} 
 				Object[] arra = (Object[]) a; 
 				
 
 LINES: 		| DatabaseInformationMain.java: 3112 - 3133 || DatabaseInformationMain.java: 3216 - 3237 |
 CLONE CLASS: 	addColumn(t, "SEQUENCE_CATALOG", SQL_IDENTIFIER); 
 				addColumn(t, "SEQUENCE_SCHEMA", SQL_IDENTIFIER); 
 				addColumn(t, "SEQUENCE_NAME", SQL_IDENTIFIER); 
 				addColumn(t, "DATA_TYPE", CHARACTER_DATA); 
 				addColumn(t, "NUMERIC_PRECISION", CARDINAL_NUMBER); 
 				addColumn(t, "NUMERIC_PRECISION_RADIX", CARDINAL_NUMBER); 
 				addColumn(t, "NUMERIC_SCALE", CARDINAL_NUMBER); 
 				addColumn(t, "MAXIMUM_VALUE", CHARACTER_DATA); 
 				addColumn(t, "MINIMUM_VALUE", CHARACTER_DATA); 
 				addColumn(t, "INCREMENT", CHARACTER_DATA); 
 				addColumn(t, "CYCLE_OPTION", YES_OR_NO); 
 				addColumn(t, "DECLARED_DATA_TYPE", CHARACTER_DATA); 
 				addColumn(t, "DECLARED_NUMERIC_PRECISION", CARDINAL_NUMBER); 
 				addColumn(t, "DECLARED_NUMERIC_SCALE", CARDINAL_NUMBER); 
 				addColumn(t, "START_WITH", CHARACTER_DATA); 
 				addColumn(t, "NEXT_VALUE", CHARACTER_DATA); 
 				HsqlName name = HsqlNameManager.newInfoSchemaObjectName( 
 				
 
 LINES: 		| QueryExpression.java: 548 - 553 || QueryExpression.java: 564 - 569 |
 CLONE CLASS: 	} else if (size == 1) { 
 				return r.getSingleRowData(); 
 				} else { 
 				throw Error.error(ErrorCode.X_21000); 
 				} 
 				} 
 				
 
 LINES: 		| ParserDDL.java: 2133 - 2138 || ParserDDL.java: 2206 - 2211 |
 CLONE CLASS: 	HsqlName hsqlName = database.nameManager.newHsqlName( 
 				table.getSchemaName(), n, isDelimitedIdentifier(), 
 				SchemaObject.TRANSITION); 
 				Table transition = new Table(table, hsqlName); 
 				RangeVariable range = new RangeVariable(transition, 
 				null, null, null, compileContext); 
 				
 
 LINES: 		| DatabaseManager.java: 343 - 350 || DatabaseManager.java: 366 - 373 |
 CLONE CLASS: 	Object  key = path; 
 				HashMap databaseMap; 
 				if (type == DatabaseURL.S_FILE) { 
 				databaseMap = fileDatabaseMap; 
 				key         = filePathToKey(path); 
 				} else if (type == DatabaseURL.S_RES) { 
 				databaseMap = resDatabaseMap; 
 				
 
 LINES: 		| RAFileSimple.java: 63 - 89 || RAStorageWrapper.java: 54 - 80 |
 CLONE CLASS: 	} 
 				public long length() throws IOException { 
 				return file.length(); 
 				} 
 				public void seek(long position) throws IOException { 
 				file.seek(position); 
 				} 
 				public long getFilePointer() throws IOException { 
 				return file.getFilePointer(); 
 				} 
 				public int read() throws IOException { 
 				return file.read(); 
 				} 
 				public long readLong() throws IOException { 
 				return file.readLong(); 
 				} 
 				public int readInt() throws IOException { 
 				return file.readInt(); 
 				} 
 				public void read(byte[] b, int offset, int length) throws IOException { 
 				
 
 LINES: 		| TransactionManagerMVCC.java: 667 - 696 || TransactionManagerMV2PL.java: 437 - 466 |
 CLONE CLASS: 	synchronized (committedTransactionTimestamps) { 
 				if (committedTransactionTimestamps.isEmpty()) { 
 				break; 
 				} 
 				commitTimestamp = committedTransactionTimestamps.getFirst(); 
 				if (commitTimestamp < timestamp) { 
 				committedTransactionTimestamps.removeFirst(); 
 				actions = (Object[]) committedTransactions.removeFirst(); 
 				} else { 
 				break; 
 				} 
 				} 
 				mergeTransaction(actions, 0, actions.length, commitTimestamp); 
 				finaliseRows(session, actions, 0, actions.length); 
 				} 
 				} 
 				public void beginTransaction(Session session) { 
 				writeLock.lock(); 
 				try { 
 				if (!session.isTransaction) { 
 				session.actionTimestamp      = getNextGlobalChangeTimestamp(); 
 				session.transactionTimestamp = session.actionTimestamp; 
 				session.isTransaction        = true; 
 				
 
 LINES: 		| StatementDML.java: 287 - 298 || StatementSet.java: 337 - 348 |
 CLONE CLASS: 	if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) { 
 				continue; 
 				} 
 				set.add(name); 
 				} 
 				for (int i = 0; i < subqueries.length; i++) { 
 				if (subqueries[i].queryExpression != null) { 
 				subqueries[i].queryExpression.getBaseTableNames(set); 
 				} 
 				} 
 				
 
 LINES: 		| JDBCBlobFile.java: 439 - 447 || JDBCBlobFile.java: 620 - 628 || JDBCClobFile.java: 223 - 231 || JDBCClobFile.java: 505 - 513 || JDBCClobFile.java: 565 - 573 || JDBCClobFile.java: 735 - 743 |
 CLONE CLASS: 	public void close() throws IOException { 
 				try { 
 				super.close(); 
 				} finally { 
 				m_streams.remove(this); 
 				} 
 				} 
 				}; 
 				
 
 LINES: 		| Types.java: 694 - 701 || Type.java: 1089 - 1096 |
 CLONE CLASS: 	case Types.SQL_INTERVAL_YEAR : 
 				case Types.SQL_INTERVAL_YEAR_TO_MONTH : 
 				case Types.SQL_INTERVAL_MONTH : 
 				case Types.SQL_INTERVAL_DAY : 
 				case Types.SQL_INTERVAL_DAY_TO_HOUR : 
 				case Types.SQL_INTERVAL_DAY_TO_MINUTE : 
 				case Types.SQL_INTERVAL_DAY_TO_SECOND : 
 				case Types.SQL_INTERVAL_HOUR : 
 				
 
 LINES: 		| ParserDQL.java: 5935 - 5942 || ParserDQL.java: 5945 - 5952 |
 CLONE CLASS: 	checkValidCatalogName(token.namePrefix); 
 				if (token.namePrePrefix != null) { 
 				throw tooManyIdentifiers(); 
 				} 
 				break; 
 				} 
 				
 
 LINES: 		| StatementDMQL.java: 36 - 41 || StatementDML.java: 35 - 40 |
 CLONE CLASS: 	import org.hsqldb.ParserDQL.CompileContext; 
 				import org.hsqldb.error.Error; 
 				import org.hsqldb.error.ErrorCode; 
 				import org.hsqldb.lib.ArrayUtil; 
 				import org.hsqldb.lib.HashSet; 
 				import org.hsqldb.lib.OrderedHashSet; 
 				
 
 LINES: 		| Table.java: 1560 - 1569 || Table.java: 2409 - 2418 |
 CLONE CLASS: 	if (i > -1) { 
 				return indexList[i]; 
 				} 
 				switch (tableType) { 
 				case TableBase.FUNCTION_TABLE : 
 				case TableBase.SYSTEM_SUBQUERY : 
 				case TableBase.INFO_SCHEMA_TABLE : 
 				
 
 LINES: 		| RowSetNavigatorData.java: 385 - 399 || RowSetNavigatorData.java: 441 - 455 |
 CLONE CLASS: 	Object[]    compareData = null; 
 				RowIterator it; 
 				Object[]    otherData = null; 
 				sortFull(session); 
 				other.sortFull(session); 
 				it = queryExpression.fullIndex.emptyIterator(); 
 				while (hasNext()) { 
 				Object[] currentData = getNext(); 
 				boolean newGroup = 
 				compareData == null 
 				|| queryExpression.fullIndex.compareRowNonUnique( 
 				session, currentData, compareData, 
 				
 
 LINES: 		| PgType.java: 353 - 358 || PgType.java: 370 - 375 |
 CLONE CLASS: 	try { 
 				o = hType.convertToType(session, o, Type.SQL_VARCHAR); 
 				} catch (HsqlException e) { 
 				PgType.throwError(e); 
 				} 
 				break; 
 				
 
 LINES: 		| ParserRoutine.java: 631 - 637 || ParserDML.java: 1163 - 1169 || ParserDQL.java: 5246 - 5252 |
 CLONE CLASS: 	} else { 
 				readThis(Tokens.CLOSEBRACKET); 
 				break; 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| NumberType.java: 1250 - 1259 || BlobType.java: 307 - 316 || ClobType.java: 177 - 186 |
 CLONE CLASS: 	} 
 				public String convertToSQLString(Object a) { 
 				if (a == null) { 
 				return Tokens.T_NULL; 
 				} 
 				return convertToString(a); 
 				} 
 				
 
 LINES: 		| ExpressionColumn.java: 1028 - 1034 || ExpressionColumn.java: 1059 - 1065 |
 CLONE CLASS: 	} 
 				} 
 				} 
 				if (matchIndex >= 0) { 
 				return columns[matchIndex]; 
 				} 
 				
 
 LINES: 		| TestSql.java: 696 - 728 || TestNullInUnion.java: 51 - 83 |
 CLONE CLASS: 	st.execute( 
 				"CREATE TABLE t1 (id int not null, v1 int, v2 int, primary key(id))"); 
 				st.execute( 
 				"CREATE TABLE t2 (id int not null, v1 int, v3 int, primary key(id))"); 
 				st.execute("INSERT INTO t1 values(1,1,1)"); 
 				st.execute("INSERT INTO t1 values(2,2,2)"); 
 				st.execute("INSERT INTO t2 values(1,3,3)"); 
 				ResultSet rs = st.executeQuery( 
 				"select t as atable, a as idvalue, b as value1, c as value2, d as value3 from(" 
 				+ "(select 't1' as t, t1.id as a, t1.v1 as b, t1.v2 as c, null as d from t1) union" 
 				+ "(select 't2' as t, t2.id as a, t2.v1 as b, null as c, t2.v3 as d from t2)) order by atable, idvalue"); 
 				assertTrue(rs.next()); 
 				assertEquals("t1", rs.getObject("atable")); 
 				assertEquals(1, rs.getInt("idvalue")); 
 				assertEquals(1, rs.getInt("value1")); 
 				assertEquals(1, rs.getInt("value2")); 
 				assertEquals(null, rs.getObject("value3")); 
 				assertTrue(rs.next()); 
 				assertEquals("t1", rs.getObject("atable")); 
 				assertEquals(2, rs.getInt("idvalue")); 
 				assertEquals(2, rs.getInt("value1")); 
 				assertEquals(2, rs.getInt("value2")); 
 				assertEquals(null, rs.getObject("value3")); 
 				assertTrue(rs.next()); 
 				assertEquals("t2", rs.getObject("atable")); 
 				assertEquals(1, rs.getInt("idvalue")); 
 				assertEquals(3, rs.getInt("value1")); 
 				assertEquals(null, rs.getObject("value2")); 
 				assertEquals(3, rs.getInt("value3")); 
 				assertFalse(rs.next()); 
 				} 
 				
 
 LINES: 		| RowAVL.java: 206 - 213 || RowAVLDisk.java: 271 - 278 |
 CLONE CLASS: 	NodeAVL n = nPrimaryNode; 
 				while (n != null) { 
 				NodeAVL last = n; 
 				n          = n.nNext; 
 				last.nNext = null; 
 				} 
 				
 
 LINES: 		| TestBase.java: 139 - 193 || TestBase.java: 139 - 193 |
 CLONE CLASS: 	e.printStackTrace(); 
 				System.out.println(this + ".setUp() error: " + e.getMessage()); 
 				} 
 				} 
 				protected void tearDown() { 
 				if (isNetwork && !isServlet) { 
 				server.stop(); 
 				server = null; 
 				} 
 				} 
 				Connection newConnection() throws SQLException { 
 				return DriverManager.getConnection(url, user, password); 
 				} 
 				public static void runWithResult(Class testCaseClass, String testName) { 
 				try { 
 				Constructor ctor = testCaseClass.getConstructor(new Class[]{ 
 				String.class }); 
 				TestBase theTest = (TestBase) ctor.newInstance(new Object[]{ 
 				testName }); 
 				theTest.runWithResult(); 
 				} catch (Exception ex) { 
 				System.err.println("couldn't execute test:"); 
 				ex.printStackTrace(System.err); 
 				} 
 				} 
 				public void runWithResult() { 
 				TestResult result   = run(); 
 				String     testName = this.getClass().getName(); 
 				if (testName.startsWith("org.hsqldb.test.")) { 
 				testName = testName.substring(16); 
 				} 
 				testName += "." + getName(); 
 				int failureCount = result.failureCount(); 
 				System.out.println(testName + " failure count: " + failureCount); 
 				java.util.Enumeration failures = result.failures(); 
 				while (failures.hasMoreElements()) { 
 				System.err.println(failures.nextElement()); 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| RowInputText.java: 411 - 419 || RowInputText.java: 429 - 437 |
 CLONE CLASS: 	throws IOException { 
 				String s = readString(); 
 				if (s == null) { 
 				return null; 
 				} 
 				s = s.trim(); 
 				
 
 LINES: 		| Constraint.java: 265 - 275 || UserTypeModifier.java: 147 - 157 || TriggerDef.java: 218 - 228 || NumberSequence.java: 161 - 171 || Charset.java: 174 - 184 || IndexAVL.java: 237 - 247 |
 CLONE CLASS: 	} 
 				public HsqlName getSchemaName() { 
 				return name.schema; 
 				} 
 				public Grantee getOwner() { 
 				return name.schema.owner; 
 				} 
 				public OrderedHashSet getReferences() { 
 				
 
 LINES: 		| RowSetNavigatorClient.java: 260 - 273 || RowSetNavigatorData.java: 639 - 652 |
 CLONE CLASS: 	} 
 				private void ensureCapacity() { 
 				if (size == table.length) { 
 				int        newSize  = size == 0 ? 4 
 				: size * 2; 
 				Object[][] newTable = new Object[newSize][]; 
 				System.arraycopy(table, 0, newTable, 0, size); 
 				table = newTable; 
 				} 
 				} 
 				
 
 LINES: 		| StatementCommand.java: 1255 - 1260 || StatementCommand.java: 1291 - 1296 |
 CLONE CLASS: 	throw Error.error(ErrorCode.X_23504, 
 				refTable.getName().name); 
 				} 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| Table.java: 684 - 690 || IndexAVL.java: 708 - 714 || IndexAVL.java: 723 - 729 || IndexAVL.java: 741 - 747 |
 CLONE CLASS: 	if (i != 0) { 
 				return i; 
 				} 
 				} 
 				return 0; 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 2726 - 2735 || DatabaseInformationFull.java: 6006 - 6015 |
 CLONE CLASS: 	row[data_type] = "INTERVAL"; 
 				row[interval_type] = 
 				((IntervalType) type).getQualifier(type.typeCode); 
 				row[interval_precision] = 
 				ValuePool.getLong(type.precision); 
 				row[datetime_precision] = ValuePool.getLong(type.scale); 
 				} else if (type.isBinaryType()) { 
 				row[character_maximum_length] = 
 				ValuePool.getLong(type.precision); 
 				row[character_octet_length] = 
 				
 
 LINES: 		| ParserDDL.java: 914 - 929 || ParserDDL.java: 1704 - 1719 |
 CLONE CLASS: 	boolean ifNot = false; 
 				if (token.tokenType == Tokens.IF) { 
 				int position = getPosition(); 
 				read(); 
 				if (token.tokenType == Tokens.NOT) { 
 				read(); 
 				readThis(Tokens.EXISTS); 
 				ifNot = true; 
 				} else { 
 				rewind(position); 
 				} 
 				} 
 				
 
 LINES: 		| RAFileNIO.java: 134 - 145 || RAFileNIO.java: 171 - 182 || RAFileNIO.java: 192 - 203 |
 CLONE CLASS: 	} catch (Throwable e) { 
 				database.logger.logWarningEvent(JVM_ERROR, e); 
 				IOException io = new IOException(e.toString()); 
 				try { 
 				io.initCause(e); 
 				} catch (Throwable e1) {} 
 				throw io; 
 				} 
 				} 
 				
 
 LINES: 		| TransactionManager2PL.java: 151 - 170 || TransactionManagerMV2PL.java: 201 - 220 |
 CLONE CLASS: 	rollbackPartial(session, start, timestamp); 
 				} 
 				public void rollbackAction(Session session) { 
 				rollbackPartial(session, session.actionIndex, 
 				session.actionStartTimestamp); 
 				endActionTPL(session); 
 				} 
 				public void rollbackPartial(Session session, int start, long timestamp) { 
 				int limit = session.rowActionList.size(); 
 				if (start == limit) { 
 				return; 
 				
 
 LINES: 		| DatabaseManagerSwing.java: 457 - 479 || DatabaseManager.java: 235 - 257 |
 CLONE CLASS: 	} 
 				public static void main(String[] arg) { 
 				System.getProperties().put("sun.java2d.noddraw", "true"); 
 				String  currentArg; 
 				String  lowerArg; 
 				String  urlid        = null; 
 				String  rcFile       = null; 
 				boolean autoConnect  = false; 
 				boolean urlidConnect = false; 
 				bMustExit = true; 
 				for (int i = 0; i < arg.length; i++) { 
 				currentArg = arg[i]; 
 				
 
 LINES: 		| RowStoreAVLDisk.java: 256 - 265 || RowStoreAVLHybrid.java: 276 - 285 || RowStoreAVLHybridExtended.java: 153 - 162 || RowStoreAVLDiskData.java: 228 - 237 || RowStoreAVLMemory.java: 156 - 165 |
 CLONE CLASS: 	break; 
 				} 
 				} 
 				public void rollbackRow(Session session, Row row, int changeAction, 
 				int txModel) { 
 				switch (changeAction) { 
 				case RowAction.ACTION_DELETE : 
 				
 
 LINES: 		| TestBench.java: 745 - 750 || JDBCBench.java: 832 - 837 |
 CLONE CLASS: 	if (abalancesum != bbalancesum || bbalancesum != tbalancesum 
 				|| tbalancesum != deltasum) { 
 				System.out.println("sums don't match!"); 
 				} else { 
 				System.out.println("sums match!"); 
 				} 
 				
 
 LINES: 		| JDBCClobClient.java: 368 - 376 || JDBCClobClient.java: 490 - 498 |
 CLONE CLASS: 	final long pos) throws SQLException { 
 				checkClosed(); 
 				if (pos < 1) { 
 				throw JDBCUtil.outOfRangeArgument("pos: " + pos); 
 				} 
 				if (!isWritable) { 
 				
 
 LINES: 		| FunctionCustom.java: 2247 - 2255 || FunctionSQL.java: 1371 - 1379 || FunctionSQL.java: 1397 - 1405 |
 CLONE CLASS: 	if (nodes[0].dataType == null) { 
 				nodes[0].dataType = nodes[1].dataType; 
 				} 
 				if (nodes[1].dataType == null) { 
 				nodes[1].dataType = nodes[0].dataType; 
 				} 
 				if (nodes[0].dataType == null) { 
 				
 
 LINES: 		| TestBench.java: 1044 - 1098 || JDBCBench.java: 1061 - 1115 |
 CLONE CLASS: 	} 
 				return 0; 
 				} 
 				} 
 				class MemoryWatcherThread extends Thread { 
 				long    min          = 0; 
 				long    max          = 0; 
 				boolean keep_running = true; 
 				public MemoryWatcherThread() { 
 				this.reset(); 
 				keep_running = true; 
 				} 
 				public void reset() { 
 				System.gc(); 
 				long currentFree  = Runtime.getRuntime().freeMemory(); 
 				long currentAlloc = Runtime.getRuntime().totalMemory(); 
 				min = max = (currentAlloc - currentFree); 
 				} 
 				public void end() { 
 				keep_running = false; 
 				} 
 				public void run() { 
 				while (keep_running) { 
 				long currentFree  = Runtime.getRuntime().freeMemory(); 
 				long currentAlloc = Runtime.getRuntime().totalMemory(); 
 				long used         = currentAlloc - currentFree; 
 				if (used < min) { 
 				min = used; 
 				} 
 				if (used > max) { 
 				max = used; 
 				} 
 				try { 
 				sleep(100); 
 				} catch (InterruptedException E) {} 
 				} 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| JDBCResultSet.java: 1921 - 1928 || JDBCResultSet.java: 4475 - 4482 |
 CLONE CLASS: 	Type   sourceType = resultMetaData.columnTypes[columnIndex - 1]; 
 				Object o          = getColumnInType(columnIndex, sourceType); 
 				if (o == null) { 
 				return null; 
 				} 
 				if (o instanceof ClobDataID) { 
 				
 
 LINES: 		| StatementCompound.java: 535 - 544 || StatementCompound.java: 612 - 621 |
 CLONE CLASS: 	break; 
 				} 
 				break; 
 				} 
 				if (result.getType() == ResultConstants.DATA) { 
 				break; 
 				} 
 				
 
 LINES: 		| HsqlDeque.java: 332 - 342 || LongDeque.java: 324 - 334 |
 CLONE CLASS: 	System.arraycopy(list, firstindex, newList, firstindex, 
 				list.length - firstindex); 
 				if (endindex <= firstindex) { 
 				System.arraycopy(list, 0, newList, list.length, endindex); 
 				endindex = list.length + endindex; 
 				} 
 				list = newList; 
 				} 
 				
 
 LINES: 		| ExpressionColumn.java: 1022 - 1029 || ExpressionColumn.java: 1039 - 1046 || ExpressionColumn.java: 1052 - 1059 |
 CLONE CLASS: 	if (matchIndex < 0) { 
 				matchIndex = i; 
 				} else if (session.database.sqlEnforceRefs) { 
 				String message = getColumnName(); 
 				throw Error.error(ErrorCode.X_42580, message); 
 				} 
 				} 
 				
 
 LINES: 		| NumberType.java: 1422 - 1429 || NumberType.java: 1472 - 1479 || NumberType.java: 1520 - 1527 || NumberType.java: 1571 - 1578 |
 CLONE CLASS: 	if (a == null || b == null) { 
 				return null; 
 				} 
 				switch (typeCode) { 
 				case Types.SQL_REAL : 
 				case Types.SQL_FLOAT : 
 				
 
 LINES: 		| TestMerge.java: 184 - 192 || TestMerge.java: 209 - 217 |
 CLONE CLASS: 	"WHEN NOT MATCHED THEN " + 
 				"INSERT VALUES (S.I, S.A, 'INSERTED');" 
 				); 
 				printTable("SA.T", "*", 5); 
 				} catch (SQLException e) { 
 				fail(e.getMessage()); 
 				} 
 				
 
 LINES: 		| Grid.java: 434 - 447 || Tree.java: 408 - 421 |
 CLONE CLASS: 	} 
 				g.drawImage(iImage, 0, 0, this); 
 				} 
 				public void update(Graphics g) { 
 				paint(g); 
 				} 
 				
 
 LINES: 		| DoubleIntIndex.java: 281 - 292 || DoubleIntIndex.java: 338 - 349 |
 CLONE CLASS: 	} 
 				hasChanged = true; 
 				if (count != i) { 
 				moveRows(i, i + 1, count - i); 
 				} 
 				keys[i]   = key; 
 				values[i] = value; 
 				count++; 
 				
 
 LINES: 		| ClosableCharArrayWriter.java: 241 - 291 || ClosableByteArrayOutputStream.java: 204 - 258 |
 CLONE CLASS: 	} 
 				public synchronized int capacity() throws IOException { 
 				checkFreed(); 
 				return buf.length; 
 				} 
 				public synchronized void reset() throws IOException { 
 				checkClosed(); 
 				count = 0; 
 				} 
 				public synchronized void trimToSize() throws IOException { 
 				checkFreed(); 
 				if (buf.length > count) { 
 				buf = copyOf(buf, count); 
 				} 
 				} 
 				
 
 LINES: 		| DatabaseManagerSwing.java: 1744 - 1758 || DatabaseManager.java: 927 - 941 |
 CLONE CLASS: 	if (r == null) { 
 				String[] g = new String[1]; 
 				g[0] = "Result"; 
 				gResult.setHead(g); 
 				g[0] = "(empty)"; 
 				gResult.addRow(g); 
 				return; 
 				} 
 				try { 
 				
 
 LINES: 		| ExpressionLogical.java: 149 - 154 || ExpressionLogical.java: 584 - 589 || ExpressionLogical.java: 820 - 825 || ExpressionLogical.java: 2242 - 2247 || Expression.java: 577 - 582 |
 CLONE CLASS: 	case OpTypes.MATCH_SIMPLE : 
 				case OpTypes.MATCH_PARTIAL : 
 				case OpTypes.MATCH_FULL : 
 				case OpTypes.MATCH_UNIQUE_SIMPLE : 
 				case OpTypes.MATCH_UNIQUE_PARTIAL : 
 				case OpTypes.MATCH_UNIQUE_FULL : 
 				
 
 LINES: 		| BitType.java: 119 - 129 || CharacterType.java: 224 - 234 || BooleanType.java: 83 - 93 || NumberType.java: 494 - 504 || IntervalType.java: 350 - 360 || BinaryType.java: 185 - 195 || RowType.java: 293 - 303 || ArrayType.java: 390 - 400 || DateTimeType.java: 260 - 270 || OtherType.java: 93 - 103 |
 CLONE CLASS: 	} 
 				public Type getAggregateType(Type other) { 
 				if (other == null) { 
 				return this; 
 				} 
 				if (other == SQL_ALL_TYPES) { 
 				return this; 
 				} 
 				
 
 LINES: 		| NumberType.java: 677 - 684 || IntervalType.java: 448 - 455 || DateTimeType.java: 406 - 413 |
 CLONE CLASS: 	return -1; 
 				} 
 				if (b == null) { 
 				return 1; 
 				} 
 				switch (typeCode) { 
 				
 
 LINES: 		| TestSql.java: 838 - 847 || TestSql.java: 851 - 860 |
 CLONE CLASS: 	+ "from bintest"; 
 				r = sStatement.executeQuery(s); 
 				r.next(); 
 				b1n = r.getBytes(1); 
 				r.next(); 
 				b1n = r.getBytes(1); 
 				
 
 LINES: 		| RAFileInJar.java: 222 - 230 || LobStoreInJar.java: 121 - 129 |
 CLONE CLASS: 	} 
 				InputStream fis = null; 
 				try { 
 				fis = getClass().getResourceAsStream(fileName); 
 				if (fis == null) { 
 				ClassLoader cl = 
 				
 
 LINES: 		| NodeAVL.java: 267 - 276 || NodeAVLDisk.java: 546 - 555 |
 CLONE CLASS: 	} 
 				public void setPos(long pos) {} 
 				public boolean isNew() { 
 				return false; 
 				} 
 				public boolean hasChanged() { 
 				return false; 
 				
 
 LINES: 		| RAFileNIO.java: 242 - 249 || RAFileNIO.java: 259 - 266 |
 CLONE CLASS: 	return value; 
 				} catch (Throwable t) { 
 				database.logger.logWarningEvent(JVM_ERROR, t); 
 				IOException io = JavaSystem.toIOException(t); 
 				throw io; 
 				} 
 				
 
 LINES: 		| ResultLob.java: 393 - 400 || ResultLob.java: 416 - 423 |
 CLONE CLASS: 	result.blockOffset = dataInput.readLong(); 
 				result.blockLength = dataInput.readLong(); 
 				result.charBlock   = new char[(int) result.blockLength]; 
 				for (int i = 0; i < result.charBlock.length; i++) { 
 				result.charBlock[i] = dataInput.readChar(); 
 				} 
 				break; 
 				
 
 LINES: 		| TransactionManagerMVCC.java: 304 - 311 || TransactionManager2PL.java: 196 - 203 || TransactionManagerMV2PL.java: 248 - 255 |
 CLONE CLASS: 	} 
 				session.rowActionList.setSize(start); 
 				} 
 				public RowAction addDeleteAction(Session session, Table table, 
 				PersistentStore store, Row row, 
 				int[] colMap) { 
 				
 
 LINES: 		| TestStoredProcedure.java: 196 - 206 || TestStoredProcedure.java: 221 - 231 || TestStoredProcedure.java: 257 - 267 |
 CLONE CLASS: 	boolean isResult = cs.execute(); 
 				assertFalse(isResult); 
 				cs.getMoreResults(); 
 				ResultSet rs = cs.getResultSet(); 
 				rs.next(); 
 				assertEquals(rs.getString(1), "SYSTEM_LOBS"); 
 				assertEquals(rs.getString(2), "LOB_IDS"); 
 				rs.close(); 
 				
 
 LINES: 		| ScriptRunner.java: 274 - 281 || ScriptRunner.java: 293 - 300 |
 CLONE CLASS: 	String error = "statement error processing log " + databaseFile 
 				+ "line: " + scr.getLineNumber(); 
 				database.logger.logSevereEvent(error, e); 
 				if (fullReplay) { 
 				throw Error.error(e, ErrorCode.ERROR_IN_SCRIPT_FILE, error); 
 				} 
 				
 
 LINES: 		| IntervalType.java: 677 - 685 || DateTimeType.java: 999 - 1007 |
 CLONE CLASS: 	} 
 				public String convertToSQLString(Object a) { 
 				if (a == null) { 
 				return Tokens.T_NULL; 
 				} 
 				StringBuffer sb = new StringBuffer(32); 
 				
 
 LINES: 		| StatementExpression.java: 102 - 115 || StatementSet.java: 136 - 149 || StatementProcedure.java: 301 - 314 |
 CLONE CLASS: 	if (subQueries == null || subQueries.size() == 0) { 
 				return TableDerived.emptyArray; 
 				} 
 				TableDerived[] subQueryArray = new TableDerived[subQueries.size()]; 
 				subQueries.toArray(subQueryArray); 
 				for (int i = 0; i < subqueries.length; i++) { 
 				subQueryArray[i].prepareTable(); 
 				} 
 				return subQueryArray; 
 				} 
 				
 
 LINES: 		| TransferTable.java: 177 - 184 || TransferTable.java: 209 - 216 || TransferTable.java: 241 - 248 || TransferTable.java: 392 - 399 || TransferTable.java: 424 - 431 |
 CLONE CLASS: 	nextsemicolon); 
 				while (Statement.charAt(Statement.length() - 1) == ';') { 
 				Statement = Statement.substring(0, Statement.length() 
 				- 1); 
 				} 
 				try { 
 				
 
 LINES: 		| ParserDQL.java: 3262 - 3275 || ParserDQL.java: 3344 - 3357 || ParserDQL.java: 3370 - 3383 |
 CLONE CLASS: 	while (true) { 
 				int type; 
 				if (token.tokenType == Tokens.PLUS) { 
 				type = OpTypes.ADD; 
 				} else if (token.tokenType == Tokens.MINUS) { 
 				type = OpTypes.SUBTRACT; 
 				} else { 
 				break; 
 				} 
 				read(); 
 				Expression a = e; 
 				
 
 LINES: 		| SqlFile.java: 4128 - 4134 || SqlFile.java: 4512 - 4518 |
 CLONE CLASS: 	: fieldArray[j]) 
 				, false); 
 				} 
 				condlPrintln(LS + PRE_TR + "</TR>", true); 
 				condlPrintln("", false); 
 				} 
 				
 
 LINES: 		| ParserCommand.java: 591 - 608 || ParserCommand.java: 628 - 645 |
 CLONE CLASS: 	HsqlArrayList charsets = null; 
 				if (readIfThis(Tokens.FOR)) { 
 				charsets = new HsqlArrayList(); 
 				while (true) { 
 				SchemaObject charset = 
 				readSchemaObjectName(SchemaObject.CHARSET); 
 				charsets.add(charset); 
 				if (token.tokenType == Tokens.COMMA) { 
 				read(); 
 				continue; 
 				} 
 				break; 
 				
 
 LINES: 		| ArrayUtil.java: 1485 - 1491 || TableDerived.java: 412 - 418 |
 CLONE CLASS: 	} else { 
 				return true; 
 				} 
 				} 
 				return false; 
 				} 
 				
 
 LINES: 		| StatementSchema.java: 112 - 129 || StatementSchema.java: 709 - 726 |
 CLONE CLASS: 	case StatementTypes.DROP_ASSERTION : 
 				case StatementTypes.DROP_CHARACTER_SET : 
 				case StatementTypes.DROP_COLLATION : 
 				case StatementTypes.DROP_TYPE : 
 				case StatementTypes.DROP_DOMAIN : 
 				case StatementTypes.DROP_ROLE : 
 				case StatementTypes.DROP_USER : 
 				case StatementTypes.DROP_ROUTINE : 
 				case StatementTypes.DROP_SCHEMA : 
 				case StatementTypes.DROP_SEQUENCE : 
 				case StatementTypes.DROP_TABLE : 
 				case StatementTypes.DROP_TRANSFORM : 
 				case StatementTypes.DROP_TRANSLATION : 
 				case StatementTypes.DROP_TRIGGER : 
 				case StatementTypes.DROP_CAST : 
 				case StatementTypes.DROP_ORDERING : 
 				case StatementTypes.DROP_VIEW : 
 				case StatementTypes.DROP_INDEX : 
 				
 
 LINES: 		| FunctionCustom.java: 2769 - 2775 || FunctionCustom.java: 2782 - 2788 |
 CLONE CLASS: 	if (nodes[0].dataType == null) { 
 				nodes[0].dataType = Type.SQL_DOUBLE; 
 				} 
 				if (!nodes[0].dataType.isNumberType()) { 
 				throw Error.error(ErrorCode.X_42561); 
 				} 
 				
 
 LINES: 		| Result.java: 438 - 445 || Result.java: 455 - 465 || Result.java: 1167 - 1174 || Result.java: 1237 - 1246 |
 CLONE CLASS: 	break; 
 				default : 
 				throw Error.runtimeError(ErrorCode.U_S0500, "Result"); 
 				} 
 				break; 
 				} 
 				
 
 LINES: 		| LongKeyLongValueHashMap.java: 144 - 154 || IntKeyIntValueHashMap.java: 137 - 147 || OrderedLongKeyHashMap.java: 179 - 189 || OrderedIntKeyHashMap.java: 136 - 146 || IntKeyHashMapConcurrent.java: 175 - 185 || LongKeyHashMap.java: 209 - 219 || LongKeyIntValueHashMap.java: 148 - 158 || IntKeyHashMap.java: 121 - 131 |
 CLONE CLASS: 	} 
 				public boolean contains(Object o) { 
 				throw new RuntimeException(); 
 				} 
 				public Object get(Object key) { 
 				throw new RuntimeException(); 
 				} 
 				public boolean add(Object value) { 
 				
 
 LINES: 		| StatementCompound.java: 380 - 388 || StatementCompound.java: 504 - 512 |
 CLONE CLASS: 	break; 
 				} 
 				if (result.getType() == ResultConstants.VALUE) { 
 				break; 
 				} 
 				if (result.getType() == ResultConstants.DATA) { 
 				break; 
 				
 
 LINES: 		| StatementCommand.java: 579 - 585 || StatementCommand.java: 593 - 599 |
 CLONE CLASS: 	routine); 
 				return Result.updateZeroResult; 
 				} catch (HsqlException e) { 
 				return Result.newErrorResult(e, sql); 
 				} 
 				} 
 				
 
 LINES: 		| RowStoreAVLDisk.java: 95 - 103 || RowStoreAVLDiskData.java: 151 - 159 |
 CLONE CLASS: 	} 
 				public boolean isMemory() { 
 				return false; 
 				} 
 				public int getAccessCount() { 
 				return cache.getAccessCount(); 
 				} 
 				
 
 LINES: 		| FunctionCustom.java: 2813 - 2819 || FunctionCustom.java: 2880 - 2886 || FunctionCustom.java: 2920 - 2926 || FunctionCustom.java: 2991 - 2997 |
 CLONE CLASS: 	if (nodes[0].dataType == null) { 
 				nodes[0].dataType = Type.SQL_VARCHAR; 
 				} 
 				if (!nodes[0].dataType.isCharacterType()) { 
 				throw Error.error(ErrorCode.X_42561); 
 				} 
 				
 
 LINES: 		| PgType.java: 348 - 353 || JDBCPreparedStatement.java: 4219 - 4224 |
 CLONE CLASS: 	case Types.SQL_DATE : 
 				case Types.SQL_TIME_WITH_TIME_ZONE : 
 				case Types.SQL_TIMESTAMP_WITH_TIME_ZONE : 
 				case Types.SQL_TIME : 
 				case Types.SQL_TIMESTAMP : { 
 				try { 
 				
 
 LINES: 		| LobManager.java: 1547 - 1558 || LobManager.java: 1616 - 1627 |
 CLONE CLASS: 	try { 
 				Object[] data = getLobHeader(lobID); 
 				if (data == null) { 
 				return Result.newErrorResult(Error.error(ErrorCode.X_0F502)); 
 				} 
 				long length = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue(); 
 				if (dataLength == 0) { 
 				return ResultLob.newLobSetResponse(lobID, length); 
 				} 
 				
 
 LINES: 		| RowStoreAVLDisk.java: 219 - 230 || RowStoreAVLMemory.java: 130 - 141 |
 CLONE CLASS: 	public void commitPersistence(CachedObject row) {} 
 				public void commitRow(Session session, Row row, int changeAction, 
 				int txModel) { 
 				Object[] data = row.getData(); 
 				switch (changeAction) { 
 				case RowAction.ACTION_DELETE : 
 				database.logger.writeDeleteStatement(session, (Table) table, 
 				data); 
 				
 
 LINES: 		| Transfer.java: 443 - 452 || Transfer.java: 472 - 481 |
 CLONE CLASS: 	f.show(); 
 				String sFileName = f.getFile(); 
 				String Path      = f.getDirectory(); 
 				if ((sFileName == null) || (sFileName.equals(""))) { 
 				exit(); 
 				return; 
 				} else { 
 				
 
 LINES: 		| StatementDML.java: 32 - 38 || StatementSet.java: 32 - 38 |
 CLONE CLASS: 	package org.hsqldb; 
 				import org.hsqldb.HsqlNameManager.HsqlName; 
 				import org.hsqldb.ParserDQL.CompileContext; 
 				import org.hsqldb.error.Error; 
 				import org.hsqldb.error.ErrorCode; 
 				import org.hsqldb.lib.ArrayUtil; 
 				
 
 LINES: 		| ExpressionOp.java: 336 - 343 || ExpressionArithmetic.java: 225 - 232 |
 CLONE CLASS: 	sb.append(nodes[RIGHT].describe(session, blanks + 1)); 
 				sb.append(']'); 
 				} 
 				return sb.toString(); 
 				} 
 				public HsqlList resolveColumnReferences(Session session, 
 				
 
 LINES: 		| DatabaseInformationFull.java: 4899 - 4907 || DatabaseInformationFull.java: 7510 - 7518 |
 CLONE CLASS: 	addColumn(t, "GRANTOR", SQL_IDENTIFIER); 
 				addColumn(t, "GRANTEE", SQL_IDENTIFIER); 
 				addColumn(t, "UDT_CATALOG", SQL_IDENTIFIER); 
 				addColumn(t, "UDT_SCHEMA", SQL_IDENTIFIER); 
 				addColumn(t, "UDT_NAME", SQL_IDENTIFIER); 
 				addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA); 
 				addColumn(t, "IS_GRANTABLE", YES_OR_NO); 
 				HsqlName name = HsqlNameManager.newInfoSchemaObjectName( 
 				
 
 LINES: 		| DatabaseInformationFull.java: 5276 - 5283 || DatabaseInformationFull.java: 7581 - 7588 || DatabaseInformationFull.java: 7776 - 7783 |
 CLONE CLASS: 	t.insertSys(session, store, row); 
 				} catch (HsqlException e) {} 
 				} 
 				} 
 				} 
 				return t; 
 				} 
 				
 
 LINES: 		| HsqlDeque.java: 256 - 263 || HsqlArrayList.java: 196 - 204 |
 CLONE CLASS: 	return i; 
 				} 
 				} 
 				return -1; 
 				} 
 				public Object remove(int index) { 
 				
 
 LINES: 		| NodeAVLDisk.java: 332 - 340 || NodeAVLDisk.java: 359 - 367 || NodeAVLDisk.java: 382 - 390 || NodeAVLDisk.java: 407 - 415 |
 CLONE CLASS: 	NodeAVLDisk node = this; 
 				RowAVLDisk  row  = this.row; 
 				if (!row.keepInMemory(true)) { 
 				row  = (RowAVLDisk) store.get(this.row, true); 
 				node = (NodeAVLDisk) row.getNode(iId); 
 				} 
 				if (!row.isInMemory()) { 
 				
 
 LINES: 		| DatabaseInformationMain.java: 2951 - 2960 || DatabaseInformationMain.java: 3378 - 3387 |
 CLONE CLASS: 	Iterator tables; 
 				Table    table; 
 				Object[] row; 
 				final int grantor        = 0; 
 				final int grantee        = 1; 
 				final int table_catalog  = 2; 
 				final int table_schema   = 3; 
 				final int table_name     = 4; 
 				
 
 LINES: 		| TransactionManagerMVCC.java: 840 - 846 || TransactionManagerMV2PL.java: 558 - 564 |
 CLONE CLASS: 	if (index >= 0) { 
 				transactionCount--; 
 				liveTransactionTimestamps.remove(index); 
 				mergeExpiredTransactions(session); 
 				} 
 				} 
 				
 
 LINES: 		| ExpressionArrayAggregate.java: 389 - 401 || FunctionSQLInvoked.java: 322 - 334 |
 CLONE CLASS: 	} 
 				public Expression getCondition() { 
 				return condition; 
 				} 
 				public boolean hasCondition() { 
 				return condition != null && !condition.isTrue(); 
 				} 
 				public void setCondition(Expression e) { 
 				condition = e; 
 				} 
 				
 
 LINES: 		| TestUpdatableResultSets.java: 79 - 89 || TestUpdatableResultSets.java: 136 - 146 |
 CLONE CLASS: 	(byte) i, ' ', (byte) i 
 				}); 
 				ps.execute(); 
 				} 
 				connection.setAutoCommit(false); 
 				ResultSet rs = statement.executeQuery(select); 
 				while (rs.next()) { 
 				String s = rs.getString(2); 
 				
 
 LINES: 		| StatementExpression.java: 124 - 136 || StatementSet.java: 277 - 289 || StatementSimple.java: 113 - 125 |
 CLONE CLASS: 	sb.append(' '); 
 				} 
 				sb.append(Tokens.T_STATEMENT); 
 				return sb.toString(); 
 				} 
 				public Result execute(Session session) { 
 				Result result; 
 				try { 
 				
 
 LINES: 		| ParserDDL.java: 1779 - 1786 || ParserDDL.java: 4260 - 4267 |
 CLONE CLASS: 	break; 
 				default : 
 				end = true; 
 				break; 
 				} 
 				if (end) { 
 				
 
 LINES: 		| SqlFile.java: 6150 - 6156 || SqlFile.java: 6162 - 6168 || OdbcUtil.java: 257 - 263 || OdbcUtil.java: 269 - 275 |
 CLONE CLASS: 	if (c >= 'a' && c <= 'f') { 
 				octet += 10 + c - 'a'; 
 				} else if (c >= 'A' && c <= 'F') { 
 				octet += 10 + c - 'A'; 
 				} else if (c >= '0' && c <= '9') { 
 				octet += c - '0'; 
 				} else { 
 				
 
 LINES: 		| DataFileCache.java: 880 - 894 || TextCache.java: 251 - 263 |
 CLONE CLASS: 	} finally { 
 				writeLock.unlock(); 
 				} 
 				} 
 				public void remove(CachedObject object) { 
 				writeLock.lock(); 
 				try { 
 				
 
 LINES: 		| BitType.java: 273 - 278 || JDBCPreparedStatement.java: 4236 - 4241 |
 CLONE CLASS: 	} 
 				} 
 				case Types.TINYINT : 
 				case Types.SQL_SMALLINT : 
 				case Types.SQL_INTEGER : 
 				case Types.SQL_BIGINT : 
 				
 
 LINES: 		| SessionData.java: 125 - 132 || SessionData.java: 162 - 169 |
 CLONE CLASS: 	int required = command.rsProperties; 
 				int returned = result.rsProperties; 
 				if (required != returned) { 
 				if (ResultProperties.isReadOnly(required)) { 
 				returned = ResultProperties.addHoldable(returned, 
 				ResultProperties.isHoldable(required)); 
 				} else { 
 				
 
 LINES: 		| TextFileReader.java: 105 - 112 || TextFileReader.java: 198 - 205 |
 CLONE CLASS: 	if (!isReadOnly) { 
 				dataFile.write(TextFileSettings.BYTES_LINE_SEP, 0, 
 				TextFileSettings.BYTES_LINE_SEP.length); 
 				buffer.write(TextFileSettings.BYTES_LINE_SEP); 
 				} 
 				break; 
 				} 
 				
 
 LINES: 		| ParserDQL.java: 5385 - 5392 || ParserDQL.java: 5425 - 5432 |
 CLONE CLASS: 	if (token.tokenType == Tokens.COMMA) { 
 				readThis(Tokens.COMMA); 
 				} else if (token.tokenType == Tokens.CLOSEBRACKET) { 
 				readThis(Tokens.CLOSEBRACKET); 
 				break; 
 				} 
 				} while (true); 
 				
 
 LINES: 		| JDBCResultSet.java: 1823 - 1834 || JDBCResultSet.java: 1867 - 1874 |
 CLONE CLASS: 	columnIndex = i; 
 				break; 
 				} 
 				} 
 				} 
 				if (columnIndex < 0) { 
 				
 
 LINES: 		| DatabaseInformationFull.java: 1621 - 1631 || DatabaseInformationFull.java: 3872 - 3882 |
 CLONE CLASS: 	SchemaObject.INDEX); 
 				t.createPrimaryKeyConstraint(name, new int[]{ 0 }, true); 
 				return t; 
 				} 
 				Iterator grantees; 
 				Grantee  grantee; 
 				Object[] row; 
 				
 
 LINES: 		| ParserDDL.java: 4676 - 4683 || ParserCommand.java: 603 - 610 || ParserCommand.java: 640 - 647 || ParserDML.java: 835 - 842 || ParserDML.java: 876 - 883 || ParserDQL.java: 1005 - 1012 || ParserDQL.java: 1528 - 1535 |
 CLONE CLASS: 	read(); 
 				continue; 
 				} 
 				break; 
 				} 
 				} 
 				
 
 LINES: 		| Table.java: 2798 - 2803 || Table.java: 2840 - 2845 |
 CLONE CLASS: 	if (id == null) { 
 				id = (Number) identitySequence.getValueObject(); 
 				data[identityColumn] = id; 
 				} else { 
 				identitySequence.userUpdate(id.longValue()); 
 				} 
 				
 
 LINES: 		| ParserCommand.java: 544 - 554 || ParserCommand.java: 571 - 581 || ParserCommand.java: 1925 - 1935 |
 CLONE CLASS: 	} 
 				if (!e.getDataType().isCharacterType()) { 
 				throw Error.error(ErrorCode.X_0P000); 
 				} 
 				if (e.getType() != OpTypes.VALUE 
 				&& (e.getType() != OpTypes.SQL_FUNCTION 
 				|| !((FunctionSQL) e).isValueFunction())) { 
 				throw Error.error(ErrorCode.X_0P000); 
 				} 
 				
 
 LINES: 		| Expression.java: 725 - 731 || ExpressionColumn.java: 1082 - 1088 |
 CLONE CLASS: 	for (int i = 0; i < nodes.length; i++) { 
 				if (nodes[i] == null) { 
 				continue; 
 				} 
 				nodes[i] = nodes[i].replaceColumnReferences(range, list); 
 				} 
 				
 
 LINES: 		| TestBench.java: 327 - 340 || JDBCBench.java: 336 - 349 |
 CLONE CLASS: 	System.out.println("\n--------------------"); 
 				System.out.println("Time to execute " + transaction_count 
 				+ " transactions: " + completion_time 
 				+ " seconds."); 
 				System.out.println("Max/Min memory usage: " 
 				+ (MemoryWatcher.max / 1024) + " / " 
 				+ (MemoryWatcher.min / 1024) + " kb"); 
 				System.out.println(failed_transactions + " / " + transaction_count 
 				+ " failed to complete."); 
 				double rate = (transaction_count - failed_transactions) 
 				/ completion_time; 
 				System.out.println("Transaction rate: " + rate + " txn/sec."); 
 				
 
 LINES: 		| NodeAVLDiskLarge.java: 199 - 213 || NodeAVLDisk.java: 243 - 257 |
 CLONE CLASS: 	} 
 				if (node.iRight == NO_POS) { 
 				return null; 
 				} 
 				if (node.nRight == null || !node.nRight.isInMemory()) { 
 				node.nRight         = findNode(store, node.iRight); 
 				node.nRight.nParent = node; 
 				} 
 				return node.nRight; 
 				} 
 				NodeAVL getParent(PersistentStore store) { 
 				
 
 LINES: 		| Result.java: 1092 - 1099 || Result.java: 1116 - 1123 |
 CLONE CLASS: 	rowOut.writeByte(generateKeys); 
 				if (generateKeys == ResultConstants 
 				.RETURN_GENERATED_KEYS_COL_NAMES || generateKeys == ResultConstants 
 				.RETURN_GENERATED_KEYS_COL_INDEXES) { 
 				generatedMetaData.write(rowOut); 
 				} 
 				break; 
 				
 
 LINES: 		| ExpressionLogical.java: 1599 - 1606 || ExpressionLogical.java: 1669 - 1676 |
 CLONE CLASS: 	} 
 				switch (opType) { 
 				case OpTypes.MATCH_SIMPLE : 
 				case OpTypes.MATCH_PARTIAL : 
 				case OpTypes.MATCH_FULL : 
 				return Boolean.TRUE; 
 				
 
 LINES: 		| TransactionManagerMVCC.java: 462 - 471 || TransactionManagerMV2PL.java: 307 - 316 |
 CLONE CLASS: 	} 
 				public boolean canRead(Session session, PersistentStore store, Row row, 
 				int mode, int[] colMap) { 
 				RowAction action = row.rowAction; 
 				if (action == null) { 
 				return true; 
 				
 
 LINES: 		| OrderedIntHashSet.java: 149 - 159 || OrderedLongHashSet.java: 149 - 159 |
 CLONE CLASS: 	array[i] = value; 
 				} 
 				return array; 
 				} 
 				private void checkRange(int i) { 
 				if (i < 0 || i >= size()) { 
 				throw new IndexOutOfBoundsException(); 
 				} 
 				
 
 LINES: 		| RowOutputBinary180.java: 34 - 41 || RowInputBinary180.java: 35 - 42 |
 CLONE CLASS: 	import java.util.Calendar; 
 				import java.util.GregorianCalendar; 
 				import org.hsqldb.HsqlDateTime; 
 				import org.hsqldb.types.TimeData; 
 				import org.hsqldb.types.TimestampData; 
 				import org.hsqldb.types.Type; 
 				import org.hsqldb.types.Types; 
 				
 
 LINES: 		| BitMap.java: 124 - 131 || BitMap.java: 137 - 144 |
 CLONE CLASS: 	int word = map[windex]; 
 				if (set) { 
 				map[windex] = (word | mask); 
 				} else { 
 				mask        = ~mask; 
 				map[windex] = (word & mask); 
 				} 
 				
 
 LINES: 		| StatementCommand.java: 1254 - 1259 || StatementCommand.java: 1290 - 1295 || StatementDML.java: 1196 - 1201 |
 CLONE CLASS: 	if (!refTable.isEmpty(session)) { 
 				throw Error.error(ErrorCode.X_23504, 
 				refTable.getName().name); 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| TestBench.java: 558 - 567 || TestBench.java: 577 - 586 |
 CLONE CLASS: 	pstmt.executeUpdate(); 
 				pstmt.clearWarnings(); 
 				if (i % 100 == 0) { 
 				Conn.commit(); 
 				} 
 				} 
 				pstmt.close(); 
 				Conn.commit(); 
 				
 
 LINES: 		| JDBCSQLXML.java: 2519 - 2538 || JDBCSQLXML.java: 3107 - 3126 |
 CLONE CLASS: 	} 
 				public boolean isClosed() { 
 				return this.closed; 
 				} 
 				protected void checkClosed() throws SAXException { 
 				if (isClosed()) { 
 				throw new SAXException("content handler is closed."); 
 				} 
 				} 
 				
 
 LINES: 		| Grid.java: 345 - 355 || Tree.java: 319 - 329 |
 CLONE CLASS: 	return; 
 				} 
 				g.setColor(SystemColor.control); 
 				g.fillRect(iWidth, iHeight, iSbWidth, iSbHeight); 
 				if (iImage == null) { 
 				iImage = createImage(iWidth, iHeight); 
 				gImage = iImage.getGraphics(); 
 				gImage.setFont(fFont); 
 				
 
 LINES: 		| ParserDDL.java: 2989 - 2997 || ParserDDL.java: 3113 - 3121 |
 CLONE CLASS: 	constraintList.add(c); 
 				break; 
 				} 
 				case Tokens.CHECK : { 
 				read(); 
 				if (constName == null) { 
 				constName = database.nameManager.newAutoName("CT", 
 				
 
 LINES: 		| TestOdbcTypes.java: 1545 - 1563 || TestOdbcTypes.java: 1597 - 1615 |
 CLONE CLASS: 	if (rs != null) { 
 				rs.close(); 
 				} 
 				if (ps != null) { 
 				ps.close(); 
 				} } catch(Exception e) { 
 				} 
 				} 
 				assertEquals("Retrieved bye array length wrong (1)", 
 				expectedBytes.length, ba1.length); 
 				for (int i = 0; i < ba1.length; i++) { 
 				assertEquals("Byte " + i + " wrong (1)", expectedBytes[i], ba1[i]); 
 				} 
 				assertEquals("Retrieved bye array length wrong (2)", 
 				expectedBytes.length, ba2.length); 
 				for (int i = 0; i < ba2.length; i++) { 
 				assertEquals("Byte " + i + " wrong (2)", expectedBytes[i], ba2[i]); 
 				} 
 				} 
 				
 
 LINES: 		| NodeAVLDiskLarge.java: 32 - 43 || NodeAVLDisk.java: 71 - 82 |
 CLONE CLASS: 	package org.hsqldb.index; 
 				import java.io.IOException; 
 				import org.hsqldb.RowAVL; 
 				import org.hsqldb.RowAVLDisk; 
 				import org.hsqldb.error.Error; 
 				import org.hsqldb.error.ErrorCode; 
 				import org.hsqldb.lib.LongLookup; 
 				import org.hsqldb.persist.PersistentStore; 
 				import org.hsqldb.rowio.RowInputInterface; 
 				import org.hsqldb.rowio.RowOutputInterface; 
 				
 
 LINES: 		| BitType.java: 34 - 39 || CharacterType.java: 37 - 42 || BooleanType.java: 34 - 39 || NumberType.java: 37 - 42 || IntervalType.java: 37 - 42 || BinaryType.java: 34 - 39 || ClobType.java: 34 - 39 || DateTimeType.java: 41 - 46 |
 CLONE CLASS: 	import org.hsqldb.OpTypes; 
 				import org.hsqldb.Session; 
 				import org.hsqldb.SessionInterface; 
 				import org.hsqldb.Tokens; 
 				import org.hsqldb.error.Error; 
 				import org.hsqldb.error.ErrorCode; 
 				
 
 LINES: 		| DateTimeType.java: 284 - 299 || DateTimeType.java: 333 - 348 |
 CLONE CLASS: 	} 
 				if (!other.isDateTimeType()) { 
 				throw Error.error(ErrorCode.X_42562); 
 				} 
 				DateTimeType otherType = (DateTimeType) other; 
 				if (otherType.startIntervalType > endIntervalType 
 				|| startIntervalType > otherType.endIntervalType) { 
 				throw Error.error(ErrorCode.X_42562); 
 				} 
 				int     newType = typeCode; 
 				int     scale   = this.scale > otherType.scale ? this.scale 
 				
 
 LINES: 		| DatabaseInformationFull.java: 5115 - 5120 || DatabaseInformationFull.java: 5262 - 5267 || DatabaseInformationFull.java: 5701 - 5706 || DatabaseInformationFull.java: 5948 - 5953 |
 CLONE CLASS: 	row[specific_catalog] = database.getCatalogName().name; 
 				row[specific_schema]  = routine.getSchemaName().name; 
 				row[specific_name]    = routine.getSpecificName().name; 
 				row[routine_catalog]  = database.getCatalogName().name; 
 				row[routine_schema]   = routine.getSchemaName().name; 
 				row[routine_name]     = routine.getName().name; 
 				
 
 LINES: 		| TransactionManagerMVCC.java: 696 - 706 || TransactionManagerMV2PL.java: 532 - 542 |
 CLONE CLASS: 	session.isTransaction        = true; 
 				liveTransactionTimestamps.addLast( 
 				session.transactionTimestamp); 
 				transactionCount++; 
 				} 
 				} finally { 
 				writeLock.unlock(); 
 				} 
 				} 
 				
 
 LINES: 		| IntKeyHashMapConcurrent.java: 137 - 143 || OrderedIntHashSet.java: 105 - 111 || OrderedLongHashSet.java: 105 - 111 |
 CLONE CLASS: 	for (; i < array.length; i++) { 
 				if (!super.containsKey(array[i])) { 
 				break; 
 				} 
 				} 
 				return i; 
 				
 
 LINES: 		| ClobInputStream.java: 115 - 149 || BlobInputStream.java: 96 - 130 |
 CLONE CLASS: 	} 
 				public long skip(long n) throws IOException { 
 				checkClosed(); 
 				if (n <= 0) { 
 				return 0; 
 				} 
 				if (currentPosition + n > availableLength) { 
 				n = availableLength - currentPosition; 
 				} 
 				currentPosition += n; 
 				return n; 
 				} 
 				public int available() { 
 				long avail = availableLength - currentPosition; 
 				if (avail > Integer.MAX_VALUE) { 
 				return Integer.MAX_VALUE; 
 				} 
 				return (int) avail; 
 				} 
 				public void close() throws IOException { 
 				isClosed = true; 
 				} 
 				private void checkClosed() throws IOException { 
 				
 
 LINES: 		| TestBench.java: 457 - 464 || TestBench.java: 469 - 476 |
 CLONE CLASS: 	+ "filler      VARCHAR(84))"; 
 				if (createExtension.length() > 0) { 
 				Query += createExtension; 
 				} 
 				Stmt.execute(Query); 
 				Stmt.clearWarnings(); 
 				
 
 LINES: 		| DatabaseInformationFull.java: 4555 - 4561 || DatabaseInformationFull.java: 6633 - 6640 |
 CLONE CLASS: 	while (tables.hasNext()) { 
 				table = (Table) tables.next(); 
 				if (table.isView() 
 				|| !session.getGrantee().hasNonSelectTableRight(table)) { 
 				continue; 
 				} 
 				
 
 LINES: 		| JDBCResultSet.java: 1924 - 1937 || JDBCCallableStatement.java: 4266 - 4279 |
 CLONE CLASS: 	if (o == null) { 
 				return null; 
 				} 
 				if (o instanceof ClobDataID) { 
 				return ((ClobDataID) o).getCharacterStream(session); 
 				} else if (o instanceof Clob) { 
 				return ((Clob) o).getCharacterStream(); 
 				} else if (o instanceof String) { 
 				return new StringReader((String) o); 
 				} 
 				throw JDBCUtil.sqlException(ErrorCode.X_42561); 
 				} 
 				
 
 LINES: 		| LongKeyLongValueHashMap.java: 91 - 98 || IntKeyLongValueHashMap.java: 81 - 88 || LongValueHashMap.java: 100 - 107 |
 CLONE CLASS: 	if (lookup != -1) { 
 				value[0] = longValueTable[lookup]; 
 				return true; 
 				} 
 				return false; 
 				} 
 				
 
 LINES: 		| NodeAVLDiskLarge.java: 171 - 177 || NodeAVLDiskLarge.java: 193 - 199 || NodeAVLDiskLarge.java: 215 - 221 || NodeAVLDiskLarge.java: 236 - 242 || NodeAVLDiskLarge.java: 249 - 255 || NodeAVLDiskLarge.java: 262 - 268 |
 CLONE CLASS: 	NodeAVLDiskLarge node = this; 
 				RowAVLDisk  row  = this.row; 
 				if (!row.isInMemory()) { 
 				row  = (RowAVLDisk) store.get(this.row, false); 
 				node = (NodeAVLDiskLarge) row.getNode(iId); 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 3749 - 3756 || DatabaseInformationFull.java: 5126 - 5133 || DatabaseInformationFull.java: 5484 - 5491 || DatabaseInformationFull.java: 5591 - 5598 || DatabaseInformationFull.java: 5711 - 5718 || DatabaseInformationFull.java: 6847 - 6855 || DatabaseInformationFull.java: 6957 - 6964 || DatabaseInformationFull.java: 7066 - 7074 || DatabaseInformationFull.java: 7177 - 7185 || DatabaseInformationFull.java: 8123 - 8130 || DatabaseInformationFull.java: 8239 - 8246 || DatabaseInformationFull.java: 8358 - 8365 |
 CLONE CLASS: 	try { 
 				t.insertSys(session, store, row); 
 				} catch (HsqlException e) {} 
 				} 
 				} 
 				return t; 
 				} 
 				
 
 LINES: 		| Tokens.java: 32 - 2595 || Tokens.java: 32 - 2595 |
 CLONE CLASS: 	package org.hsqldb; 
 				import org.hsqldb.lib.IntKeyHashMap; 
 				import org.hsqldb.lib.IntValueHashMap; 
 				import org.hsqldb.lib.OrderedIntHashSet; 
 				public class Tokens { 
 				static final String        T_ABS              = "ABS"; 
 				public static final String T_ALL              = "ALL"; 
 				static final String        T_ALLOCATE         = "ALLOCATE"; 
 				public static final String T_ALTER            = "ALTER"; 
 				static final String        T_AND              = "AND"; 
 				public static final String T_ANY              = "ANY"; 
 				static final String        T_ARE              = "ARE"; 
 				public static final String T_ARRAY            = "ARRAY"; 
 				public static final String T_ARRAY_AGG        = "ARRAY_AGG"; 
 				public static final String T_AS               = "AS"; 
 				static final String        T_ASENSITIVE       = "ASENSITIVE"; 
 				static final String        T_ASYMMETRIC       = "ASYMMETRIC"; 
 				static final String        T_AT               = "AT"; 
 				static final String        T_ATOMIC           = "ATOMIC"; 
 				public static final String T_AUTHORIZATION    = "AUTHORIZATION"; 
 				public static final String T_AVG              = "AVG"; 
 				static final String        T_BEGIN            = "BEGIN"; 
 				static final String        T_BETWEEN          = "BETWEEN"; 
 				public static final String T_BIGINT           = "BIGINT"; 
 				public static final String T_BINARY           = "BINARY"; 
 				static final String        T_BIT_LENGTH       = "BIT_LENGTH"; 
 				public static final String T_BLOB             = "BLOB"; 
 				public static final String T_BOOLEAN          = "BOOLEAN"; 
 				static final String        T_BOTH             = "BOTH"; 
 				static final String        T_BY               = "BY"; 
 				public static final String T_CALL             = "CALL"; 
 				static final String        T_CALLED           = "CALLED"; 
 				static final String        T_CARDINALITY      = "CARDINALITY"; 
 				public static final String T_CASCADED         = "CASCADED"; 
 				static final String        T_CASE             = "CASE"; 
 				static final String        T_CAST             = "CAST"; 
 				static final String        T_CEIL             = "CEIL"; 
 				static final String        T_CEILING          = "CEILING"; 
 				public static final String T_CHAR             = "CHAR"; 
 				static final String        T_CHAR_LENGTH      = "CHAR_LENGTH"; 
 				public static final String T_CHARACTER        = "CHARACTER"; 
 				static final String        T_CHARACTER_LENGTH = "CHARACTER_LENGTH"; 
 				public static final String T_CHECK            = "CHECK"; 
 				public static final String T_CLOB             = "CLOB"; 
 				static final String        T_CLOSE            = "CLOSE"; 
 				static final String        T_COALESCE         = "COALESCE"; 
 				public static final String T_COLLATE          = "COLLATE"; 
 				static final String        T_COLLECT          = "COLLECT"; 
 				static final String        T_COLUMN           = "COLUMN"; 
 				public static final String T_COMMIT           = "COMMIT"; 
 				static final String        T_CONDITION        = "CONDIITON"; 
 				public static final String T_CONNECT          = "CONNECT"; 
 				public static final String T_CONSTRAINT       = "CONSTRAINT"; 
 				public static final String T_CONVERT          = "CONVERT"; 
 				static final String        T_CORR             = "CORR"; 
 				static final String        T_CORRESPONDING    = "CORRESPONDING"; 
 				static final String        T_COUNT            = "COUNT"; 
 				static final String        T_COVAR_POP        = "COVAR_POP"; 
 				static final String        T_COVAR_SAMP       = "COVAR_SAMP"; 
 				public static final String T_CREATE           = "CREATE"; 
 				static final String        T_CROSS            = "CROSS"; 
 				static final String        T_CUBE             = "CUBE"; 
 				static final String        T_CUME_DIST        = "CUME_DIST"; 
 				static final String        T_CURRENT          = "CURRENT"; 
 				static final String        T_CURRENT_CATALOG  = "CURRENT_CATALOG"; 
 				static final String        T_CURRENT_DATE     = "CURRENT_DATE"; 
 				static final String T_CURRENT_DEFAULT_TRANSFORM_GROUP = 
 				"CURRENT_DEFAULT_TRANSFORM_GROUP"; 
 				static final String T_CURRENT_PATH      = "CURRENT_PATH"; 
 				static final String T_CURRENT_ROLE      = "CURRENT_ROLE"; 
 				static final String T_CURRENT_SCHEMA    = "CURRENT_SCHEMA"; 
 				static final String T_CURRENT_TIME      = "CURRENT_TIME"; 
 				static final String T_CURRENT_TIMESTAMP = "CURRENT_TIMESTAMP"; 
 				static final String T_CURRENT_TRANSFORM_GROUP_FOR_TYPE = 
 				"CURRENT_TRANSFORM_GROUP_FOR_TYPE"; 
 				static final String        T_CURRENT_USER      = "CURRENT_USER"; 
 				static final String        T_CURSOR            = "CURSOR"; 
 				static final String        T_CYCLE             = "CYCLE"; 
 				public static final String T_DATE              = "DATE"; 
 				public static final String T_DAY               = "DAY"; 
 				static final String        T_DEALLOCATE        = "DEALLOCATE"; 
 				public static final String T_DEC               = "DEC"; 
 				public static final String T_DECIMAL           = "DECIMAL"; 
 				static final String        T_DECLARE           = "DECLARE"; 
 				public static final String T_DEFAULT           = "DEFAULT"; 
 				public static final String T_DELETE            = "DELETE"; 
 				static final String        T_DENSE_RANK        = "DENSE_RANK"; 
 				static final String        T_DEREF             = "DEREF"; 
 				static final String        T_DESCRIBE          = "DESCRIBE"; 
 				static final String        T_DETERMINISTIC     = "DETERMINISTIC"; 
 				static final String        T_DISCONNECT        = "DISCONNECT"; 
 				static final String        T_DISTINCT          = "DISTINCT"; 
 				public static final String T_DO                = "DO"; 
 				public static final String T_DOUBLE            = "DOUBLE"; 
 				static final String        T_DROP              = "DROP"; 
 				static final String        T_DYNAMIC           = "DYNAMIC"; 
 				static final String        T_EACH              = "EACH"; 
 				static final String        T_ELEMENT           = "ELEMENT"; 
 				static final String        T_ELSE              = "ELSE"; 
 				static final String        T_ELSEIF            = "ELSEIF"; 
 				static final String        T_END               = "END"; 
 				static final String        T_END_EXEC          = "END_EXEC"; 
 				static final String        T_ESCAPE            = "ESCAPE"; 
 				static final String        T_EVERY             = "EVERY"; 
 				static final String        T_EXCEPT            = "EXCEPT"; 
 				static final String        T_EXEC              = "EXEC"; 
 				public static final String T_EXECUTE           = "EXECUTE"; 
 				static final String        T_EXISTS            = "EXISTS"; 
 				static final String        T_EXP               = "EXP"; 
 				public static final String T_EXTERNAL          = "EXTERNAL"; 
 				static final String        T_EXTRACT           = "EXTRACT"; 
 				public static final String T_FALSE             = "FALSE"; 
 				static final String        T_FETCH             = "FETCH"; 
 				static final String        T_FILTER            = "FILTER"; 
 				static final String        T_FIRST_VALUE       = "FIRST_VALUE"; 
 				public static final String T_FLOAT             = "FLOAT"; 
 				static final String        T_FLOOR             = "FLOOR"; 
 				public static final String T_FOR               = "FOR"; 
 				public static final String T_FOREIGN           = "FOREIGN"; 
 				static final String        T_FREE              = "FREE"; 
 				public static final String T_FROM              = "FROM"; 
 				static final String        T_FULL              = "FULL"; 
 				public static final String T_FUNCTION          = "FUNCTION"; 
 				static final String        T_FUSION            = "FUSION"; 
 				public static final String T_GET               = "GET"; 
 				static final String        T_GLOBAL            = "GLOBAL"; 
 				public static final String T_GRANT             = "GRANT"; 
 				static final String        T_GROUP             = "GROUP"; 
 				static final String        T_GROUPING          = "GROUPING"; 
 				static final String        T_HANDLER           = "HANDLER"; 
 				static final String        T_HAVING            = "HAVING"; 
 				static final String        T_HOLD              = "HOLD"; 
 				public static final String T_HOUR              = "HOUR"; 
 				static final String        T_IDENTITY          = "IDENTITY"; 
 				static final String        T_IF                = "IF"; 
 				static final String        T_IMPORT            = "IMPORT"; 
 				static final String        T_IN                = "IN"; 
 				static final String        T_INDICATOR         = "INDICATOR"; 
 				static final String        T_INNER             = "INNER"; 
 				static final String        T_INOUT             = "INOUT"; 
 				static final String        T_INSENSITIVE       = "INSENSITIVE"; 
 				public static final String T_INSERT            = "INSERT"; 
 				public static final String T_INT               = "INT"; 
 				public static final String T_INTEGER           = "INTEGER"; 
 				static final String        T_INTERSECT         = "INTERSECT"; 
 				static final String        T_INTERSECTION      = "INTERSECTION"; 
 				public static final String T_INTERVAL          = "INTERVAL"; 
 				static final String        T_INTO              = "INTO"; 
 				static final String        T_ITERATE           = "ITERATE"; 
 				public static final String T_IS                = "IS"; 
 				static final String        T_JAR               = "JAR"; 
 				static final String        T_JOIN              = "JOIN"; 
 				static final String        T_LAG               = "LAG"; 
 				public static final String T_LANGUAGE          = "LANGUAGE"; 
 				static final String        T_LARGE             = "LARGE"; 
 				static final String        T_LAST_VALUE        = "LAST_VALUE"; 
 				static final String        T_LATERAL           = "LATERAL"; 
 				static final String        T_LEAD              = "LEAD"; 
 				static final String        T_LEADING           = "LEADING"; 
 				static final String        T_LEAVE             = "LEAVE"; 
 				static final String        T_LEFT              = "LEFT"; 
 				static final String        T_LIKE              = "LIKE"; 
 				static final String        T_LIKE_REGX         = "LIKE_REGX"; 
 				static final String        T_LN                = "LN"; 
 				public static final String T_LOCAL             = "LOCAL"; 
 				static final String        T_LOCALTIME         = "LOCALTIME"; 
 				static final String        T_LOCALTIMESTAMP    = "LOCALTIMESTAMP"; 
 				public static final String T_LOOP              = "LOOP"; 
 				static final String        T_LOWER             = "LOWER"; 
 				static final String        T_MATCH             = "MATCH"; 
 				static final String        T_MAX               = "MAX"; 
 				static final String        T_MAX_CARDINALITY   = "MAX_CARDINALITY"; 
 				static final String        T_MEMBER            = "MEMBER"; 
 				static final String        T_MERGE             = "MERGE"; 
 				static final String        T_METHOD            = "METHOD"; 
 				static final String        T_MIN               = "MIN"; 
 				public static final String T_MINUTE            = "MINUTE"; 
 				static final String        T_MOD               = "MOD"; 
 				static final String        T_MODIFIES          = "MODIFIES"; 
 				static final String        T_MODULE            = "MODULE"; 
 				public static final String T_MONTH             = "MONTH"; 
 				public static final String T_MULTISET          = "MULTISET"; 
 				static final String        T_NATIONAL          = "NATIONAL"; 
 				static final String        T_NATURAL           = "NATURAL"; 
 				static final String        T_NCHAR             = "NCHAR"; 
 				static final String        T_NCLOB             = "NCLOB"; 
 				static final String        T_NEW               = "NEW"; 
 				public static final String T_NO                = "NO"; 
 				public static final String T_NONE              = "NONE"; 
 				static final String        T_NORMALIZE         = "NORMALIZE"; 
 				static final String        T_NOT               = "NOT"; 
 				static final String        T_NTH_VALUE         = "NTH_VALUE"; 
 				static final String        T_NTILE             = "NTILE"; 
 				public static final String T_NULL              = "NULL"; 
 				public static final String T_NULLIF            = "NULLIF"; 
 				public static final String T_NUMERIC           = "NUMERIC"; 
 				static final String        T_OCCURRENCES_REGEX = "OCCURRENCES_REGEX"; 
 				static final String        T_OCTET_LENGTH      = "OCTET_LENGTH"; 
 				static final String        T_OF                = "OF"; 
 				static final String        T_OFFSET            = "OFFSET"; 
 				static final String        T_OLD               = "OLD"; 
 				public static final String T_ON                = "ON"; 
 				public static final String T_ONLY              = "ONLY"; 
 				static final String        T_OPEN              = "OPEN"; 
 				static final String        T_OR                = "OR"; 
 				public static final String T_ORDER             = "ORDER"; 
 				static final String        T_OUT               = "OUT"; 
 				static final String        T_OUTER             = "OUTER"; 
 				static final String        T_OVER              = "OVER"; 
 				static final String        T_OVERLAPS          = "OVERLAPS"; 
 				static final String        T_OVERLAY           = "OVERLAY"; 
 				static final String        T_PARAMETER         = "PARAMETER"; 
 				static final String        T_PARTITION         = "PARTITION"; 
 				static final String        T_PERCENT_RANK      = "PERCENT_RANK"; 
 				static final String        T_PERCENTILE_CONT   = "PERCENTILE_CONT"; 
 				static final String        T_PERCENTILE_DISC   = "PERCENTILE_DISC"; 
 				static final String        T_POSITION          = "POSITION"; 
 				static final String        T_POSITION_REGEX    = "POSITION_REGEX"; 
 				static final String        T_POWER             = "POWER"; 
 				static final String        T_PRECISION         = "PRECISION"; 
 				static final String        T_PREPARE           = "PREPARE"; 
 				static final String        T_PRIMARY           = "PRIMARY"; 
 				public static final String T_PROCEDURE         = "PROCEDURE"; 
 				static final String        T_RANGE             = "RANGE"; 
 				static final String        T_RANK              = "RANK"; 
 				static final String        T_READS             = "READS"; 
 				public static final String T_REAL              = "REAL"; 
 				static final String        T_RECURSIVE         = "RECURSIVE"; 
 				static final String        T_REF               = "REF"; 
 				public static final String T_REFERENCES        = "REFERENCES"; 
 				static final String        T_REFERENCING       = "REFERENCING"; 
 				static final String        T_REGR_AVGX         = "REGR_AVGX"; 
 				static final String        T_REGR_AVGY         = "REGR_AVGY"; 
 				static final String        T_REGR_COUNT        = "REGR_COUNT"; 
 				static final String        T_REGR_INTERCEPT    = "REGR_INTERCEPT"; 
 				static final String        T_REGR_R2           = "REGR_R2"; 
 				static final String        T_REGR_SLOPE        = "REGR_SLOPE"; 
 				static final String        T_REGR_SXX          = "REGR_SXX"; 
 				static final String        T_REGR_SXY          = "REGR_SXY"; 
 				static final String        T_REGR_SYY          = "REGR_SYY"; 
 				static final String        T_RELEASE           = "RELEASE"; 
 				static final String        T_REPEAT            = "REPEAT"; 
 				static final String        T_RESIGNAL          = "RESIGNAL"; 
 				public static final String T_RESULT            = "RESULT"; 
 				static final String        T_RETURN            = "RETURN"; 
 				static final String        T_RETURNS           = "RETURNS"; 
 				static final String        T_REVOKE            = "REVOKE"; 
 				static final String        T_RIGHT             = "RIGHT"; 
 				public static final String T_ROLLBACK          = "ROLLBACK"; 
 				static final String        T_ROLLUP            = "ROLLUP"; 
 				public static final String T_ROW               = "ROW"; 
 				static final String        T_ROW_NUMBER        = "ROW_NUMBER"; 
 				public static final String T_ROWS              = "ROWS"; 
 				static final String        T_SAVEPOINT         = "SAVEPOINT"; 
 				static final String        T_SCOPE             = "SCOPE"; 
 				static final String        T_SCROLL            = "SCROLL"; 
 				public static final String T_SEARCH            = "SEARCH"; 
 				public static final String T_SECOND            = "SECOND"; 
 				public static final String T_SELECT            = "SELECT"; 
 				static final String        T_SENSITIVE         = "SENSITIVE"; 
 				static final String        T_SESSION_USER      = "SESSION_USER"; 
 				public static final String T_SET               = "SET"; 
 				static final String        T_SIGNAL            = "SIGNAL"; 
 				static final String        T_SIMILAR           = "SIMILAR"; 
 				public static final String T_SMALLINT          = "SMALLINT"; 
 				static final String        T_SOME              = "SOME"; 
 				public static final String T_SPECIFIC          = "SPECIFIC"; 
 				static final String        T_SPECIFICTYPE      = "SPECIFICTYPE"; 
 				public static final String T_SQL               = "SQL"; 
 				static final String        T_SQLEXCEPTION      = "SQLEXCEPTION"; 
 				static final String        T_SQLSTATE          = "SQLSTATE"; 
 				static final String        T_SQLWARNING        = "SQLWARNING"; 
 				static final String        T_SQRT              = "SQRT"; 
 				static final String        T_START             = "START"; 
 				static final String        T_STATIC            = "STATIC"; 
 				static final String        T_STDDEV_POP        = "STDDEV_POP"; 
 				static final String        T_STDDEV_SAMP       = "STDDEV_SAMP"; 
 				static final String        T_SUBMULTISET       = "SUBMULTISET"; 
 				static final String        T_SUBSTRING         = "SUBSTRING"; 
 				static final String        T_SUBSTRING_REGEX   = "SUBSTRING_REGEX"; 
 				static final String        T_SUM               = "SUM"; 
 				static final String        T_SYMMETRIC         = "SYMMETRIC"; 
 				static final String        T_SYSTEM            = "SYSTEM"; 
 				static final String        T_SYSTEM_USER       = "SYSTEM_USER"; 
 				public static final String T_TABLE             = "TABLE"; 
 				static final String        T_TABLESAMPLE       = "TABLESAMPLE"; 
 				static final String        T_THEN              = "THEN"; 
 				public static final String T_TIME              = "TIME"; 
 				public static final String T_TIMESTAMP         = "TIMESTAMP"; 
 				public static final String T_TIMEZONE_HOUR     = "TIMEZONE_HOUR"; 
 				public static final String T_TIMEZONE_MINUTE   = "TIMEZONE_MINUTE"; 
 				public static final String T_TO                = "TO"; 
 				static final String        T_TRAILING          = "TRAILING"; 
 				public static final String T_TRANSLATE         = "TRANSLATE"; 
 				static final String        T_TRANSLATE_REGEX   = "TRANSLATE_REGEX"; 
 				static final String        T_TRANSLATION       = "TRANSLATION"; 
 				static final String        T_TREAT             = "TREAT"; 
 				public static final String T_TRIGGER           = "TRIGGER"; 
 				static final String        T_TRIM              = "TRIM"; 
 				static final String        T_TRIM_ARRAY        = "TRIM_ARRAY"; 
 				public static final String T_TRUE              = "TRUE"; 
 				public static final String T_TRUNCATE          = "TRUNCATE"; 
 				static final String        T_UESCAPE           = "UESCAPE"; 
 				static final String        T_UNION             = "UNION"; 
 				public static final String T_UNIQUE            = "UNIQUE"; 
 				public static final String T_UNKNOWN           = "UNKNOWN"; 
 				static final String        T_UNNEST            = "UNNEST"; 
 				static final String        T_UNTIL             = "UNTIL"; 
 				public static final String T_UPDATE            = "UPDATE"; 
 				static final String        T_UPPER             = "UPPER"; 
 				public static final String T_USER              = "USER"; 
 				public static final String T_USING             = "USING"; 
 				static final String        T_VALUE             = "VALUE"; 
 				static final String        T_VALUES            = "VALUES"; 
 				static final String        T_VAR_POP           = "VAR_POP"; 
 				static final String        T_VAR_SAMP          = "VAR_SAMP"; 
 				public static final String T_VARBINARY         = "VARBINARY"; 
 				public static final String T_VARCHAR           = "VARCHAR"; 
 				static final String        T_VARYING           = "VARYING"; 
 				static final String        T_WHEN              = "WHEN"; 
 				static final String        T_WHENEVER          = "WHENEVER"; 
 				static final String        T_WHERE             = "WHERE"; 
 				public static final String T_WHILE             = "WHILE"; 
 				static final String        T_WIDTH_BUCKET      = "WIDTH_BUCKET"; 
 				static final String        T_WINDOW            = "WINDOW"; 
 				public static final String T_WITH              = "WITH"; 
 				static final String        T_WITHIN            = "WITHIN"; 
 				static final String        T_WITHOUT           = "WITHOUT"; 
 				public static final String T_YEAR              = "YEAR"; 
 				static final String        T_ASTERISK       = "*"; 
 				public static final String T_COMMA          = ","; 
 				static final String        T_CIRCUMFLEX     = "^"; 
 				public static final String T_CLOSEBRACKET   = ")"; 
 				static final String        T_COLON          = ":"; 
 				static final String        T_CONCAT         = "||"; 
 				public static final String T_DIVIDE         = "/"; 
 				static final String        T_EQUALS         = "="; 
 				static final String        T_GREATER        = ">"; 
 				static final String        T_GREATER_EQUALS = ">="; 
 				public static final String T_LEFTBRACKET    = "["; 
 				static final String        T_LESS           = "<"; 
 				static final String        T_LESS_EQUALS    = "<="; 
 				static final String        T_PERCENT        = "%"; 
 				static final String        T_PLUS           = "+"; 
 				static final String        T_MINUS          = "-"; 
 				static final String        T_NOT_EQUALS     = "<>"; 
 				static final String        T_NOT_EQUALS_ALT = "!="; 
 				public static final String T_OPENBRACKET    = "("; 
 				static final String        T_QUESTION       = "?"; 
 				public static final String T_RIGHTBRACKET   = "]"; 
 				static final String        T_SEMICOLON      = ";"; 
 				static final String        T_DOUBLE_COLON   = "::"; 
 				static final String        T_A                    = "A"; 
 				static final String        T_ABSOLUTE             = "ABSOLUTE"; 
 				static final String        T_ACTION               = "ACTION"; 
 				static final String        T_ADA                  = "ADA"; 
 				static final String        T_ADD                  = "ADD"; 
 				static final String        T_ADMIN                = "ADMIN"; 
 				static final String        T_AFTER                = "AFTER"; 
 				static final String        T_ALWAYS               = "ALWAYS"; 
 				static final String        T_ASC                  = "ASC"; 
 				static final String        T_ASSERTION            = "ASSERTION"; 
 				static final String        T_ASSIGNMENT           = "ASSIGNMENT"; 
 				static final String        T_ATTRIBUTE            = "ATTRIBUTE"; 
 				static final String        T_ATTRIBUTES           = "ATTRIBUTES"; 
 				static final String        T_BEFORE               = "BEFORE"; 
 				static final String        T_BERNOULLI            = "BERNOULLI"; 
 				public static final String T_BIT                  = "BIT"; 
 				static final String        T_BITLENGTH            = "BITLENGTH"; 
 				static final String        T_BREADTH              = "BREADTH"; 
 				static final String        T_C                    = "C"; 
 				static final String        T_CASCADE              = "CASCADE"; 
 				public static final String T_CATALOG              = "CATALOG"; 
 				public static final String T_CATALOG_NAME         = "CATALOG_NAME"; 
 				static final String        T_CHAIN                = "CHAIN"; 
 				static final String T_CHARACTER_SET_CATALOG = "CHARACTER_SET_CATALOG"; 
 				static final String        T_CHARACTER_SET_NAME   = "CHARACTER_SET_NAME"; 
 				static final String        T_CHARACTER_SET_SCHEMA = "CHARACTER_SET_SCHEMA"; 
 				static final String        T_CHARACTERISTICS      = "CHARACTERISTICS"; 
 				static final String        T_CHARACTERS           = "CHARACTERS"; 
 				static final String        T_CLASS_ORIGIN         = "CLASS_ORIGIN"; 
 				static final String        T_COBOL                = "COBOL"; 
 				public static final String T_COLLATION            = "COLLATION"; 
 				static final String        T_COLLATION_CATALOG    = "COLLATION_CATALOG"; 
 				static final String        T_COLLATION_NAME       = "COLLATION_NAME"; 
 				static final String        T_COLLATION_SCHEMA     = "COLLATION_SCHEMA"; 
 				static final String        T_COLUMN_NAME          = "COLUMN_NAME"; 
 				static final String        T_COMMAND_FUNCTION     = "COMMAND_FUNCTION"; 
 				static final String T_COMMAND_FUNCTION_CODE = "COMMAND_FUNCTION_CODE"; 
 				public static final String T_COMMITTED            = "COMMITTED"; 
 				static final String        T_COMPARABLE           = "COMPARABLE"; 
 				static final String        T_CONDITION_IDENTIFIER = "CONDIITON_IDENTIFIER"; 
 				static final String        T_CONDITION_NUMBER     = "CONDITION_NUMBER"; 
 				static final String        T_CONNECTION_NAME      = "CONNECTION_NAME"; 
 				static final String        T_CONSTRAINT_CATALOG   = "CONSTRAINT_CATALOG"; 
 				static final String        T_CONSTRAINT_NAME      = "CONSTRAINT_NAME"; 
 				static final String        T_CONSTRAINT_SCHEMA    = "CONSTRAINT_SCHEMA"; 
 				static final String        T_CONSTRAINTS          = "CONSTRAINTS"; 
 				static final String        T_CONSTRUCTOR          = "CONSTRUCTOR"; 
 				static final String        T_CONTAINS             = "CONTAINS"; 
 				static final String        T_CONTINUE             = "CONTINUE"; 
 				static final String        T_CURRENT_COLLATION    = "CURRENT_COLLATION"; 
 				static final String        T_CURSOR_NAME          = "CURSOR_NAME"; 
 				public static final String T_DATA                 = "DATA"; 
 				static final String T_DATETIME_INTERVAL_CODE = "DATETIME_INTERVAL_CODE"; 
 				static final String T_DATETIME_INTERVAL_PRECISION = 
 				"DATETIME_INTERVAL_PRECISION"; 
 				public static final String T_DEFAULTS             = "DEFAULTS"; 
 				static final String        T_DEFERRABLE           = "DEFERRABLE"; 
 				static final String        T_DEFERRED             = "DEFERRED"; 
 				static final String        T_DEFINED              = "DEFINED"; 
 				static final String        T_DEFINER              = "DEFINER"; 
 				static final String        T_DEGREE               = "DEGREE"; 
 				static final String        T_DEPTH                = "DEPTH"; 
 				static final String        T_DERIVED              = "DERIVED"; 
 				static final String        T_DESC                 = "DESC"; 
 				static final String        T_DESCRIPTOR           = "DESCRIPTOR"; 
 				static final String        T_DIAGNOSTICS          = "DIAGNOSTICS"; 
 				static final String        T_DISPATCH             = "DISPATCH"; 
 				public static final String T_DOMAIN               = "DOMAIN"; 
 				static final String        T_DYNAMIC_FUNCTION     = "DYNAMIC_FUNCTION"; 
 				static final String T_DYNAMIC_FUNCTION_CODE = "DYNAMIC_FUNCTION_CODE"; 
 				static final String        T_EXCEPTION            = "EXCEPTION"; 
 				static final String        T_EXCLUDE              = "EXCLUDE"; 
 				static final String        T_EXCLUDING            = "EXCLUDING"; 
 				static final String        T_EXIT                 = "EXIT"; 
 				static final String        T_FINAL                = "FINAL"; 
 				public static final String T_FIRST                = "FIRST"; 
 				static final String        T_FOLLOWING            = "FOLLOWING"; 
 				static final String        T_FORTRAN              = "FORTRAN"; 
 				static final String        T_FOUND                = "FOUND"; 
 				public static final String T_G_FACTOR             = "G"; 
 				static final String        T_GENERATED            = "GENERATED"; 
 				static final String        T_GENERAL              = "GENERAL"; 
 				static final String        T_GO                   = "GO"; 
 				static final String        T_GOTO                 = "GOTO"; 
 				static final String        T_GRANTED              = "GRANTED"; 
 				static final String        T_HIERARCHY            = "HIERARCHY"; 
 				static final String        T_IMPLEMENTATION       = "IMPLEMENTATION"; 
 				static final String        T_INCLUDING            = "INCLUDING"; 
 				public static final String T_INCREMENT            = "INCREMENT"; 
 				static final String        T_INITIALLY            = "INITIALLY"; 
 				static final String        T_INPUT                = "INPUT"; 
 				static final String        T_INSTANCE             = "INSTANCE"; 
 				static final String        T_INSTANTIABLE         = "INSTANTIABLE"; 
 				static final String        T_INSTEAD              = "INSTEAD"; 
 				static final String        T_INTERFACE            = "INTERFACE"; 
 				static final String        T_INVOKER              = "INVOKER"; 
 				public static final String T_ISOLATION            = "ISOLATION"; 
 				public static final String T_JAVA                 = "JAVA"; 
 				public static final String T_K_FACTOR             = "K"; 
 				static final String        T_KEY                  = "KEY"; 
 				static final String        T_KEY_MEMBER           = "KEY_MEMBER"; 
 				static final String        T_KEY_TYPE             = "KEY_TYPE"; 
 				static final String        T_LAST                 = "LAST"; 
 				static final String        T_LENGTH               = "LENGTH"; 
 				public static final String T_LEVEL                = "LEVEL"; 
 				public static final String T_LIBRARY              = "LIBRARY"; 
 				static final String        T_LOCATOR              = "LOCATOR"; 
 				public static final String T_M_FACTOR             = "M"; 
 				static final String        T_MAP                  = "MAP"; 
 				static final String        T_MATCHED              = "MATCHED"; 
 				static final String        T_MAXVALUE             = "MAXVALUE"; 
 				static final String        T_MESSAGE_LENGTH       = "MESSAGE_LENGTH"; 
 				static final String        T_MESSAGE_OCTET_LENGTH = "MESSAGE_OCTET_LENGTH"; 
 				static final String        T_MESSAGE_TEXT         = "MESSAGE_TEXT"; 
 				static final String        T_MINVALUE             = "MINVALUE"; 
 				static final String        T_MORE                 = "MORE"; 
 				static final String        T_MUMPS                = "MUMPS"; 
 				public static final String T_NAME                 = "NAME"; 
 				public static final String T_NAMES                = "NAMES"; 
 				static final String        T_NESTING              = "NESTING"; 
 				static final String        T_NEXT                 = "NEXT"; 
 				static final String        T_NORMALIZED           = "NORMALIZED"; 
 				static final String        T_NULLABLE             = "NULLABLE"; 
 				public static final String T_NULLS                = "NULLS"; 
 				static final String        T_NUMBER               = "NUMBER"; 
 				public static final String T_OBJECT               = "OBJECT"; 
 				static final String        T_OCTETS               = "OCTETS"; 
 				static final String        T_OPTION               = "OPTION"; 
 				static final String        T_OPTIONS              = "OPTIONS"; 
 				static final String        T_ORDERING             = "ORDERING"; 
 				static final String        T_ORDINALITY           = "ORDINALITY"; 
 				static final String        T_OTHERS               = "OTHERS"; 
 				public static final String T_OVERRIDING           = "OVERRIDING"; 
 				public static final String T_P_FACTOR             = "P"; 
 				public static final String T_PAD                  = "PAD"; 
 				static final String        T_PARAMETER_MODE       = "PARAMETER_MODE"; 
 				static final String        T_PARAMETER_NAME       = "PARAMETER_NAME"; 
 				static final String T_PARAMETER_ORDINAL_POSITION = 
 				"PARAMETER_ORDINAL_POSITION"; 
 				static final String T_PARAMETER_SPECIFIC_CATALOG = 
 				"PARAMETER_SPECIFIC_CATALOG"; 
 				static final String T_PARAMETER_SPEC_NAME = "PARAMETER_SPECIFIC_NAME"; 
 				static final String T_PARAMETER_SPEC_SCHEMA = "PARAMETER_SPECIFIC_SCHEMA"; 
 				static final String        T_PARTIAL              = "PARTIAL"; 
 				static final String        T_PASCAL               = "PASCAL"; 
 				public static final String T_PATH                 = "PATH"; 
 				static final String        T_PLACING              = "PLACING"; 
 				static final String        T_PLI                  = "PLI"; 
 				static final String        T_PRECEDING            = "PRECEDING"; 
 				static final String        T_PRESERVE             = "PRESERVE"; 
 				static final String        T_PRIOR                = "PRIOR"; 
 				static final String        T_PRIVILEGES           = "PRIVILEGES"; 
 				public static final String T_PUBLIC               = "PUBLIC"; 
 				public static final String T_READ                 = "READ"; 
 				static final String        T_RELATIVE             = "RELATIVE"; 
 				static final String        T_REPEATABLE           = "REPEATABLE"; 
 				static final String        T_RESTART              = "RESTART"; 
 				static final String        T_RESET                = "RESET"; 
 				static final String        T_RETURNED_CARDINALITY = "RETURNED_CARDINALITY"; 
 				static final String        T_RETURNED_LENGTH      = "RETURNED_LENGTH"; 
 				static final String T_RETURNED_OCTET_LENGTH = "RETURNED_OCTET_LENGTH"; 
 				static final String        T_RETURNED_SQLSTATE    = "RETURNED_SQLSTATE"; 
 				public static final String T_ROLE                 = "ROLE"; 
 				public static final String T_ROUTINE              = "ROUTINE"; 
 				static final String        T_ROUTINE_CATALOG      = "ROUTINE_CATALOG"; 
 				static final String        T_ROUTINE_NAME         = "ROUTINE_NAME"; 
 				static final String        T_ROUTINE_SCHEMA       = "ROUTINE_SCHEMA"; 
 				static final String        T_ROW_COUNT            = "ROW_COUNT"; 
 				public static final String T_SCALE                = "SCALE"; 
 				public static final String T_SCHEMA               = "SCHEMA"; 
 				static final String        T_SCHEMA_NAME          = "SCHEMA_NAME"; 
 				static final String        T_SCOPE_CATALOG        = "SCOPE_CATALOG"; 
 				static final String        T_SCOPE_NAME           = "SCOPE_NAME"; 
 				static final String        T_SCOPE_SCHEMA         = "SCOPE_SCHEMA"; 
 				static final String        T_SECTION              = "SECTION"; 
 				static final String        T_SECURITY             = "SECURITY"; 
 				static final String        T_SELF                 = "SELF"; 
 				public static final String T_SEQUENCE             = "SEQUENCE"; 
 				static final String        T_SERIAL               = "SERIAL"; 
 				public static final String T_SERIALIZABLE         = "SERIALIZABLE"; 
 				public static final String T_SERVER               = "SERVER"; 
 				static final String        T_SERVER_NAME          = "SERVER_NAME"; 
 				public static final String T_SESSION              = "SESSION"; 
 				static final String        T_SETS                 = "SETS"; 
 				static final String        T_SIMPLE               = "SIMPLE"; 
 				public static final String T_SIZE                 = "SIZE"; 
 				static final String        T_SOURCE               = "SOURCE"; 
 				public static final String T_SPACE                = "SPACE"; 
 				static final String        T_SPECIFIC_NAME        = "SPECIFIC_NAME"; 
 				static final String        T_SQLDATA              = "SQLDATA"; 
 				static final String        T_STACKED              = "STACKED"; 
 				static final String        T_STATE                = "STATE"; 
 				static final String        T_STATEMENT            = "STATEMENT"; 
 				static final String        T_STRUCTURE            = "STRUCTURE"; 
 				static final String        T_STYLE                = "STYLE"; 
 				static final String        T_SUBCLASS_ORIGIN      = "SUBCLASS_ORIGIN"; 
 				public static final String T_T_FACTOR             = "T"; 
 				static final String        T_TABLE_NAME           = "TABLE_NAME"; 
 				static final String        T_TEMPORARY            = "TEMPORARY"; 
 				static final String        T_TIES                 = "TIES"; 
 				static final String        T_TOP_LEVEL_COUNT      = "TOP_LEVEL_COUNT"; 
 				public static final String T_TRANSACTION          = "TRANSACTION"; 
 				static final String T_TRANSACTS_COMMITTED = "TRANSACTIONS_COMMITTED"; 
 				static final String T_TRANSACTS_ROLLED_BACK = "TRANSACTIONS_ROLLED_BACK"; 
 				static final String        T_TRANSACTION_ACTIVE   = "TRANSACTION_ACTIVE"; 
 				static final String        T_TRANSFORM            = "TRANSFORM"; 
 				static final String        T_TRANSFORMS           = "TRANSFORMS"; 
 				static final String        T_TRIGGER_CATALOG      = "TRIGGER_CATALOG"; 
 				static final String        T_TRIGGER_NAME         = "TRIGGER_NAME"; 
 				static final String        T_TRIGGER_SCHEMA       = "TRIGGER_SCHEMA"; 
 				public static final String T_TYPE                 = "TYPE"; 
 				static final String        T_UNBOUNDED            = "UNBOUNDED"; 
 				static final String        T_UNCOMMITTED          = "UNCOMMITTED"; 
 				static final String        T_UNDER                = "UNDER"; 
 				static final String        T_UNDO                 = "UNDO"; 
 				static final String        T_UNNAMED              = "UNNAMED"; 
 				public static final String T_USAGE                = "USAGE"; 
 				static final String T_USER_DEFINED_TYPE_CATALOG = 
 				"USER_DEFINED_TYPE_CATALOG"; 
 				static final String T_USER_DEFINED_TYPE_CODE = "USER_DEFINED_TYPE_CODE"; 
 				static final String T_USER_DEFINED_TYPE_NAME = "USER_DEFINED_TYPE_NAME"; 
 				static final String T_USER_DEFINED_TYPE_SCHEMA = 
 				"USER_DEFINED_TYPE_SCHEMA"; 
 				static final String        T_VIEW    = "VIEW"; 
 				static final String        T_WORK    = "WORK"; 
 				public static final String T_WRAPPER = "WRAPPER"; 
 				public static final String T_WRITE   = "WRITE"; 
 				public static final String T_ZONE    = "ZONE"; 
 				static final String        T_ALIAS                = "ALIAS"; 
 				static final String        T_AGGREGATE            = "AGGREGATE"; 
 				public static final String T_AUTHENTICATION       = "AUTHENTICATION"; 
 				static final String        T_AUTO_INCREMENT       = "AUTO_INCREMENT"; 
 				static final String        T_AUTOCOMMIT           = "AUTOCOMMIT"; 
 				public static final String T_BACKUP               = "BACKUP"; 
 				static final String        T_BIGSERIAL            = "BIGSERIAL"; 
 				static final String        T_BINARY_DOUBLE        = "BINARY_DOUBLE"; 
 				static final String        T_BINARY_FLOAT         = "BINARY_FLOAT"; 
 				static final String        T_BODY                 = "BODY"; 
 				static final String        T_BYTE                 = "BYTE"; 
 				public static final String T_CACHE                = "CACHE"; 
 				static final String        T_CACHED               = "CACHED"; 
 				static final String        T_CASEWHEN             = "CASEWHEN"; 
 				static final String        T_CHECKPOINT           = "CHECKPOINT"; 
 				static final String        T_CITEXT               = "CITEXT"; 
 				static final String        T_CLASS                = "CLASS"; 
 				static final String        T_CLUSTERED            = "CLUSTERED"; 
 				static final String        T_COMMENT              = "COMMENT"; 
 				static final String        T_COMPACT              = "COMPACT"; 
 				public static final String T_COMPRESSED           = "COMPRESSED"; 
 				public static final String T_CONFLICT             = "CONFLICT"; 
 				public static final String T_CONTROL              = "CONTROL"; 
 				static final String        T_CURDATE              = "CURDATE"; 
 				static final String        T_CURRVAL              = "CURRVAL"; 
 				static final String        T_CURTIME              = "CURTIME"; 
 				public static final String T_DATABASE             = "DATABASE"; 
 				public static final String T_DATETIME             = "DATETIME"; 
 				public static final String T_DB2                  = "DB2"; 
 				public static final String T_DEADLOCK             = "DEADLOCK"; 
 				public static final String T_DEFRAG               = "DEFRAG"; 
 				public static final String T_DELAY                = "DELAY"; 
 				public static final String T_DIGEST               = "DIGEST"; 
 				static final String        T_DUAL                 = "DUAL"; 
 				static final String        T_EXPLAIN              = "EXPLAIN"; 
 				public static final String T_EVENT                = "EVENT"; 
 				static final String        T_FILE                 = "FILE"; 
 				public static final String T_FILES                = "FILES"; 
 				static final String        T_FOLD                 = "FOLD"; 
 				static final String        T_FORMAT               = "FORMAT"; 
 				static final String        T_GROUP_CONCAT         = "GROUP_CONCAT"; 
 				static final String        T_HEADER               = "HEADER"; 
 				static final String        T_IFNULL               = "IFNULL"; 
 				public static final String T_IGNORECASE           = "IGNORECASE"; 
 				static final String        T_IMMEDIATELY          = "IMMEDIATELY"; 
 				public static final String T_INDEX                = "INDEX"; 
 				public static final String T_INDEXER              = "INDEXER"; 
 				public static final String T_INITIAL              = "INITIAL"; 
 				public static final String T_INTEGRITY            = "INTEGRITY"; 
 				static final String        T_IS_AUTOCOMMIT        = "IS_AUTOCOMMIT"; 
 				static final String        T_IS_READONLY_DATABASE = "IS_READONLY_DATABASE"; 
 				static final String T_IS_READONLY_DATABASE_FILES = 
 				"IS_READONLY_DATABASE_FILES"; 
 				static final String        T_IS_READONLY_SESSION  = "IS_READONLY_SESSION"; 
 				static final String        T_ISNULL               = "ISNULL"; 
 				static final String        T_LASTVAL              = "LASTVAL"; 
 				static final String        T_LIMIT                = "LIMIT"; 
 				public static final String T_LOB                  = "LOB"; 
 				public static final String T_LOCK                 = "LOCK"; 
 				public static final String T_LOCKS                = "LOCKS"; 
 				public static final String T_LONG                 = "LONG"; 
 				public static final String T_LONGBLOB             = "LONGBLOB"; 
 				public static final String T_LONGTEXT             = "LONGTEXT"; 
 				public static final String T_LONGVAR              = "LONGVAR"; 
 				public static final String T_LONGVARBINARY        = "LONGVARBINARY"; 
 				public static final String T_LONGVARCHAR          = "LONGVARCHAR"; 
 				static final String        T_MAXROWS              = "MAXROWS"; 
 				static final String        T_MEDIAN               = "MEDIAN"; 
 				static final String        T_MEDIUMBLOB           = "MEDIUMBLOB"; 
 				static final String        T_MEDIUMTEXT           = "MEDIUMTEXT"; 
 				public static final String T_MEMORY               = "MEMORY"; 
 				public static final String T_MILLIS               = "MILLIS"; 
 				static final String        T_MINUS_EXCEPT         = "MINUS"; 
 				public static final String T_MSS                  = "MSS"; 
 				public static final String T_MVCC                 = "MVCC"; 
 				public static final String T_MVLOCKS              = "MVLOCKS"; 
 				public static final String T_MYS                  = "MYS"; 
 				public static final String T_NAN                  = "NAN"; 
 				static final String        T_NEXTVAL              = "NEXTVAL"; 
 				public static final String T_NIO                  = "NIO"; 
 				static final String        T_NOWAIT               = "NOWAIT"; 
 				public static final String T_NVARCHAR             = "NVARCHAR"; 
 				public static final String T_NVARCHAR2            = "NVARCHAR2"; 
 				static final String        T_NVL                  = "NVL"; 
 				static final String        T_NVL2                 = "NVL2"; 
 				static final String        T_OCTETLENGTH          = "OCTETLENGTH"; 
 				static final String        T_OFF                  = "OFF"; 
 				public static final String T_OTHER                = "OTHER"; 
 				public static final String T_ORA                  = "ORA"; 
 				public static final String T_PASSWORD             = "PASSWORD"; 
 				static final String        T_PLAN                 = "PLAN"; 
 				public static final String T_PGS                  = "PGS"; 
 				static final String        T_PREVVAL              = "PREVVAL"; 
 				static final String        T_PROPERTY             = "PROPERTY"; 
 				static final String        T_QUEUE                = "QUEUE"; 
 				static final String        T_RAW                  = "RAW"; 
 				static final String        T_READONLY             = "READONLY"; 
 				static final String        T_REFERENTIAL          = "REFERENTIAL"; 
 				public static final String T_REGULAR              = "REGULAR"; 
 				static final String        T_RENAME               = "RENAME"; 
 				static final String        T_RESTRICT             = "RESTRICT"; 
 				static final String        T_ROWNUM               = "ROWNUM"; 
 				static final String        T_SCRIPT               = "SCRIPT"; 
 				static final String        T_SEPARATOR            = "SEPARATOR"; 
 				static final String        T_BLOCKING             = "BLOCKING"; 
 				static final String        T_SHUTDOWN             = "SHUTDOWN"; 
 				static final String        T_SQL_TSI_DAY          = "SQL_TSI_DAY"; 
 				static final String        T_SQL_TSI_FRAC_SECOND  = "SQL_TSI_FRAC_SECOND"; 
 				static final String        T_SQL_TSI_MILLI_SECOND = "SQL_TSI_MILLI_SECOND"; 
 				static final String        T_SQL_TSI_HOUR         = "SQL_TSI_HOUR"; 
 				static final String        T_SQL_TSI_MINUTE       = "SQL_TSI_MINUTE"; 
 				static final String        T_SQL_TSI_MONTH        = "SQL_TSI_MONTH"; 
 				static final String        T_SQL_TSI_QUARTER      = "SQL_TSI_QUARTER"; 
 				static final String        T_SQL_TSI_SECOND       = "SQL_TSI_SECOND"; 
 				static final String        T_SQL_TSI_WEEK         = "SQL_TSI_WEEK"; 
 				static final String        T_SQL_TSI_YEAR         = "SQL_TSI_YEAR"; 
 				static final String        T_SQL_BIGINT           = "SQL_BIGINT"; 
 				static final String        T_SQL_BINARY           = "SQL_BINARY"; 
 				static final String        T_SQL_BIT              = "SQL_BIT"; 
 				static final String        T_SQL_BLOB             = "SQL_BLOB"; 
 				static final String        T_SQL_BOOLEAN          = "SQL_BOOLEAN"; 
 				static final String        T_SQL_CHAR             = "SQL_CHAR"; 
 				static final String        T_SQL_CLOB             = "SQL_CLOB"; 
 				static final String        T_SQL_DATE             = "SQL_DATE"; 
 				static final String        T_SQL_DECIMAL          = "SQL_DECIMAL"; 
 				static final String        T_SQL_DATALINK         = "SQL_DATALINK"; 
 				static final String        T_SQL_DOUBLE           = "SQL_DOUBLE"; 
 				static final String        T_SQL_FLOAT            = "SQL_FLOAT"; 
 				static final String        T_SQL_INTEGER          = "SQL_INTEGER"; 
 				static final String        T_SQL_LONGVARBINARY    = "SQL_LONGVARBINARY"; 
 				static final String        T_SQL_LONGNVARCHAR     = "SQL_LONGNVARCHAR"; 
 				static final String        T_SQL_LONGVARCHAR      = "SQL_LONGVARCHAR"; 
 				static final String        T_SQL_NCHAR            = "SQL_NCHAR"; 
 				static final String        T_SQL_NCLOB            = "SQL_NCLOB"; 
 				static final String        T_SQL_NUMERIC          = "SQL_NUMERIC"; 
 				static final String        T_SQL_NVARCHAR         = "SQL_NVARCHAR"; 
 				static final String        T_SQL_REAL             = "SQL_REAL"; 
 				static final String        T_SQL_ROWID            = "SQL_ROWID"; 
 				static final String        T_SQL_SQLXML           = "SQL_SQLXML"; 
 				static final String        T_SQL_SMALLINT         = "SQL_SMALLINT"; 
 				static final String        T_SQL_TIME             = "SQL_TIME"; 
 				static final String        T_SQL_TIMESTAMP        = "SQL_TIMESTAMP"; 
 				static final String        T_SQL_TINYINT          = "SQL_TINYINT"; 
 				static final String        T_SQL_VARBINARY        = "SQL_VARBINARY"; 
 				static final String        T_SQL_VARCHAR          = "SQL_VARCHAR"; 
 				public static final String T_SYNTAX               = "SYNTAX"; 
 				public static final String T_TDC                  = "TDC"; 
 				public static final String T_TEMP                 = "TEMP"; 
 				public static final String T_TEXT                 = "TEXT"; 
 				static final String        T_TIMESTAMP_WITH_ZONE  = "TIMESTAMP_WITH_ZONE"; 
 				static final String        T_TIMESTAMPADD         = "TIMESTAMPADD"; 
 				static final String        T_TIMESTAMPDIFF        = "TIMESTAMPDIFF"; 
 				public static final String T_TINYBLOB             = "TINYBLOB"; 
 				public static final String T_TINYINT              = "TINYINT"; 
 				public static final String T_TINYTEXT             = "TINYTEXT"; 
 				static final String        T_TOP                  = "TOP"; 
 				public static final String T_TTI                  = "TTI"; 
 				public static final String T_TYPES                = "TYPES"; 
 				public static final String T_VARCHAR_IGNORECASE   = "VARCHAR_IGNORECASE"; 
 				public static final String T_VARCHAR2             = "VARCHAR2"; 
 				public static final String T_UTF16                = "UTF16"; 
 				static final String        T_WRITE_DELAY          = "WRITE_DELAY"; 
 				public static final String T_YES                  = "YES"; 
 				public static final String T_DAY_NAME     = "DAY_NAME"; 
 				public static final String T_MONTH_NAME   = "MONTH_NAME"; 
 				public static final String T_QUARTER      = "QUARTER"; 
 				public static final String T_DAY_OF_WEEK  = "DAY_OF_WEEK"; 
 				public static final String T_DAY_OF_MONTH = "DAY_OF_MONTH"; 
 				public static final String T_DAY_OF_YEAR  = "DAY_OF_YEAR"; 
 				public static final String T_WEEK_OF_YEAR = "WEEK_OF_YEAR"; 
 				static final String        T_DAYNAME      = "DAYNAME"; 
 				static final String        T_MONTHNAME    = "MONTHNAME"; 
 				static final String        T_DAYOFMONTH   = "DAYOFMONTH"; 
 				static final String        T_DAYOFWEEK    = "DAYOFWEEK"; 
 				static final String        T_DAYOFYEAR    = "DAYOFYEAR"; 
 				static final String        T_WEEK         = "WEEK"; 
 				static final String        T_DAYS         = "DAYS"; 
 				static final String        T_ACOS             = "ACOS"; 
 				static final String        T_ACTION_ID        = "ACTION_ID"; 
 				static final String        T_ADD_MONTHS       = "ADD_MONTHS"; 
 				static final String        T_ARRAY_SORT       = "ARRAY_SORT"; 
 				static final String        T_ASCII            = "ASCII"; 
 				static final String        T_ASIN             = "ASIN"; 
 				static final String        T_ATAN             = "ATAN"; 
 				static final String        T_ATAN2            = "ATAN2"; 
 				static final String        T_BITAND           = "BITAND"; 
 				static final String        T_BITANDNOT        = "BITANDNOT"; 
 				static final String        T_BITNOT           = "BITNOT"; 
 				static final String        T_BITOR            = "BITOR"; 
 				static final String        T_BITXOR           = "BITXOR"; 
 				public static final String T_CONCAT_WORD      = "CONCAT"; 
 				static final String        T_CONCAT_WS        = "CONCAT_WS"; 
 				static final String        T_CHR              = "CHR"; 
 				static final String        T_COS              = "COS"; 
 				static final String        T_COT              = "COT"; 
 				static final String        T_CRYPT_KEY        = "CRYPT_KEY"; 
 				static final String        T_DATABASE_NAME    = "DATABASE_NAME"; 
 				static final String        T_DATE_ADD         = "DATE_ADD"; 
 				static final String        T_DATE_SUB         = "DATE_SUB"; 
 				static final String        T_DATEADD          = "DATEADD"; 
 				static final String        T_DATEDIFF         = "DATEDIFF"; 
 				static final String        T_DBTIMEZONE       = "DBTIMEZONE"; 
 				static final String        T_DECODE           = "DECODE"; 
 				static final String        T_DEGREES          = "DEGREES"; 
 				static final String        T_DIFFERENCE       = "DIFFERENCE"; 
 				static final String        T_DMOD             = "DMOD"; 
 				static final String        T_FROM_TZ          = "FROM_TZ"; 
 				public static final String T_GC               = "GC"; 
 				static final String        T_GREATEST         = "GREATEST"; 
 				static final String        T_HEXTORAW         = "HEXTORAW"; 
 				static final String        T_INSTR            = "INSTR"; 
 				static final String        T_LCASE            = "LCASE"; 
 				static final String        T_LEAST            = "LEAST"; 
 				static final String        T_LOAD_FILE        = "LOAD_FILE"; 
 				static final String        T_LOCATE           = "LOCATE"; 
 				public static final String T_LOG              = "LOG"; 
 				static final String        T_LOG10            = "LOG10"; 
 				static final String        T_LAST_DAY         = "LAST_DAY"; 
 				static final String        T_LPAD             = "LPAD"; 
 				static final String        T_LTRIM            = "LTRIM"; 
 				static final String        T_MONTHS_BETWEEN   = "MONTHS_BETWEEN"; 
 				static final String        T_NEXT_DAY         = "NEXT_DAY"; 
 				static final String        T_NEW_TIME         = "NEW_TIME"; 
 				static final String        T_NOW              = "NOW"; 
 				static final String        T_NUMTODSINTERVAL  = "NUMTODSINTERVAL"; 
 				static final String        T_NUMTOYMINTERVAL  = "NUMTOYMINTERVAL"; 
 				static final String        T_PI               = "PI"; 
 				static final String        T_POSITION_ARRAY   = "POSITION_ARRAY"; 
 				static final String        T_RADIANS          = "RADIANS"; 
 				static final String        T_RAND             = "RAND"; 
 				static final String        T_RAWTOHEX         = "RAWTOHEX"; 
 				static final String        T_REGEXP_MATCHES   = "REGEXP_MATCHES"; 
 				static final String        T_REGEXP_SUBSTRING = "REGEXP_SUBSTRING"; 
 				static final String T_REGEXP_SUBSTRING_ARRAY  = "REGEXP_SUBSTRING_ARRAY"; 
 				static final String        T_REPLACE          = "REPLACE"; 
 				static final String        T_REVERSE          = "REVERSE"; 
 				static final String        T_ROUND            = "ROUND"; 
 				static final String        T_ROUNDMAGIC       = "ROUNDMAGIC"; 
 				static final String        T_RPAD             = "RPAD"; 
 				static final String        T_RTRIM            = "RTRIM"; 
 				public static final String T_SECONDS_MIDNIGHT = "SECONDS_SINCE_MIDNIGHT"; 
 				static final String        T_SESSIONTIMEZONE  = "SESSIONTIMEZONE"; 
 				static final String        T_SIGN             = "SIGN"; 
 				static final String        T_SIN              = "SIN"; 
 				static final String        T_SORT_ARRAY       = "SORT_ARRAY"; 
 				static final String        T_SOUNDEX          = "SOUNDEX"; 
 				static final String        T_SUBSTR           = "SUBSTR"; 
 				static final String        T_SYS_EXTRACT_UTC  = "SYS_EXTRACT_UTC"; 
 				static final String        T_SYSDATE          = "SYSDATE"; 
 				static final String        T_SYSTIMESTAMP     = "SYSTIMESTAMP"; 
 				static final String        T_TAN              = "TAN"; 
 				static final String        T_TO_CHAR          = "TO_CHAR"; 
 				static final String        T_TO_DATE          = "TO_DATE"; 
 				static final String        T_TO_DSINTERVAL    = "TO_DSINTERVAL"; 
 				static final String        T_TO_YMINTERVAL    = "TO_YMINTERVAL"; 
 				static final String        T_TO_NUMBER        = "TO_NUMBER"; 
 				static final String        T_TO_TIMESTAMP     = "TO_TIMESTAMP"; 
 				static final String        T_TO_TIMESTAMP_TZ  = "TO_TIMESTAMP_TZ"; 
 				static final String        T_TZ_OFFSET        = "TZ_OFFSET"; 
 				static final String        T_TRANSACTION_SIZE = "TRANSACTION_SIZE"; 
 				static final String        T_TRANSACTION_ID   = "TRANSACTION_ID"; 
 				static final String        T_TRUNC            = "TRUNC"; 
 				static final String        T_TODAY            = "TODAY"; 
 				static final String        T_UCASE            = "UCASE"; 
 				static final String        T_UUID             = "UUID"; 
 				static final String        T_UNIX_MILLIS      = "UNIX_MILLIS"; 
 				static final String        T_UNIX_TIMESTAMP   = "UNIX_TIMESTAMP"; 
 				static final String T_ISOLATION_LEVEL         = "ISOLATION_LEVEL"; 
 				static final String T_SESSION_ISOLATION_LEVEL = "SESSION_ISOLATION_LEVEL"; 
 				static final String T_DATABASE_ISOLATION_LEVEL = 
 				"DATABASE_ISOLATION_LEVEL"; 
 				static final String T_TRANSACTION_CONTROL = "TRANSACTION_CONTROL"; 
 				static final String T_TIMEZONE            = "TIMEZONE"; 
 				static final String T_SESSION_TIMEZONE    = "SESSION_TIMEZONE"; 
 				static final String T_DATABASE_TIMEZONE   = "DATABASE_TIMEZONE"; 
 				static final String T_DATABASE_VERSION    = "DATABASE_VERSION"; 
 				static final String T_SESSION_ID          = "SESSION_ID"; 
 				static final String T_LOB_ID              = "LOB_ID"; 
 				static final String T_SEQUENCE_ARRAY      = "SEQUENCE_ARRAY"; 
 				public static final int ABS                              = 1; 
 				public static final int ALL                              = 2; 
 				public static final int ALLOCATE                         = 3; 
 				public static final int ALTER                            = 4; 
 				public static final int AND                              = 5; 
 				public static final int ANY                              = 6; 
 				public static final int ARE                              = 7; 
 				public static final int ARRAY                            = 8; 
 				public static final int ARRAY_AGG                        = 9; 
 				public static final int AS                               = 10; 
 				public static final int ASENSITIVE                       = 11; 
 				public static final int ASYMMETRIC                       = 12; 
 				public static final int AT                               = 13; 
 				public static final int ATOMIC                           = 14; 
 				public static final int AUTHORIZATION                    = 15; 
 				public static final int AVG                              = 16; 
 				public static final int BEGIN                            = 17; 
 				public static final int BETWEEN                          = 18; 
 				public static final int BIGINT                           = 19; 
 				public static final int BINARY                           = 20; 
 				public static final int BLOB                             = 21; 
 				public static final int BOOLEAN                          = 22; 
 				public static final int BOTH                             = 23; 
 				public static final int BY                               = 24; 
 				public static final int CALL                             = 25; 
 				public static final int CALLED                           = 26; 
 				public static final int CARDINALITY                      = 27; 
 				public static final int CASCADED                         = 28; 
 				public static final int CASE                             = 29; 
 				public static final int CAST                             = 30; 
 				public static final int CEIL                             = 31; 
 				public static final int CEILING                          = 32; 
 				public static final int CHAR                             = 33; 
 				public static final int CHAR_LENGTH                      = 34; 
 				public static final int CHARACTER                        = 35; 
 				public static final int CHARACTER_LENGTH                 = 36; 
 				public static final int CHECK                            = 37; 
 				public static final int CLOB                             = 38; 
 				public static final int CLOSE                            = 39; 
 				public static final int COALESCE                         = 40; 
 				public static final int COLLATE                          = 41; 
 				public static final int COLLECT                          = 42; 
 				public static final int COLUMN                           = 43; 
 				public static final int COMMIT                           = 44; 
 				public static final int COMPARABLE                       = 45; 
 				public static final int CONDITION                        = 46; 
 				public static final int CONNECT                          = 47; 
 				public static final int CONSTRAINT                       = 48; 
 				public static final int CONVERT                          = 49; 
 				public static final int CORR                             = 50; 
 				public static final int CORRESPONDING                    = 51; 
 				public static final int COUNT                            = 52; 
 				public static final int COVAR_POP                        = 53; 
 				public static final int COVAR_SAMP                       = 54; 
 				public static final int CREATE                           = 55; 
 				public static final int CROSS                            = 56; 
 				public static final int CUBE                             = 57; 
 				public static final int CUME_DIST                        = 58; 
 				public static final int CURRENT                          = 59; 
 				public static final int CURRENT_CATALOG                  = 60; 
 				public static final int CURRENT_DATE                     = 61; 
 				public static final int CURRENT_DEFAULT_TRANSFORM_GROUP  = 62; 
 				public static final int CURRENT_PATH                     = 63; 
 				public static final int CURRENT_ROLE                     = 64; 
 				public static final int CURRENT_SCHEMA                   = 65; 
 				public static final int CURRENT_TIME                     = 66; 
 				public static final int CURRENT_TIMESTAMP                = 67; 
 				public static final int CURRENT_TRANSFORM_GROUP_FOR_TYPE = 68; 
 				public static final int CURRENT_USER                     = 69; 
 				public static final int CURSOR                           = 70; 
 				public static final int CYCLE                            = 71; 
 				public static final int DATE                             = 72; 
 				public static final int DAY                              = 73; 
 				public static final int DEALLOCATE                       = 74; 
 				public static final int DEC                              = 75; 
 				public static final int DECIMAL                          = 76; 
 				public static final int DECLARE                          = 77; 
 				public static final int DEFAULT                          = 78; 
 				public static final int DELETE                           = 79; 
 				public static final int DENSE_RANK                       = 80; 
 				public static final int DEREF                            = 81; 
 				public static final int DESCRIBE                         = 82; 
 				public static final int DETERMINISTIC                    = 83; 
 				public static final int DISCONNECT                       = 84; 
 				public static final int DISTINCT                         = 85; 
 				public static final int DO                               = 86; 
 				public static final int DOUBLE                           = 87; 
 				public static final int DROP                             = 88; 
 				public static final int DYNAMIC                          = 89; 
 				public static final int EACH                             = 90; 
 				public static final int ELEMENT                          = 91; 
 				public static final int ELSE                             = 92; 
 				public static final int ELSEIF                           = 93; 
 				public static final int END                              = 94; 
 				public static final int END_EXEC                         = 95; 
 				public static final int ESCAPE                           = 96; 
 				public static final int EVERY                            = 97; 
 				public static final int EXCEPT                           = 98; 
 				public static final int EXEC                             = 99; 
 				public static final int EXECUTE                          = 100; 
 				public static final int EXISTS                           = 101; 
 				public static final int EXIT                             = 102; 
 				public static final int EXP                              = 103; 
 				public static final int EXTERNAL                         = 104; 
 				public static final int EXTRACT                          = 105; 
 				public static final int FALSE                            = 106; 
 				public static final int FETCH                            = 107; 
 				public static final int FILTER                           = 108; 
 				public static final int FIRST_VALUE                      = 109; 
 				public static final int FLOAT                            = 110; 
 				public static final int FLOOR                            = 111; 
 				public static final int FOR                              = 112; 
 				public static final int FOREIGN                          = 113; 
 				public static final int FREE                             = 114; 
 				public static final int FROM                             = 115; 
 				public static final int FULL                             = 116; 
 				public static final int FUNCTION                         = 117; 
 				public static final int FUSION                           = 118; 
 				public static final int GET                              = 119; 
 				public static final int GLOBAL                           = 120; 
 				public static final int GRANT                            = 121; 
 				public static final int GROUP                            = 122; 
 				public static final int GROUPING                         = 123; 
 				public static final int HANDLER                          = 124; 
 				public static final int HAVING                           = 125; 
 				public static final int HOLD                             = 126; 
 				public static final int HOUR                             = 127; 
 				public static final int IDENTITY                         = 128; 
 				public static final int IMPORT                           = 129; 
 				public static final int IN                               = 130; 
 				public static final int INDICATOR                        = 131; 
 				public static final int INNER                            = 132; 
 				public static final int INOUT                            = 133; 
 				public static final int INSENSITIVE                      = 134; 
 				public static final int INSERT                           = 135; 
 				public static final int INT                              = 136; 
 				public static final int INTEGER                          = 137; 
 				public static final int INTERSECT                        = 138; 
 				public static final int INTERSECTION                     = 139; 
 				public static final int INTERVAL                         = 140; 
 				public static final int INTO                             = 141; 
 				public static final int IS                               = 142; 
 				public static final int ITERATE                          = 143; 
 				public static final int JOIN                             = 144; 
 				public static final int LAG                              = 145; 
 				public static final int LANGUAGE                         = 146; 
 				public static final int LARGE                            = 147; 
 				public static final int LAST_VALUE                       = 148; 
 				public static final int LATERAL                          = 149; 
 				public static final int LEAD                             = 150; 
 				public static final int LEADING                          = 151; 
 				public static final int LEAVE                            = 152; 
 				public static final int LEFT                             = 153; 
 				public static final int LIKE                             = 154; 
 				public static final int LIKE_REGEX                       = 155; 
 				public static final int LN                               = 156; 
 				public static final int LOCAL                            = 157; 
 				public static final int LOCALTIME                        = 158; 
 				public static final int LOCALTIMESTAMP                   = 159; 
 				public static final int LOOP                             = 160; 
 				public static final int LOWER                            = 161; 
 				public static final int MATCH                            = 162; 
 				public static final int MAX                              = 163; 
 				public static final int MAX_CARDINALITY                  = 164; 
 				public static final int MEMBER                           = 165; 
 				public static final int MERGE                            = 166; 
 				public static final int METHOD                           = 167; 
 				public static final int MIN                              = 168; 
 				public static final int MINUTE                           = 169; 
 				public static final int MOD                              = 170; 
 				public static final int MODIFIES                         = 171; 
 				public static final int MODULE                           = 172; 
 				public static final int MONTH                            = 173; 
 				public static final int MULTISET                         = 174; 
 				public static final int NATIONAL                         = 175; 
 				public static final int NATURAL                          = 176; 
 				public static final int NCHAR                            = 177; 
 				public static final int NCLOB                            = 178; 
 				public static final int NEW                              = 179; 
 				public static final int NO                               = 180; 
 				public static final int NONE                             = 181; 
 				public static final int NORMALIZE                        = 182; 
 				public static final int NOT                              = 183; 
 				public static final int NTH_VALUE                        = 184; 
 				public static final int NTILE                            = 185; 
 				public static final int NULL                             = 186; 
 				public static final int NULLIF                           = 187; 
 				public static final int NUMERIC                          = 188; 
 				public static final int OCCURRENCES_REGEX                = 189; 
 				public static final int OCTET_LENGTH                     = 190; 
 				public static final int OF                               = 191; 
 				public static final int OFFSET                           = 192; 
 				public static final int OLD                              = 193; 
 				public static final int ON                               = 194; 
 				public static final int ONLY                             = 195; 
 				public static final int OPEN                             = 196; 
 				public static final int OR                               = 197; 
 				public static final int ORDER                            = 198; 
 				public static final int OUT                              = 199; 
 				public static final int OUTER                            = 200; 
 				public static final int OVER                             = 201; 
 				public static final int OVERLAPS                         = 202; 
 				public static final int OVERLAY                          = 203; 
 				public static final int PARAMETER                        = 204; 
 				public static final int PARTITION                        = 205; 
 				public static final int PERCENT_RANK                     = 206; 
 				public static final int PERCENTILE_CONT                  = 207; 
 				public static final int PERCENTILE_DISC                  = 208; 
 				public static final int POSITION                         = 209; 
 				public static final int POSITION_REGEX                   = 210; 
 				public static final int POWER                            = 211; 
 				public static final int PRECISION                        = 212; 
 				public static final int PREPARE                          = 213; 
 				public static final int PRIMARY                          = 214; 
 				public static final int PROCEDURE                        = 215; 
 				public static final int RANGE                            = 216; 
 				public static final int RANK                             = 217; 
 				public static final int READS                            = 218; 
 				public static final int REAL                             = 219; 
 				public static final int RECURSIVE                        = 220; 
 				public static final int REF                              = 221; 
 				public static final int REFERENCES                       = 222; 
 				public static final int REFERENCING                      = 223; 
 				public static final int REGR_AVGX                        = 224; 
 				public static final int REGR_AVGY                        = 225; 
 				public static final int REGR_COUNT                       = 226; 
 				public static final int REGR_INTERCEPT                   = 227; 
 				public static final int REGR_R2                          = 228; 
 				public static final int REGR_SLOPE                       = 229; 
 				public static final int REGR_SXX                         = 230; 
 				public static final int REGR_SXY                         = 231; 
 				public static final int REGR_SYY                         = 232; 
 				public static final int RELEASE                          = 233; 
 				public static final int REPEAT                           = 234; 
 				public static final int RESIGNAL                         = 235; 
 				public static final int RESULT                           = 236; 
 				public static final int RETURN                           = 237; 
 				public static final int RETURNS                          = 238; 
 				public static final int REVOKE                           = 239; 
 				public static final int RIGHT                            = 240; 
 				public static final int ROLLBACK                         = 241; 
 				public static final int ROLLUP                           = 242; 
 				public static final int ROW                              = 243; 
 				public static final int ROW_NUMBER                       = 244; 
 				public static final int ROWS                             = 245; 
 				public static final int SAVEPOINT                        = 246; 
 				public static final int SCOPE                            = 247; 
 				public static final int SCROLL                           = 248; 
 				public static final int SEARCH                           = 249; 
 				public static final int SECOND                           = 250; 
 				public static final int SELECT                           = 251; 
 				public static final int SENSITIVE                        = 252; 
 				public static final int SESSION_USER                     = 253; 
 				public static final int SET                              = 254; 
 				public static final int SIGNAL                           = 255; 
 				public static final int SIMILAR                          = 256; 
 				public static final int SMALLINT                         = 257; 
 				public static final int SOME                             = 258; 
 				public static final int SPECIFIC                         = 259; 
 				public static final int SPECIFICTYPE                     = 260; 
 				public static final int SQL                              = 261; 
 				public static final int SQLEXCEPTION                     = 262; 
 				public static final int SQLSTATE                         = 263; 
 				public static final int SQLWARNING                       = 264; 
 				public static final int SQRT                             = 265; 
 				public static final int STACKED                          = 266; 
 				public static final int START                            = 267; 
 				public static final int STATIC                           = 268; 
 				public static final int STDDEV_POP                       = 269; 
 				public static final int STDDEV_SAMP                      = 270; 
 				public static final int SUBMULTISET                      = 271; 
 				public static final int SUBSTRING                        = 272; 
 				public static final int SUBSTRING_REGEX                  = 273; 
 				public static final int SUM                              = 274; 
 				public static final int SYMMETRIC                        = 275; 
 				public static final int SYSTEM                           = 276; 
 				public static final int SYSTEM_USER                      = 277; 
 				public static final int TABLE                            = 278; 
 				public static final int TABLESAMPLE                      = 279; 
 				public static final int THEN                             = 280; 
 				public static final int TIME                             = 281; 
 				public static final int TIMESTAMP                        = 282; 
 				public static final int TIMEZONE_HOUR                    = 283; 
 				public static final int TIMEZONE_MINUTE                  = 284; 
 				public static final int TO                               = 285; 
 				public static final int TRAILING                         = 286; 
 				public static final int TRANSLATE                        = 287; 
 				public static final int TRANSLATE_REGEX                  = 288; 
 				public static final int TRANSLATION                      = 289; 
 				public static final int TREAT                            = 290; 
 				public static final int TRIGGER                          = 291; 
 				public static final int TRIM                             = 292; 
 				public static final int TRIM_ARRAY                       = 293; 
 				public static final int TRUE                             = 294; 
 				public static final int TRUNCATE                         = 295; 
 				public static final int UESCAPE                          = 296; 
 				public static final int UNDO                             = 297; 
 				public static final int UNION                            = 298; 
 				public static final int UNIQUE                           = 299; 
 				public static final int UNKNOWN                          = 300; 
 				public static final int UNNEST                           = 301; 
 				public static final int UNTIL                            = 302; 
 				public static final int UPDATE                           = 303; 
 				public static final int UPPER                            = 304; 
 				public static final int USER                             = 305; 
 				public static final int USING                            = 306; 
 				public static final int VALUE                            = 307; 
 				public static final int VALUES                           = 308; 
 				public static final int VAR_POP                          = 309; 
 				public static final int VAR_SAMP                         = 310; 
 				public static final int VARBINARY                        = 311; 
 				public static final int VARCHAR                          = 312; 
 				public static final int VARYING                          = 313; 
 				public static final int WHEN                             = 314; 
 				public static final int WHENEVER                         = 315; 
 				public static final int WHERE                            = 316; 
 				public static final int WIDTH_BUCKET                     = 317; 
 				public static final int WINDOW                           = 318; 
 				public static final int WITH                             = 319; 
 				public static final int WITHIN                           = 320; 
 				public static final int WITHOUT                          = 321; 
 				public static final int WHILE                            = 322; 
 				public static final int YEAR                             = 323; 
 				public static final int A                           = 330; 
 				public static final int ABSOLUTE                    = 331; 
 				public static final int ACTION                      = 332; 
 				public static final int ADA                         = 333; 
 				public static final int ADD                         = 334; 
 				public static final int ADMIN                       = 335; 
 				public static final int AFTER                       = 336; 
 				public static final int ALWAYS                      = 337; 
 				public static final int ASC                         = 338; 
 				public static final int ASSERTION                   = 339; 
 				public static final int ASSIGNMENT                  = 340; 
 				public static final int ATTRIBUTE                   = 341; 
 				public static final int ATTRIBUTES                  = 342; 
 				public static final int BEFORE                      = 343; 
 				public static final int BERNOULLI                   = 344; 
 				public static final int BREADTH                     = 345; 
 				public static final int C                           = 346; 
 				public static final int CASCADE                     = 347; 
 				public static final int CATALOG                     = 348; 
 				public static final int CATALOG_NAME                = 349; 
 				public static final int CHAIN                       = 350; 
 				public static final int CHARACTER_SET_CATALOG       = 351; 
 				public static final int CHARACTER_SET_NAME          = 352; 
 				public static final int CHARACTER_SET_SCHEMA        = 353; 
 				public static final int CHARACTERISTICS             = 354; 
 				public static final int CHARACTERS                  = 355; 
 				public static final int CLASS_ORIGIN                = 356; 
 				public static final int COBOL                       = 357; 
 				public static final int COLLATION                   = 358; 
 				public static final int COLLATION_CATALOG           = 359; 
 				public static final int COLLATION_NAME              = 360; 
 				public static final int COLLATION_SCHEMA            = 361; 
 				public static final int COLUMN_NAME                 = 362; 
 				public static final int COMMAND_FUNCTION            = 363; 
 				public static final int COMMAND_FUNCTION_CODE       = 364; 
 				public static final int COMMITTED                   = 365; 
 				public static final int CONDITION_IDENTIFIER        = 366; 
 				public static final int CONDITION_NUMBER            = 367; 
 				public static final int CONNECTION                  = 368; 
 				public static final int CONNECTION_NAME             = 369; 
 				public static final int CONSTRAINT_CATALOG          = 370; 
 				public static final int CONSTRAINT_NAME             = 371; 
 				public static final int CONSTRAINT_SCHEMA           = 372; 
 				public static final int CONSTRAINTS                 = 373; 
 				public static final int CONSTRUCTOR                 = 374; 
 				public static final int CONTAINS                    = 375; 
 				public static final int CONTINUE                    = 376; 
 				public static final int CURSOR_NAME                 = 377; 
 				public static final int DATA                        = 378; 
 				public static final int DATETIME_INTERVAL_CODE      = 379; 
 				public static final int DATETIME_INTERVAL_PRECISION = 380; 
 				public static final int DEFAULTS                    = 381; 
 				public static final int DEFERRABLE                  = 382; 
 				public static final int DEFERRED                    = 383; 
 				public static final int DEFINED                     = 384; 
 				public static final int DEFINER                     = 385; 
 				public static final int DEGREE                      = 386; 
 				public static final int DEPTH                       = 387; 
 				public static final int DERIVED                     = 388; 
 				public static final int DESC                        = 389; 
 				public static final int DESCRIPTOR                  = 390; 
 				public static final int DIAGNOSTICS                 = 391; 
 				public static final int DISPATCH                    = 392; 
 				public static final int DOMAIN                      = 393; 
 				public static final int DYNAMIC_FUNCTION            = 394; 
 				public static final int DYNAMIC_FUNCTION_CODE       = 395; 
 				public static final int EQUALS                      = 396; 
 				public static final int EXCEPTION                   = 397; 
 				public static final int EXCLUDE                     = 398; 
 				public static final int EXCLUDING                   = 399; 
 				public static final int FINAL                       = 400; 
 				public static final int FIRST                       = 401; 
 				public static final int FOLLOWING                   = 402; 
 				public static final int FORTRAN                     = 403; 
 				public static final int FOUND                       = 404; 
 				public static final int G                           = 405; 
 				public static final int GENERAL                     = 406; 
 				public static final int GENERATED                   = 407; 
 				public static final int GO                          = 408; 
 				public static final int GOTO                        = 409; 
 				public static final int GRANTED                     = 410; 
 				public static final int HIERARCHY                   = 411; 
 				public static final int IF                          = 412; 
 				public static final int IGNORE                      = 413; 
 				public static final int IMMEDIATE                   = 414; 
 				public static final int IMPLEMENTATION              = 415; 
 				public static final int INCLUDING                   = 416; 
 				public static final int INCREMENT                   = 417; 
 				public static final int INITIALLY                   = 418; 
 				public static final int INPUT                       = 419; 
 				public static final int INSTANCE                    = 420; 
 				public static final int INSTANTIABLE                = 421; 
 				public static final int INSTEAD                     = 422; 
 				public static final int INVOKER                     = 423; 
 				public static final int ISOLATION                   = 424; 
 				public static final int JAVA                        = 425; 
 				public static final int K                           = 426; 
 				public static final int KEY                         = 427; 
 				public static final int KEY_MEMBER                  = 428; 
 				public static final int KEY_TYPE                    = 429; 
 				public static final int LAST                        = 430; 
 				public static final int LENGTH                      = 431; 
 				public static final int LEVEL                       = 432; 
 				public static final int LIBRARY                     = 433; 
 				public static final int LOCATOR                     = 434; 
 				public static final int M                           = 435; 
 				public static final int MAP                         = 436; 
 				public static final int MATCHED                     = 437; 
 				public static final int MAXVALUE                    = 438; 
 				public static final int MESSAGE_LENGTH              = 439; 
 				public static final int MESSAGE_OCTET_LENGTH        = 440; 
 				public static final int MESSAGE_TEXT                = 441; 
 				public static final int MINVALUE                    = 442; 
 				public static final int MORE                        = 443; 
 				public static final int MUMPS                       = 444; 
 				public static final int NAME                        = 445; 
 				public static final int NAMES                       = 446; 
 				public static final int NESTING                     = 447; 
 				public static final int NEXT                        = 448; 
 				public static final int NORMALIZED                  = 449; 
 				public static final int NULLABLE                    = 450; 
 				public static final int NULLS                       = 451; 
 				public static final int NUMBER                      = 452; 
 				public static final int OBJECT                      = 453; 
 				public static final int OCTETS                      = 454; 
 				public static final int OPTION                      = 455; 
 				public static final int OPTIONS                     = 456; 
 				public static final int ORDERING                    = 457; 
 				public static final int ORDINALITY                  = 458; 
 				public static final int OTHERS                      = 459; 
 				public static final int OUTPUT                      = 460; 
 				public static final int OVERRIDING                  = 461; 
 				public static final int P                           = 462; 
 				public static final int PAD                         = 463; 
 				public static final int PARAMETER_MODE              = 464; 
 				public static final int PARAMETER_NAME              = 465; 
 				public static final int PARAMETER_ORDINAL_POSITION  = 466; 
 				public static final int PARAMETER_SPECIFIC_CATALOG  = 467; 
 				public static final int PARAMETER_SPECIFIC_NAME     = 468; 
 				public static final int PARAMETER_SPECIFIC_SCHEMA   = 469; 
 				public static final int PARTIAL                     = 470; 
 				public static final int PASCAL                      = 471; 
 				public static final int PATH                        = 472; 
 				public static final int PLACING                     = 473; 
 				public static final int PLI                         = 474; 
 				public static final int PRECEDING                   = 475; 
 				public static final int PRESERVE                    = 476; 
 				public static final int PRIOR                       = 477; 
 				public static final int PRIVILEGES                  = 478; 
 				public static final int PUBLIC                      = 479; 
 				public static final int READ                        = 480; 
 				public static final int RELATIVE                    = 481; 
 				public static final int REPEATABLE                  = 482; 
 				public static final int RESPECT                     = 483; 
 				public static final int RESTART                     = 484; 
 				public static final int RESTRICT                    = 485; 
 				public static final int RETURNED_CARDINALITY        = 486; 
 				public static final int RETURNED_LENGTH             = 487; 
 				public static final int RETURNED_OCTET_LENGTH       = 488; 
 				public static final int RETURNED_SQLSTATE           = 489; 
 				public static final int ROLE                        = 490; 
 				public static final int ROUTINE                     = 491; 
 				public static final int ROUTINE_CATALOG             = 492; 
 				public static final int ROUTINE_NAME                = 493; 
 				public static final int ROUTINE_SCHEMA              = 494; 
 				public static final int ROW_COUNT                   = 495; 
 				public static final int SCALE                       = 496; 
 				public static final int SCHEMA                      = 497; 
 				public static final int SCHEMA_NAME                 = 498; 
 				public static final int SCOPE_CATALOG               = 499; 
 				public static final int SCOPE_NAME                  = 500; 
 				public static final int SCOPE_SCHEMA                = 501; 
 				public static final int SECTION                     = 502; 
 				public static final int SECURITY                    = 503; 
 				public static final int SELF                        = 504; 
 				public static final int SEQUENCE                    = 505; 
 				public static final int SERIALIZABLE                = 506; 
 				public static final int SERVER_NAME                 = 507; 
 				public static final int SESSION                     = 508; 
 				public static final int SERVER                      = 509; 
 				public static final int SETS                        = 510; 
 				public static final int SIMPLE                      = 511; 
 				public static final int SIZE                        = 512; 
 				public static final int SOURCE                      = 513; 
 				public static final int SPACE                       = 514; 
 				public static final int SPECIFIC_NAME               = 515; 
 				public static final int STATE                       = 516; 
 				public static final int STATEMENT                   = 517; 
 				public static final int STRUCTURE                   = 518; 
 				public static final int STYLE                       = 519; 
 				public static final int SUBCLASS_ORIGIN             = 520; 
 				public static final int T                           = 521; 
 				public static final int TABLE_NAME                  = 522; 
 				public static final int TEMPORARY                   = 523; 
 				public static final int TIES                        = 524; 
 				public static final int TOP_LEVEL_COUNT             = 525; 
 				public static final int TRANSACTION                 = 526; 
 				public static final int TRANSACTION_ACTIVE          = 527; 
 				public static final int TRANSACTIONS_COMMITTED      = 528; 
 				public static final int TRANSACTIONS_ROLLED_BACK    = 529; 
 				public static final int TRANSFORM                   = 530; 
 				public static final int TRANSFORMS                  = 531; 
 				public static final int TRIGGER_CATALOG             = 532; 
 				public static final int TRIGGER_NAME                = 533; 
 				public static final int TRIGGER_SCHEMA              = 534; 
 				public static final int TYPE                        = 535; 
 				public static final int UNBOUNDED                   = 536; 
 				public static final int UNCOMMITTED                 = 537; 
 				public static final int UNDER                       = 538; 
 				public static final int UNNAMED                     = 539; 
 				public static final int USAGE                       = 540; 
 				public static final int USER_DEFINED_TYPE_CATALOG   = 541; 
 				public static final int USER_DEFINED_TYPE_CODE      = 542; 
 				public static final int USER_DEFINED_TYPE_NAME      = 543; 
 				public static final int USER_DEFINED_TYPE_SCHEMA    = 544; 
 				public static final int VIEW                        = 545; 
 				public static final int WORK                        = 546; 
 				public static final int WRITE                       = 547; 
 				public static final int WRAPPER                     = 548; 
 				public static final int ZONE                        = 549; 
 				static final int ALIAS          = 558; 
 				static final int AGGREGATE      = 559; 
 				static final int AUTOCOMMIT     = 560; 
 				static final int AUTHENTICATION = 561; 
 				static final int BACKUP         = 562; 
 				static final int BINARY_FLOAT   = 563; 
 				static final int BINARY_DOUBLE  = 564; 
 				static final int BIT            = 565; 
 				static final int BLOCKING       = 566; 
 				static final int BODY           = 567; 
 				static final int BYTE           = 568; 
 				static final int CACHE          = 569; 
 				static final int CACHED         = 570; 
 				static final int CASEWHEN       = 571; 
 				static final int CHECKPOINT     = 572; 
 				static final int CITEXT         = 573; 
 				static final int CLASS          = 574; 
 				static final int CLUSTERED      = 575; 
 				static final int COMMENT        = 576; 
 				static final int COMPACT        = 577; 
 				static final int COMPRESSED     = 578; 
 				static final int CONFLICT       = 579; 
 				static final int CONTROL        = 580; 
 				static final int CURRVAL        = 581; 
 				static final int DATABASE       = 582; 
 				static final int DEADLOCK       = 583; 
 				static final int DEFRAG         = 584; 
 				static final int DELAY          = 585; 
 				static final int DIGEST         = 586; 
 				static final int EVENT          = 587; 
 				static final int EXPLAIN        = 588; 
 				static final int FILE           = 589; 
 				static final int FILES          = 590; 
 				static final int FORMAT         = 591; 
 				static final int GC             = 592; 
 				static final int HEADER         = 593; 
 				static final int IGNORECASE     = 594; 
 				static final int IMMEDIATELY    = 595; 
 				static final int INTEGRITY      = 596; 
 				static final int INDEX          = 597; 
 				static final int INITIAL        = 598; 
 				static final int LASTVAL        = 599; 
 				static final int LIMIT          = 600; 
 				static final int LOCK           = 601; 
 				static final int LOCKS          = 602; 
 				static final int LONG           = 603; 
 				static final int LONGVAR        = 604; 
 				static final int MAXROWS        = 605; 
 				static final int MEDIAN         = 606; 
 				static final int MEMORY         = 607; 
 				static final int MILLIS         = 608; 
 				static final int MINUS_EXCEPT   = 609; 
 				static final int NAN            = 610; 
 				static final int NEXTVAL        = 611; 
 				static final int NVARCHAR2      = 612; 
 				static final int NVL2           = 613; 
 				static final int OFF            = 614; 
 				static final int PASSWORD       = 615; 
 				static final int PLAN           = 616; 
 				static final int PREVVAL        = 617; 
 				static final int PROPERTY       = 618; 
 				static final int RAW            = 619; 
 				static final int READONLY       = 620; 
 				static final int REFERENTIAL    = 621; 
 				static final int REGULAR        = 622; 
 				static final int RENAME         = 623; 
 				static final int RESET          = 624; 
 				static final int ROWNUM         = 625; 
 				static final int SCRIPT         = 626; 
 				static final int SEPARATOR      = 627; 
 				static final int SHUTDOWN       = 628; 
 				static final int SYNTAX         = 629; 
 				static final int TDC            = 630; 
 				static final int TEMP           = 631; 
 				static final int TEXT           = 632; 
 				static final int TTI            = 633; 
 				static final int TYPES          = 634; 
 				static final int VARCHAR2       = 635; 
 				static final int WRITE_DELAY    = 636; 
 				static final int INDEXER = 637; 
 				static final int        ACOS                       = 640; 
 				static final int        ACTION_ID                  = 641; 
 				static final int        ARRAY_SORT                 = 642; 
 				static final int        ASCII                      = 643; 
 				static final int        ADD_MONTHS                 = 644; 
 				static final int        ASIN                       = 645; 
 				static final int        ATAN                       = 646; 
 				static final int        ATAN2                      = 647; 
 				static final int        BIT_LENGTH                 = 648; 
 				static final int        BITAND                     = 649; 
 				static final int        BITANDNOT                  = 650; 
 				static final int        BITLENGTH                  = 651; 
 				static final int        BITNOT                     = 652; 
 				static final int        BITOR                      = 653; 
 				static final int        BITXOR                     = 654; 
 				static final int        CHR                        = 655; 
 				static final int        CONCAT_WORD                = 656; 
 				static final int        CONCAT_WS                  = 657; 
 				static final int        COS                        = 658; 
 				static final int        COT                        = 659; 
 				static final int        CRYPT_KEY                  = 660; 
 				static final int        CURDATE                    = 661; 
 				static final int        CURTIME                    = 662; 
 				static final int        DATABASE_ISOLATION_LEVEL   = 663; 
 				static final int        DATABASE_NAME              = 664; 
 				static final int        DATABASE_TIMEZONE          = 665; 
 				static final int        DATABASE_VERSION           = 666; 
 				static final int        DATE_ADD                   = 667; 
 				static final int        DATE_SUB                   = 668; 
 				static final int        DATEADD                    = 669; 
 				static final int        DATEDIFF                   = 670; 
 				public static final int DAY_NAME                   = 671; 
 				public static final int DAY_OF_MONTH               = 672; 
 				public static final int DAY_OF_WEEK                = 673; 
 				public static final int DAY_OF_YEAR                = 674; 
 				static final int        DAYNAME                    = 675; 
 				static final int        DAYOFMONTH                 = 676; 
 				static final int        DAYOFWEEK                  = 677; 
 				static final int        DAYOFYEAR                  = 678; 
 				static final int        DAYS                       = 679; 
 				static final int        DBTIMEZONE                 = 680; 
 				static final int        DECODE                     = 681; 
 				static final int        DEGREES                    = 682; 
 				static final int        DIFFERENCE                 = 683; 
 				static final int        DMOD                       = 684; 
 				static final int        FROM_TZ                    = 685; 
 				static final int        HEXTORAW                   = 686; 
 				static final int        GREATEST                   = 687; 
 				static final int        GROUP_CONCAT               = 688; 
 				static final int        IFNULL                     = 689; 
 				static final int        INSTR                      = 690; 
 				static final int        IS_AUTOCOMMIT              = 691; 
 				static final int        IS_READONLY_DATABASE       = 692; 
 				static final int        IS_READONLY_DATABASE_FILES = 693; 
 				static final int        IS_READONLY_SESSION        = 694; 
 				static final int        ISOLATION_LEVEL            = 695; 
 				static final int        ISNULL                     = 696; 
 				static final int        LAST_DAY                   = 697; 
 				static final int        LCASE                      = 698; 
 				static final int        LEAST                      = 699; 
 				static final int        LOAD_FILE                  = 700; 
 				static final int        LOCATE                     = 701; 
 				static final int        LOB                        = 702; 
 				static final int        LOG                        = 703; 
 				static final int        LOG10                      = 704; 
 				static final int        LPAD                       = 705; 
 				static final int        LTRIM                      = 706; 
 				static final int        LOB_ID                     = 707; 
 				public static final int MONTH_NAME                 = 708; 
 				static final int        MONTHNAME                  = 709; 
 				static final int        MONTHS_BETWEEN             = 710; 
 				static final int        MVCC                       = 711; 
 				static final int        MVLOCKS                    = 712; 
 				static final int        NEW_TIME                   = 713; 
 				static final int        NEXT_DAY                   = 714; 
 				static final int        NIO                        = 715; 
 				static final int        NOW                        = 716; 
 				static final int        NUMTODSINTERVAL            = 717; 
 				static final int        NUMTOYMINTERVAL            = 718; 
 				static final int        OCTETLENGTH                = 719; 
 				static final int        PI                         = 720; 
 				static final int        POSITION_ARRAY             = 721; 
 				public static final int QUARTER                    = 722; 
 				static final int        RADIANS                    = 723; 
 				static final int        RAND                       = 724; 
 				static final int        RAWTOHEX                   = 725; 
 				static final int        REGEXP_MATCHES             = 726; 
 				static final int        REGEXP_SUBSTRING           = 727; 
 				static final int        REGEXP_SUBSTRING_ARRAY     = 728; 
 				static final int        REPLACE                    = 729; 
 				static final int        REVERSE                    = 730; 
 				static final int        ROUND                      = 731; 
 				static final int        ROUNDMAGIC                 = 732; 
 				static final int        RTRIM                      = 733; 
 				static final int        RPAD                       = 734; 
 				public static final int SECONDS_MIDNIGHT           = 735; 
 				static final int        SEQUENCE_ARRAY             = 736; 
 				static final int        SESSION_ID                 = 737; 
 				static final int        SESSION_ISOLATION_LEVEL    = 738; 
 				static final int        SESSION_TIMEZONE           = 739; 
 				static final int        SESSIONTIMEZONE            = 740; 
 				static final int        SIGN                       = 741; 
 				static final int        SIN                        = 742; 
 				static final int        SORT_ARRAY                 = 743; 
 				static final int        SOUNDEX                    = 744; 
 				static final int        SPACE_WORD                 = 755; 
 				static final int        SUBSTR                     = 756; 
 				static final int        SYS_EXTRACT_UTC            = 757; 
 				static final int        SYSDATE                    = 758; 
 				static final int        SYSTIMESTAMP               = 759; 
 				static final int        TAN                        = 760; 
 				static final int        TIMESTAMP_WITH_ZONE        = 761; 
 				static final int        TIMESTAMPADD               = 762; 
 				static final int        TIMESTAMPDIFF              = 763; 
 				static final int        TIMEZONE                   = 764; 
 				static final int        TO_CHAR                    = 765; 
 				static final int        TO_DATE                    = 766; 
 				static final int        TO_DSINTERVAL              = 767; 
 				static final int        TO_YMINTERVAL              = 768; 
 				static final int        TO_NUMBER                  = 769; 
 				static final int        TO_TIMESTAMP               = 770; 
 				static final int        TO_TIMESTAMP_TZ            = 771; 
 				static final int        TODAY                      = 772; 
 				static final int        TOP                        = 773; 
 				static final int        TRANSACTION_CONTROL        = 774; 
 				static final int        TRANSACTION_ID             = 775; 
 				static final int        TRANSACTION_SIZE           = 776; 
 				static final int        TRUNC                      = 777; 
 				static final int        TZ_OFFSET                  = 778; 
 				static final int        UCASE                      = 779; 
 				static final int        UNIX_MILLIS                = 780; 
 				static final int        UNIX_TIMESTAMP             = 781; 
 				static final int        UUID                       = 782; 
 				static final int        WEEK                       = 790; 
 				public static final int WEEK_OF_YEAR               = 791; 
 				static final int        LONGBLOB                   = 792; 
 				static final int        LONGTEXT                   = 793; 
 				static final int        MEDIUMBLOB                 = 794; 
 				static final int        MEDIUMTEXT                 = 795; 
 				static final int        TINYBLOB                   = 796; 
 				static final int        TINYTEXT                   = 797; 
 				static final int        ASTERISK         = 801; 
 				static final int        CLOSEBRACKET     = 802; 
 				static final int        COLON            = 803; 
 				static final int        COMMA            = 804; 
 				static final int        CONCAT           = 805; 
 				static final int        DIVIDE           = 806; 
 				static final int        DOUBLE_COLON_OP  = 807; 
 				static final int        DOUBLE_PERIOD_OP = 808; 
 				static final int        GREATER          = 809; 
 				static final int        GREATER_EQUALS   = 810; 
 				static final int        LEFTBRACKET      = 811; 
 				static final int        LESS             = 812; 
 				static final int        LESS_EQUALS      = 813; 
 				public static final int MINUS            = 814; 
 				static final int        NOT_EQUALS       = 815; 
 				static final int        OPENBRACKET      = 816; 
 				static final int        PLUS             = 817; 
 				static final int        QUESTION         = 818; 
 				static final int        RIGHT_ARROW_OP   = 819; 
 				static final int        RIGHTBRACKET     = 820; 
 				static final int        SEMICOLON        = 821; 
 				public static final int SQL_BIGINT        = 822; 
 				public static final int SQL_BINARY        = 823; 
 				public static final int SQL_BIT           = 824; 
 				public static final int SQL_BLOB          = 825; 
 				public static final int SQL_BOOLEAN       = 826; 
 				public static final int SQL_CHAR          = 827; 
 				public static final int SQL_CLOB          = 828; 
 				public static final int SQL_DATE          = 829; 
 				public static final int SQL_DECIMAL       = 831; 
 				public static final int SQL_DATALINK      = 832; 
 				public static final int SQL_DOUBLE        = 833; 
 				public static final int SQL_FLOAT         = 834; 
 				public static final int SQL_INTEGER       = 835; 
 				public static final int SQL_LONGVARBINARY = 836; 
 				public static final int SQL_LONGNVARCHAR  = 837; 
 				public static final int SQL_LONGVARCHAR   = 838; 
 				public static final int SQL_NCHAR         = 839; 
 				public static final int SQL_NCLOB         = 840; 
 				public static final int SQL_NUMERIC       = 841; 
 				public static final int SQL_NVARCHAR      = 842; 
 				public static final int SQL_REAL          = 843; 
 				public static final int SQL_ROWID         = 844; 
 				public static final int SQL_SQLXML        = 845; 
 				public static final int SQL_SMALLINT      = 846; 
 				public static final int SQL_TIME          = 847; 
 				public static final int SQL_TIMESTAMP     = 848; 
 				public static final int SQL_TINYINT       = 849; 
 				public static final int SQL_VARBINARY     = 850; 
 				public static final int SQL_VARCHAR       = 851; 
 				static final int SQL_TSI_FRAC_SECOND  = 852; 
 				static final int SQL_TSI_MILLI_SECOND = 853; 
 				static final int SQL_TSI_SECOND       = 854; 
 				static final int SQL_TSI_MINUTE       = 855; 
 				static final int SQL_TSI_HOUR         = 856; 
 				static final int SQL_TSI_DAY          = 857; 
 				static final int SQL_TSI_WEEK         = 858; 
 				static final int SQL_TSI_MONTH        = 859; 
 				static final int SQL_TSI_QUARTER      = 860; 
 				static final int SQL_TSI_YEAR         = 861; 
 				static final int X_KEYSET      = 863; 
 				static final int X_OPTION      = 864; 
 				static final int X_REPEAT      = 865; 
 				static final int X_POS_INTEGER = 866; 
 				public static final int X_VALUE                    = 869; 
 				public static final int X_IDENTIFIER               = 870; 
 				public static final int X_DELIMITED_IDENTIFIER     = 871; 
 				public static final int X_ENDPARSE                 = 872; 
 				public static final int X_STARTPARSE               = 873; 
 				public static final int X_REMARK                   = 874; 
 				public static final int X_NULL                     = 875; 
 				public static final int X_LOB_SIZE                 = 876; 
 				public static final int X_MALFORMED_STRING         = 877; 
 				public static final int X_MALFORMED_NUMERIC        = 878; 
 				public static final int X_MALFORMED_BIT_STRING     = 879; 
 				public static final int X_MALFORMED_BINARY_STRING  = 880; 
 				public static final int X_MALFORMED_UNICODE_STRING = 881; 
 				public static final int X_MALFORMED_COMMENT        = 882; 
 				public static final int X_MALFORMED_IDENTIFIER     = 883; 
 				public static final int X_MALFORMED_UNICODE_ESCAPE = 884; 
 				public static final int X_UNKNOWN_TOKEN = -1; 
 				private static final IntValueHashMap reservedKeys = 
 				new IntValueHashMap(351); 
 				static { 
 				reservedKeys.put(Tokens.T_ABS, ABS); 
 				reservedKeys.put(Tokens.T_AGGREGATE, AGGREGATE); 
 				reservedKeys.put(Tokens.T_ALL, ALL); 
 				reservedKeys.put(Tokens.T_ALLOCATE, ALLOCATE); 
 				reservedKeys.put(Tokens.T_ALTER, ALTER); 
 				reservedKeys.put(Tokens.T_AND, AND); 
 				reservedKeys.put(Tokens.T_ANY, ANY); 
 				reservedKeys.put(Tokens.T_ARE, ARE); 
 				reservedKeys.put(Tokens.T_ARRAY, ARRAY); 
 				reservedKeys.put(Tokens.T_ARRAY_AGG, ARRAY_AGG); 
 				reservedKeys.put(Tokens.T_AS, AS); 
 				reservedKeys.put(Tokens.T_ASENSITIVE, ASENSITIVE); 
 				reservedKeys.put(Tokens.T_ASYMMETRIC, ASYMMETRIC); 
 				reservedKeys.put(Tokens.T_AT, AT); 
 				reservedKeys.put(Tokens.T_ATOMIC, ATOMIC); 
 				reservedKeys.put(Tokens.T_AUTHORIZATION, AUTHORIZATION); 
 				reservedKeys.put(Tokens.T_AVG, AVG); 
 				reservedKeys.put(Tokens.T_BEGIN, BEGIN); 
 				reservedKeys.put(Tokens.T_BETWEEN, BETWEEN); 
 				reservedKeys.put(Tokens.T_BIGINT, BIGINT); 
 				reservedKeys.put(Tokens.T_BINARY, BINARY); 
 				reservedKeys.put(Tokens.T_BIT_LENGTH, BIT_LENGTH); 
 				reservedKeys.put(Tokens.T_BLOB, BLOB); 
 				reservedKeys.put(Tokens.T_BOOLEAN, BOOLEAN); 
 				reservedKeys.put(Tokens.T_BOTH, BOTH); 
 				reservedKeys.put(Tokens.T_BY, BY); 
 				reservedKeys.put(Tokens.T_CALL, CALL); 
 				reservedKeys.put(Tokens.T_CALLED, CALLED); 
 				reservedKeys.put(Tokens.T_CARDINALITY, CARDINALITY); 
 				reservedKeys.put(Tokens.T_CASCADED, CASCADED); 
 				reservedKeys.put(Tokens.T_CASE, CASE); 
 				reservedKeys.put(Tokens.T_CAST, CAST); 
 				reservedKeys.put(Tokens.T_CEIL, CEIL); 
 				reservedKeys.put(Tokens.T_CEILING, CEILING); 
 				reservedKeys.put(Tokens.T_CHAR, CHAR); 
 				reservedKeys.put(Tokens.T_CHAR_LENGTH, CHAR_LENGTH); 
 				reservedKeys.put(Tokens.T_CHARACTER, CHARACTER); 
 				reservedKeys.put(Tokens.T_CHARACTER_LENGTH, CHARACTER_LENGTH); 
 				reservedKeys.put(Tokens.T_CHECK, CHECK); 
 				reservedKeys.put(Tokens.T_CLOB, CLOB); 
 				reservedKeys.put(Tokens.T_CLOSE, CLOSE); 
 				reservedKeys.put(Tokens.T_COALESCE, COALESCE); 
 				reservedKeys.put(Tokens.T_COLLATE, COLLATE); 
 				reservedKeys.put(Tokens.T_COLLECT, COLLECT); 
 				reservedKeys.put(Tokens.T_COLUMN, COLUMN); 
 				reservedKeys.put(Tokens.T_COMMIT, COMMIT); 
 				reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE); 
 				reservedKeys.put(Tokens.T_CONDITION, CONDITION); 
 				reservedKeys.put(Tokens.T_CONNECT, CONNECT); 
 				reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT); 
 				reservedKeys.put(Tokens.T_CONVERT, CONVERT); 
 				reservedKeys.put(Tokens.T_CORR, CORR); 
 				reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING); 
 				reservedKeys.put(Tokens.T_COUNT, COUNT); 
 				reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP); 
 				reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP); 
 				reservedKeys.put(Tokens.T_CREATE, CREATE); 
 				reservedKeys.put(Tokens.T_CROSS, CROSS); 
 				reservedKeys.put(Tokens.T_CUBE, CUBE); 
 				reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST); 
 				reservedKeys.put(Tokens.T_CURRENT, CURRENT); 
 				reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG); 
 				reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE); 
 				reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP, 
 				CURRENT_DEFAULT_TRANSFORM_GROUP); 
 				reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH); 
 				reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE); 
 				reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA); 
 				reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME); 
 				reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP); 
 				reservedKeys.put(Tokens.T_DO, DO); 
 				reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE, 
 				CURRENT_TRANSFORM_GROUP_FOR_TYPE); 
 				reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER); 
 				reservedKeys.put(Tokens.T_CURSOR, CURSOR); 
 				reservedKeys.put(Tokens.T_CYCLE, CYCLE); 
 				reservedKeys.put(Tokens.T_DATE, DATE); 
 				reservedKeys.put(Tokens.T_DAY, DAY); 
 				reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE); 
 				reservedKeys.put(Tokens.T_DEC, DEC); 
 				reservedKeys.put(Tokens.T_DECIMAL, DECIMAL); 
 				reservedKeys.put(Tokens.T_DECLARE, DECLARE); 
 				reservedKeys.put(Tokens.T_DEFAULT, DEFAULT); 
 				reservedKeys.put(Tokens.T_DELETE, DELETE); 
 				reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK); 
 				reservedKeys.put(Tokens.T_DEREF, DEREF); 
 				reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE); 
 				reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC); 
 				reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT); 
 				reservedKeys.put(Tokens.T_DISTINCT, DISTINCT); 
 				reservedKeys.put(Tokens.T_DOUBLE, DOUBLE); 
 				reservedKeys.put(Tokens.T_DROP, DROP); 
 				reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC); 
 				reservedKeys.put(Tokens.T_EACH, EACH); 
 				reservedKeys.put(Tokens.T_ELEMENT, ELEMENT); 
 				reservedKeys.put(Tokens.T_ELSE, ELSE); 
 				reservedKeys.put(Tokens.T_ELSEIF, ELSEIF); 
 				reservedKeys.put(Tokens.T_END, END); 
 				reservedKeys.put(Tokens.T_END_EXEC, END_EXEC); 
 				reservedKeys.put(Tokens.T_ESCAPE, ESCAPE); 
 				reservedKeys.put(Tokens.T_EVERY, EVERY); 
 				reservedKeys.put(Tokens.T_EXCEPT, EXCEPT); 
 				reservedKeys.put(Tokens.T_EXEC, EXEC); 
 				reservedKeys.put(Tokens.T_EXECUTE, EXECUTE); 
 				reservedKeys.put(Tokens.T_EXISTS, EXISTS); 
 				reservedKeys.put(Tokens.T_EXIT, EXIT); 
 				reservedKeys.put(Tokens.T_EXP, EXP); 
 				reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL); 
 				reservedKeys.put(Tokens.T_EXTRACT, EXTRACT); 
 				reservedKeys.put(Tokens.T_FALSE, FALSE); 
 				reservedKeys.put(Tokens.T_FETCH, FETCH); 
 				reservedKeys.put(Tokens.T_FILTER, FILTER); 
 				reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE); 
 				reservedKeys.put(Tokens.T_FLOAT, FLOAT); 
 				reservedKeys.put(Tokens.T_FLOOR, FLOOR); 
 				reservedKeys.put(Tokens.T_FOR, FOR); 
 				reservedKeys.put(Tokens.T_FOREIGN, FOREIGN); 
 				reservedKeys.put(Tokens.T_FREE, FREE); 
 				reservedKeys.put(Tokens.T_FROM, FROM); 
 				reservedKeys.put(Tokens.T_FULL, FULL); 
 				reservedKeys.put(Tokens.T_FUNCTION, FUNCTION); 
 				reservedKeys.put(Tokens.T_FUSION, FUSION); 
 				reservedKeys.put(Tokens.T_GET, GET); 
 				reservedKeys.put(Tokens.T_GLOBAL, GLOBAL); 
 				reservedKeys.put(Tokens.T_GRANT, GRANT); 
 				reservedKeys.put(Tokens.T_GROUP, GROUP); 
 				reservedKeys.put(Tokens.T_GROUPING, GROUPING); 
 				reservedKeys.put(Tokens.T_HANDLER, HANDLER); 
 				reservedKeys.put(Tokens.T_HAVING, HAVING); 
 				reservedKeys.put(Tokens.T_HOLD, HOLD); 
 				reservedKeys.put(Tokens.T_HOUR, HOUR); 
 				reservedKeys.put(Tokens.T_IDENTITY, IDENTITY); 
 				reservedKeys.put(Tokens.T_IF, IF); 
 				reservedKeys.put(Tokens.T_IMPORT, IMPORT); 
 				reservedKeys.put(Tokens.T_IN, IN); 
 				reservedKeys.put(Tokens.T_INDICATOR, INDICATOR); 
 				reservedKeys.put(Tokens.T_INNER, INNER); 
 				reservedKeys.put(Tokens.T_INOUT, INOUT); 
 				reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE); 
 				reservedKeys.put(Tokens.T_INSERT, INSERT); 
 				reservedKeys.put(Tokens.T_INT, INT); 
 				reservedKeys.put(Tokens.T_INTEGER, INTEGER); 
 				reservedKeys.put(Tokens.T_INTERSECT, INTERSECT); 
 				reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION); 
 				reservedKeys.put(Tokens.T_INTERVAL, INTERVAL); 
 				reservedKeys.put(Tokens.T_INTO, INTO); 
 				reservedKeys.put(Tokens.T_IS, IS); 
 				reservedKeys.put(Tokens.T_ITERATE, ITERATE); 
 				reservedKeys.put(Tokens.T_JOIN, JOIN); 
 				reservedKeys.put(Tokens.T_LAG, LAG); 
 				reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE); 
 				reservedKeys.put(Tokens.T_LARGE, LARGE); 
 				reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE); 
 				reservedKeys.put(Tokens.T_LATERAL, LATERAL); 
 				reservedKeys.put(Tokens.T_LEAD, LEAD); 
 				reservedKeys.put(Tokens.T_LEADING, LEADING); 
 				reservedKeys.put(Tokens.T_LEAVE, LEAVE); 
 				reservedKeys.put(Tokens.T_LEFT, LEFT); 
 				reservedKeys.put(Tokens.T_LIKE, LIKE); 
 				reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX); 
 				reservedKeys.put(Tokens.T_LN, LN); 
 				reservedKeys.put(Tokens.T_LOCAL, LOCAL); 
 				reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME); 
 				reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP); 
 				reservedKeys.put(Tokens.T_LOOP, LOOP); 
 				reservedKeys.put(Tokens.T_LOWER, LOWER); 
 				reservedKeys.put(Tokens.T_MATCH, MATCH); 
 				reservedKeys.put(Tokens.T_MAX, MAX); 
 				reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY); 
 				reservedKeys.put(Tokens.T_MEMBER, MEMBER); 
 				reservedKeys.put(Tokens.T_MERGE, MERGE); 
 				reservedKeys.put(Tokens.T_METHOD, METHOD); 
 				reservedKeys.put(Tokens.T_MIN, MIN); 
 				reservedKeys.put(Tokens.T_MINUTE, MINUTE); 
 				reservedKeys.put(Tokens.T_MOD, MOD); 
 				reservedKeys.put(Tokens.T_MODIFIES, MODIFIES); 
 				reservedKeys.put(Tokens.T_MODULE, MODULE); 
 				reservedKeys.put(Tokens.T_MONTH, MONTH); 
 				reservedKeys.put(Tokens.T_MULTISET, MULTISET); 
 				reservedKeys.put(Tokens.T_NATIONAL, NATIONAL); 
 				reservedKeys.put(Tokens.T_NATURAL, NATURAL); 
 				reservedKeys.put(Tokens.T_NCHAR, NCHAR); 
 				reservedKeys.put(Tokens.T_NCLOB, NCLOB); 
 				reservedKeys.put(Tokens.T_NEW, NEW); 
 				reservedKeys.put(Tokens.T_NO, NO); 
 				reservedKeys.put(Tokens.T_NONE, NONE); 
 				reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE); 
 				reservedKeys.put(Tokens.T_NOT, NOT); 
 				reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE); 
 				reservedKeys.put(Tokens.T_NTILE, NTILE); 
 				reservedKeys.put(Tokens.T_NULL, NULL); 
 				reservedKeys.put(Tokens.T_NULLIF, NULLIF); 
 				reservedKeys.put(Tokens.T_NUMERIC, NUMERIC); 
 				reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX); 
 				reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH); 
 				reservedKeys.put(Tokens.T_OF, OF); 
 				reservedKeys.put(Tokens.T_OFFSET, OFFSET); 
 				reservedKeys.put(Tokens.T_OLD, OLD); 
 				reservedKeys.put(Tokens.T_ON, ON); 
 				reservedKeys.put(Tokens.T_ONLY, ONLY); 
 				reservedKeys.put(Tokens.T_OPEN, OPEN); 
 				reservedKeys.put(Tokens.T_OR, OR); 
 				reservedKeys.put(Tokens.T_ORDER, ORDER); 
 				reservedKeys.put(Tokens.T_OUT, OUT); 
 				reservedKeys.put(Tokens.T_OUTER, OUTER); 
 				reservedKeys.put(Tokens.T_OVER, OVER); 
 				reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS); 
 				reservedKeys.put(Tokens.T_OVERLAY, OVERLAY); 
 				reservedKeys.put(Tokens.T_PARAMETER, PARAMETER); 
 				reservedKeys.put(Tokens.T_PARTITION, PARTITION); 
 				reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK); 
 				reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT); 
 				reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC); 
 				reservedKeys.put(Tokens.T_POSITION, POSITION); 
 				reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX); 
 				reservedKeys.put(Tokens.T_POWER, POWER); 
 				reservedKeys.put(Tokens.T_PRECISION, PRECISION); 
 				reservedKeys.put(Tokens.T_PREPARE, PREPARE); 
 				reservedKeys.put(Tokens.T_PRIMARY, PRIMARY); 
 				reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE); 
 				reservedKeys.put(Tokens.T_RANGE, RANGE); 
 				reservedKeys.put(Tokens.T_RANK, RANK); 
 				reservedKeys.put(Tokens.T_READS, READS); 
 				reservedKeys.put(Tokens.T_REAL, REAL); 
 				reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE); 
 				reservedKeys.put(Tokens.T_REF, REF); 
 				reservedKeys.put(Tokens.T_REFERENCES, REFERENCES); 
 				reservedKeys.put(Tokens.T_REFERENCING, REFERENCING); 
 				reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX); 
 				reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY); 
 				reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT); 
 				reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT); 
 				reservedKeys.put(Tokens.T_REGR_R2, REGR_R2); 
 				reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE); 
 				reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX); 
 				reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY); 
 				reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY); 
 				reservedKeys.put(Tokens.T_RELEASE, RELEASE); 
 				reservedKeys.put(Tokens.T_REPEAT, REPEAT); 
 				reservedKeys.put(Tokens.T_RESIGNAL, RESIGNAL); 
 				reservedKeys.put(Tokens.T_RETURN, RETURN); 
 				reservedKeys.put(Tokens.T_RETURNS, RETURNS); 
 				reservedKeys.put(Tokens.T_REVOKE, REVOKE); 
 				reservedKeys.put(Tokens.T_RIGHT, RIGHT); 
 				reservedKeys.put(Tokens.T_ROLLBACK, ROLLBACK); 
 				reservedKeys.put(Tokens.T_ROLLUP, ROLLUP); 
 				reservedKeys.put(Tokens.T_ROW, ROW); 
 				reservedKeys.put(Tokens.T_ROW_NUMBER, ROW_NUMBER); 
 				reservedKeys.put(Tokens.T_ROWS, ROWS); 
 				reservedKeys.put(Tokens.T_SAVEPOINT, SAVEPOINT); 
 				reservedKeys.put(Tokens.T_SCOPE, SCOPE); 
 				reservedKeys.put(Tokens.T_SCROLL, SCROLL); 
 				reservedKeys.put(Tokens.T_SEARCH, SEARCH); 
 				reservedKeys.put(Tokens.T_SECOND, SECOND); 
 				reservedKeys.put(Tokens.T_SELECT, SELECT); 
 				reservedKeys.put(Tokens.T_SENSITIVE, SENSITIVE); 
 				reservedKeys.put(Tokens.T_SESSION_USER, SESSION_USER); 
 				reservedKeys.put(Tokens.T_SET, SET); 
 				reservedKeys.put(Tokens.T_SIGNAL, SIGNAL); 
 				reservedKeys.put(Tokens.T_SIMILAR, SIMILAR); 
 				reservedKeys.put(Tokens.T_SMALLINT, SMALLINT); 
 				reservedKeys.put(Tokens.T_SOME, SOME); 
 				reservedKeys.put(Tokens.T_SPECIFIC, SPECIFIC); 
 				reservedKeys.put(Tokens.T_SPECIFICTYPE, SPECIFICTYPE); 
 				reservedKeys.put(Tokens.T_SQL, SQL); 
 				reservedKeys.put(Tokens.T_SQLEXCEPTION, SQLEXCEPTION); 
 				reservedKeys.put(Tokens.T_SQLSTATE, SQLSTATE); 
 				reservedKeys.put(Tokens.T_SQLWARNING, SQLWARNING); 
 				reservedKeys.put(Tokens.T_SQRT, SQRT); 
 				reservedKeys.put(Tokens.T_STACKED, STACKED); 
 				reservedKeys.put(Tokens.T_START, START); 
 				reservedKeys.put(Tokens.T_STATIC, STATIC); 
 				reservedKeys.put(Tokens.T_STDDEV_POP, STDDEV_POP); 
 				reservedKeys.put(Tokens.T_STDDEV_SAMP, STDDEV_SAMP); 
 				reservedKeys.put(Tokens.T_SUBMULTISET, SUBMULTISET); 
 				reservedKeys.put(Tokens.T_SUBSTRING, SUBSTRING); 
 				reservedKeys.put(Tokens.T_SUBSTRING_REGEX, SUBSTRING_REGEX); 
 				reservedKeys.put(Tokens.T_SUM, SUM); 
 				reservedKeys.put(Tokens.T_SYMMETRIC, SYMMETRIC); 
 				reservedKeys.put(Tokens.T_SYSTEM, SYSTEM); 
 				reservedKeys.put(Tokens.T_SYSTEM_USER, SYSTEM_USER); 
 				reservedKeys.put(Tokens.T_TABLE, TABLE); 
 				reservedKeys.put(Tokens.T_TABLESAMPLE, TABLESAMPLE); 
 				reservedKeys.put(Tokens.T_THEN, THEN); 
 				reservedKeys.put(Tokens.T_TIME, TIME); 
 				reservedKeys.put(Tokens.T_TIMESTAMP, TIMESTAMP); 
 				reservedKeys.put(Tokens.T_TIMEZONE_HOUR, TIMEZONE_HOUR); 
 				reservedKeys.put(Tokens.T_TIMEZONE_MINUTE, TIMEZONE_MINUTE); 
 				reservedKeys.put(Tokens.T_TO, TO); 
 				reservedKeys.put(Tokens.T_TRAILING, TRAILING); 
 				reservedKeys.put(Tokens.T_TRANSLATE, TRANSLATE); 
 				reservedKeys.put(Tokens.T_TRANSLATE_REGEX, TRANSLATE_REGEX); 
 				reservedKeys.put(Tokens.T_TRANSLATION, TRANSLATION); 
 				reservedKeys.put(Tokens.T_TREAT, TREAT); 
 				reservedKeys.put(Tokens.T_TRIGGER, TRIGGER); 
 				reservedKeys.put(Tokens.T_TRIM, TRIM); 
 				reservedKeys.put(Tokens.T_TRIM_ARRAY, TRIM_ARRAY); 
 				reservedKeys.put(Tokens.T_TRUE, TRUE); 
 				reservedKeys.put(Tokens.T_TRUNCATE, TRUNCATE); 
 				reservedKeys.put(Tokens.T_UESCAPE, UESCAPE); 
 				reservedKeys.put(Tokens.T_UNDO, UNDO); 
 				reservedKeys.put(Tokens.T_UNION, UNION); 
 				reservedKeys.put(Tokens.T_UNIQUE, UNIQUE); 
 				reservedKeys.put(Tokens.T_UNKNOWN, UNKNOWN); 
 				reservedKeys.put(Tokens.T_UNNEST, UNNEST); 
 				reservedKeys.put(Tokens.T_UNTIL, UNTIL); 
 				reservedKeys.put(Tokens.T_UPDATE, UPDATE); 
 				reservedKeys.put(Tokens.T_UPPER, UPPER); 
 				reservedKeys.put(Tokens.T_USER, USER); 
 				reservedKeys.put(Tokens.T_USING, USING); 
 				reservedKeys.put(Tokens.T_VALUE, VALUE); 
 				reservedKeys.put(Tokens.T_VALUES, VALUES); 
 				reservedKeys.put(Tokens.T_VAR_POP, VAR_POP); 
 				reservedKeys.put(Tokens.T_VAR_SAMP, VAR_SAMP); 
 				reservedKeys.put(Tokens.T_VARBINARY, VARBINARY); 
 				reservedKeys.put(Tokens.T_VARCHAR, VARCHAR); 
 				reservedKeys.put(Tokens.T_VARYING, VARYING); 
 				reservedKeys.put(Tokens.T_WHEN, WHEN); 
 				reservedKeys.put(Tokens.T_WHENEVER, WHENEVER); 
 				reservedKeys.put(Tokens.T_WHERE, WHERE); 
 				reservedKeys.put(Tokens.T_WIDTH_BUCKET, WIDTH_BUCKET); 
 				reservedKeys.put(Tokens.T_WINDOW, WINDOW); 
 				reservedKeys.put(Tokens.T_WITH, WITH); 
 				reservedKeys.put(Tokens.T_WITHIN, WITHIN); 
 				reservedKeys.put(Tokens.T_WITHOUT, WITHOUT); 
 				reservedKeys.put(Tokens.T_WHILE, WHILE); 
 				reservedKeys.put(Tokens.T_YEAR, YEAR); 
 				} 
 				private static final IntValueHashMap commandSet = new IntValueHashMap(299); 
 				static { 
 				commandSet.put(T_ACTION, ACTION); 
 				commandSet.put(T_ADD, ADD); 
 				commandSet.put(T_ADMIN, ADMIN); 
 				commandSet.put(T_AFTER, AFTER); 
 				commandSet.put(T_ALIAS, ALIAS); 
 				commandSet.put(T_ALWAYS, ALWAYS); 
 				commandSet.put(T_ASC, ASC); 
 				commandSet.put(T_AUTHENTICATION, AUTHENTICATION); 
 				commandSet.put(T_AUTOCOMMIT, AUTOCOMMIT); 
 				commandSet.put(T_BACKUP, BACKUP); 
 				commandSet.put(T_BEFORE, BEFORE); 
 				commandSet.put(T_BINARY_DOUBLE, BINARY_DOUBLE); 
 				commandSet.put(T_BINARY_FLOAT, BINARY_FLOAT); 
 				commandSet.put(T_BIT, BIT); 
 				commandSet.put(T_BYTE, BYTE); 
 				commandSet.put(T_BLOCKING, BLOCKING); 
 				commandSet.put(T_BODY, BODY); 
 				commandSet.put(T_CACHE, CACHE); 
 				commandSet.put(T_CACHED, CACHED); 
 				commandSet.put(T_CASCADE, CASCADE); 
 				commandSet.put(T_CATALOG, CATALOG); 
 				commandSet.put(T_CHARACTERISTICS, CHARACTERISTICS); 
 				commandSet.put(T_CHARACTERS, CHARACTERS); 
 				commandSet.put(T_CHECKPOINT, CHECKPOINT); 
 				commandSet.put(T_CITEXT, CITEXT); 
 				commandSet.put(T_CRYPT_KEY, CRYPT_KEY); 
 				commandSet.put(T_CLASS, CLASS); 
 				commandSet.put(T_CLUSTERED, CLUSTERED); 
 				commandSet.put(T_COLLATE, COLLATE); 
 				commandSet.put(T_COLLATION, COLLATION); 
 				commandSet.put(T_COMMENT, COMMENT); 
 				commandSet.put(T_COMMITTED, COMMITTED); 
 				commandSet.put(T_COMPACT, COMPACT); 
 				commandSet.put(T_COMPRESSED, COMPRESSED); 
 				commandSet.put(T_CONDITION_IDENTIFIER, Tokens.CONDITION_IDENTIFIER); 
 				commandSet.put(T_CONFLICT, CONFLICT); 
 				commandSet.put(T_CONTAINS, CONTAINS); 
 				commandSet.put(T_CONTINUE, CONTINUE); 
 				commandSet.put(T_CONTROL, CONTROL); 
 				commandSet.put(T_CURDATE, CURDATE); 
 				commandSet.put(T_CURRVAL, CURRVAL); 
 				commandSet.put(T_CURTIME, CURTIME); 
 				commandSet.put(T_DATA, DATA); 
 				commandSet.put(T_DATABASE, DATABASE); 
 				commandSet.put(T_DEADLOCK, DEADLOCK); 
 				commandSet.put(T_DEFAULTS, DEFAULTS); 
 				commandSet.put(T_DEFRAG, DEFRAG); 
 				commandSet.put(T_DELAY, DELAY); 
 				commandSet.put(T_DESC, DESC); 
 				commandSet.put(T_DIAGNOSTICS, DIAGNOSTICS); 
 				commandSet.put(T_DIGEST, DIGEST); 
 				commandSet.put(T_DOMAIN, DOMAIN); 
 				commandSet.put(T_EVENT, EVENT); 
 				commandSet.put(T_EXCLUDING, EXCLUDING); 
 				commandSet.put(T_EXPLAIN, EXPLAIN); 
 				commandSet.put(T_FILE, FILE); 
 				commandSet.put(T_FILES, FILES); 
 				commandSet.put(T_FINAL, FINAL); 
 				commandSet.put(T_FIRST, FIRST); 
 				commandSet.put(T_FORMAT, FORMAT); 
 				commandSet.put(T_FOUND, FOUND); 
 				commandSet.put(T_G_FACTOR, G); 
 				commandSet.put(T_GC, GC); 
 				commandSet.put(T_GENERATED, GENERATED); 
 				commandSet.put(T_GRANTED, GRANTED); 
 				commandSet.put(T_GROUP_CONCAT, GROUP_CONCAT); 
 				commandSet.put(T_HEADER, HEADER); 
 				commandSet.put(T_IF, Tokens.IF); 
 				commandSet.put(T_IGNORECASE, IGNORECASE); 
 				commandSet.put(T_IMMEDIATELY, IMMEDIATELY); 
 				commandSet.put(T_INCLUDING, INCLUDING); 
 				commandSet.put(T_INCREMENT, INCREMENT); 
 				commandSet.put(T_INDEX, INDEX); 
 				commandSet.put(T_INDEXER, INDEXER); 
 				commandSet.put(T_INITIAL, INITIAL); 
 				commandSet.put(T_INPUT, INPUT); 
 				commandSet.put(T_INSTEAD, INSTEAD); 
 				commandSet.put(T_INTEGRITY, INTEGRITY); 
 				commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT); 
 				commandSet.put(T_ISOLATION, ISOLATION); 
 				commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE); 
 				commandSet.put(T_IS_READONLY_DATABASE_FILES, 
 				IS_READONLY_DATABASE_FILES); 
 				commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION); 
 				commandSet.put(T_JAVA, JAVA); 
 				commandSet.put(T_K_FACTOR, K); 
 				commandSet.put(T_KEY, KEY); 
 				commandSet.put(T_LAST, LAST); 
 				commandSet.put(T_LASTVAL, LASTVAL); 
 				commandSet.put(T_LENGTH, LENGTH); 
 				commandSet.put(T_LEVEL, LEVEL); 
 				commandSet.put(T_LIBRARY, LIBRARY); 
 				commandSet.put(T_LIMIT, LIMIT); 
 				commandSet.put(T_LOB, LOB); 
 				commandSet.put(T_LOCK, LOCK); 
 				commandSet.put(T_LOCKS, LOCKS); 
 				commandSet.put(T_LONG, LONG); 
 				commandSet.put(T_LONGBLOB, LONGBLOB); 
 				commandSet.put(T_LONGTEXT, LONGTEXT); 
 				commandSet.put(T_LONGVAR, LONGVAR); 
 				commandSet.put(T_M_FACTOR, M); 
 				commandSet.put(T_MATCHED, MATCHED); 
 				commandSet.put(T_MAXROWS, MAXROWS); 
 				commandSet.put(T_MAXVALUE, MAXVALUE); 
 				commandSet.put(T_MEDIAN, MEDIAN); 
 				commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB); 
 				commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT); 
 				commandSet.put(T_MEMORY, MEMORY); 
 				commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT); 
 				commandSet.put(T_MILLIS, MILLIS); 
 				commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT); 
 				commandSet.put(T_MINVALUE, MINVALUE); 
 				commandSet.put(T_MORE, MORE); 
 				commandSet.put(T_MVCC, MVCC); 
 				commandSet.put(T_MVLOCKS, MVLOCKS); 
 				commandSet.put(T_NAME, NAME); 
 				commandSet.put(T_NEXT, NEXT); 
 				commandSet.put(T_NEXTVAL, NEXTVAL); 
 				commandSet.put(T_NAN, NAN); 
 				commandSet.put(T_NIO, NIO); 
 				commandSet.put(T_NOW, NOW); 
 				commandSet.put(T_NULLS, NULLS); 
 				commandSet.put(T_NUMBER, NUMBER); 
 				commandSet.put(T_NVARCHAR2, NVARCHAR2); 
 				commandSet.put(T_NVL2, NVL2); 
 				commandSet.put(T_OBJECT, OBJECT); 
 				commandSet.put(T_OCTETS, OCTETS); 
 				commandSet.put(T_OFF, OFF); 
 				commandSet.put(T_OPTION, OPTION); 
 				commandSet.put(T_ORDINALITY, ORDINALITY); 
 				commandSet.put(T_OVERRIDING, OVERRIDING); 
 				commandSet.put(T_P_FACTOR, P); 
 				commandSet.put(T_PAD, PAD); 
 				commandSet.put(T_PARTIAL, PARTIAL); 
 				commandSet.put(T_PASSWORD, PASSWORD); 
 				commandSet.put(T_PLACING, PLACING); 
 				commandSet.put(T_PLAN, PLAN); 
 				commandSet.put(T_PRESERVE, PRESERVE); 
 				commandSet.put(T_PREVVAL, PREVVAL); 
 				commandSet.put(T_PRIVILEGES, PRIVILEGES); 
 				commandSet.put(T_PROPERTY, PROPERTY); 
 				commandSet.put(T_RAW, RAW); 
 				commandSet.put(T_READ, READ); 
 				commandSet.put(T_READONLY, READONLY); 
 				commandSet.put(T_REFERENTIAL, REFERENTIAL); 
 				commandSet.put(T_REGULAR, REGULAR); 
 				commandSet.put(T_RENAME, RENAME); 
 				commandSet.put(T_REPEATABLE, REPEATABLE); 
 				commandSet.put(T_RESET, RESET); 
 				commandSet.put(T_RESTART, RESTART); 
 				commandSet.put(T_RESTRICT, RESTRICT); 
 				commandSet.put(T_RESULT, RESULT); 
 				commandSet.put(T_ROLE, ROLE); 
 				commandSet.put(T_ROUTINE, ROUTINE); 
 				commandSet.put(T_ROW_COUNT, ROW_COUNT); 
 				commandSet.put(T_ROWNUM, ROWNUM); 
 				commandSet.put(T_SCALE, SCALE); 
 				commandSet.put(T_SCHEMA, SCHEMA); 
 				commandSet.put(T_SCRIPT, SCRIPT); 
 				commandSet.put(T_SEQUENCE, SEQUENCE); 
 				commandSet.put(T_SEPARATOR, SEPARATOR); 
 				commandSet.put(T_SERIALIZABLE, SERIALIZABLE); 
 				commandSet.put(T_SERVER, SERVER); 
 				commandSet.put(T_SESSION, SESSION); 
 				commandSet.put(T_SETS, SETS); 
 				commandSet.put(T_SHUTDOWN, SHUTDOWN); 
 				commandSet.put(T_SIMPLE, SIMPLE); 
 				commandSet.put(T_SIZE, SIZE); 
 				commandSet.put(T_SOURCE, SOURCE); 
 				commandSet.put(T_SQL_BIGINT, SQL_BIGINT); 
 				commandSet.put(T_SQL_BINARY, SQL_BINARY); 
 				commandSet.put(T_SQL_BIT, SQL_BIT); 
 				commandSet.put(T_SQL_BLOB, SQL_BLOB); 
 				commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN); 
 				commandSet.put(T_SQL_CHAR, SQL_CHAR); 
 				commandSet.put(T_SQL_CLOB, SQL_CLOB); 
 				commandSet.put(T_SQL_DATALINK, SQL_DATALINK); 
 				commandSet.put(T_SQL_DATE, SQL_DATE); 
 				commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL); 
 				commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE); 
 				commandSet.put(T_SQL_FLOAT, SQL_FLOAT); 
 				commandSet.put(T_SQL_INTEGER, SQL_INTEGER); 
 				commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR); 
 				commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY); 
 				commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR); 
 				commandSet.put(T_SQL_NCHAR, SQL_NCHAR); 
 				commandSet.put(T_SQL_NCLOB, SQL_NCLOB); 
 				commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC); 
 				commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR); 
 				commandSet.put(T_SQL_REAL, SQL_REAL); 
 				commandSet.put(T_SQL_ROWID, SQL_ROWID); 
 				commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT); 
 				commandSet.put(T_SQL_SQLXML, SQL_SQLXML); 
 				commandSet.put(T_SQL_TIME, SQL_TIME); 
 				commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP); 
 				commandSet.put(T_SQL_TINYINT, SQL_TINYINT); 
 				commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY); 
 				commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR); 
 				commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY); 
 				commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND); 
 				commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND); 
 				commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR); 
 				commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE); 
 				commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH); 
 				commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER); 
 				commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND); 
 				commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK); 
 				commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR); 
 				commandSet.put(T_STATEMENT, STATEMENT); 
 				commandSet.put(T_STYLE, STYLE); 
 				commandSet.put(T_SYNTAX, SYNTAX); 
 				commandSet.put(T_T_FACTOR, T); 
 				commandSet.put(T_TDC, TDC); 
 				commandSet.put(T_TEMP, TEMP); 
 				commandSet.put(T_TEMPORARY, TEMPORARY); 
 				commandSet.put(T_TEXT, TEXT); 
 				commandSet.put(T_TYPES, TYPES); 
 				commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE); 
 				commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD); 
 				commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF); 
 				commandSet.put(T_TINYBLOB, TINYBLOB); 
 				commandSet.put(T_TINYTEXT, TINYTEXT); 
 				commandSet.put(T_TOP, TOP); 
 				commandSet.put(T_TRANSACTION, TRANSACTION); 
 				commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE); 
 				commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED); 
 				commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK); 
 				commandSet.put(T_TTI, TTI); 
 				commandSet.put(T_TYPE, TYPE); 
 				commandSet.put(T_UNCOMMITTED, UNCOMMITTED); 
 				commandSet.put(T_USAGE, USAGE); 
 				commandSet.put(T_VIEW, VIEW); 
 				commandSet.put(T_VARCHAR2, VARCHAR2); 
 				commandSet.put(T_WORK, WORK); 
 				commandSet.put(T_WRAPPER, WRAPPER); 
 				commandSet.put(T_WRITE, WRITE); 
 				commandSet.put(T_WRITE_DELAY, WRITE_DELAY); 
 				commandSet.put(T_ZONE, ZONE); 
 				commandSet.put(T_ACOS, ACOS); 
 				commandSet.put(T_ACTION_ID, ACTION_ID); 
 				commandSet.put(T_ADD_MONTHS, ADD_MONTHS); 
 				commandSet.put(T_ARRAY_SORT, ARRAY_SORT); 
 				commandSet.put(T_ASCII, ASCII); 
 				commandSet.put(T_ASIN, ASIN); 
 				commandSet.put(T_ATAN, ATAN); 
 				commandSet.put(T_ATAN2, ATAN2); 
 				commandSet.put(T_BITAND, BITAND); 
 				commandSet.put(T_BITANDNOT, BITANDNOT); 
 				commandSet.put(T_BITLENGTH, BITLENGTH); 
 				commandSet.put(T_BITNOT, BITNOT); 
 				commandSet.put(T_BITOR, BITOR); 
 				commandSet.put(T_BITXOR, BITXOR); 
 				commandSet.put(T_CASEWHEN, Tokens.CASEWHEN); 
 				commandSet.put(T_CONCAT_WORD, CONCAT_WORD); 
 				commandSet.put(T_CONCAT_WS, CONCAT_WS); 
 				commandSet.put(T_CHR, CHR); 
 				commandSet.put(T_COS, COS); 
 				commandSet.put(T_COT, COT); 
 				commandSet.put(T_DATABASE_NAME, DATABASE_NAME); 
 				commandSet.put(T_DATE_ADD, DATE_ADD); 
 				commandSet.put(T_DATE_SUB, DATE_SUB); 
 				commandSet.put(T_DATEADD, DATEADD); 
 				commandSet.put(T_DATEDIFF, DATEDIFF); 
 				commandSet.put(T_DAY_NAME, DAY_NAME); 
 				commandSet.put(T_DAY_OF_MONTH, DAY_OF_MONTH); 
 				commandSet.put(T_DAY_OF_WEEK, DAY_OF_WEEK); 
 				commandSet.put(T_DAY_OF_YEAR, DAY_OF_YEAR); 
 				commandSet.put(T_DAYNAME, DAYNAME); 
 				commandSet.put(T_DAYOFMONTH, DAYOFMONTH); 
 				commandSet.put(T_DAYOFWEEK, DAYOFWEEK); 
 				commandSet.put(T_DAYOFYEAR, DAYOFYEAR); 
 				commandSet.put(T_DAYS, DAYS); 
 				commandSet.put(T_DBTIMEZONE, DBTIMEZONE); 
 				commandSet.put(T_DECODE, DECODE); 
 				commandSet.put(T_DEGREES, DEGREES); 
 				commandSet.put(T_DIFFERENCE, DIFFERENCE); 
 				commandSet.put(T_DMOD, DMOD); 
 				commandSet.put(T_FROM_TZ, FROM_TZ); 
 				commandSet.put(T_GREATEST, GREATEST); 
 				commandSet.put(T_HEXTORAW, HEXTORAW); 
 				commandSet.put(T_INSTR, Tokens.INSTR); 
 				commandSet.put(T_IFNULL, Tokens.IFNULL); 
 				commandSet.put(T_ISNULL, Tokens.ISNULL); 
 				commandSet.put(T_LAST_DAY, LAST_DAY); 
 				commandSet.put(T_LCASE, LCASE); 
 				commandSet.put(T_LEAST, LEAST); 
 				commandSet.put(T_LOAD_FILE, LOAD_FILE); 
 				commandSet.put(T_LOCATE, LOCATE); 
 				commandSet.put(T_LOG, LOG); 
 				commandSet.put(T_LOG10, LOG10); 
 				commandSet.put(T_LPAD, LPAD); 
 				commandSet.put(T_LTRIM, LTRIM); 
 				commandSet.put(T_MONTH_NAME, MONTH_NAME); 
 				commandSet.put(T_MONTHNAME, MONTHNAME); 
 				commandSet.put(T_MONTHS_BETWEEN, MONTHS_BETWEEN); 
 				commandSet.put(T_NAMES, Tokens.NAMES); 
 				commandSet.put(T_NEW_TIME, NEW_TIME); 
 				commandSet.put(T_NEXT_DAY, NEXT_DAY); 
 				commandSet.put(T_NUMTODSINTERVAL, NUMTODSINTERVAL); 
 				commandSet.put(T_NUMTOYMINTERVAL, NUMTOYMINTERVAL); 
 				commandSet.put(T_NVL, Tokens.IFNULL); 
 				commandSet.put(T_OCTETLENGTH, OCTETLENGTH); 
 				commandSet.put(T_PI, PI); 
 				commandSet.put(T_POSITION_ARRAY, POSITION_ARRAY); 
 				commandSet.put(T_QUARTER, QUARTER); 
 				commandSet.put(T_RADIANS, RADIANS); 
 				commandSet.put(T_RAND, RAND); 
 				commandSet.put(T_RAWTOHEX, RAWTOHEX); 
 				commandSet.put(T_REGEXP_MATCHES, REGEXP_MATCHES); 
 				commandSet.put(T_REGEXP_SUBSTRING, REGEXP_SUBSTRING); 
 				commandSet.put(T_REGEXP_SUBSTRING_ARRAY, REGEXP_SUBSTRING_ARRAY); 
 				commandSet.put(T_REPLACE, REPLACE); 
 				commandSet.put(T_REVERSE, REVERSE); 
 				commandSet.put(T_ROUND, ROUND); 
 				commandSet.put(T_ROUNDMAGIC, ROUNDMAGIC); 
 				commandSet.put(T_RPAD, RPAD); 
 				commandSet.put(T_RTRIM, RTRIM); 
 				commandSet.put(T_SECONDS_MIDNIGHT, SECONDS_MIDNIGHT); 
 				commandSet.put(T_SESSION_ID, SESSION_ID); 
 				commandSet.put(T_SESSIONTIMEZONE, SESSIONTIMEZONE); 
 				commandSet.put(T_SIGN, SIGN); 
 				commandSet.put(T_SIN, SIN); 
 				commandSet.put(T_SORT_ARRAY, SORT_ARRAY); 
 				commandSet.put(T_SOUNDEX, SOUNDEX); 
 				commandSet.put(T_SPACE, SPACE); 
 				commandSet.put(T_SUBSTR, SUBSTR); 
 				commandSet.put(T_SYS_EXTRACT_UTC, SYS_EXTRACT_UTC); 
 				commandSet.put(T_SYSDATE, SYSDATE); 
 				commandSet.put(T_SYSTIMESTAMP, SYSTIMESTAMP); 
 				commandSet.put(T_TAN, TAN); 
 				commandSet.put(T_TO_CHAR, TO_CHAR); 
 				commandSet.put(T_TO_DATE, TO_DATE); 
 				commandSet.put(T_TO_DSINTERVAL, TO_DSINTERVAL); 
 				commandSet.put(T_TO_YMINTERVAL, TO_YMINTERVAL); 
 				commandSet.put(T_TO_NUMBER, TO_NUMBER); 
 				commandSet.put(T_TO_TIMESTAMP, TO_TIMESTAMP); 
 				commandSet.put(T_TO_TIMESTAMP_TZ, TO_TIMESTAMP_TZ); 
 				commandSet.put(T_TODAY, TODAY); 
 				commandSet.put(T_TRUNC, TRUNC); 
 				commandSet.put(T_UCASE, UCASE); 
 				commandSet.put(T_TRANSACTION_ID, TRANSACTION_ID); 
 				commandSet.put(T_TRANSACTION_SIZE, TRANSACTION_SIZE); 
 				commandSet.put(T_TZ_OFFSET, TZ_OFFSET); 
 				commandSet.put(T_UUID, UUID); 
 				commandSet.put(T_UNIX_MILLIS, UNIX_MILLIS); 
 				commandSet.put(T_UNIX_TIMESTAMP, UNIX_TIMESTAMP); 
 				commandSet.put(T_WEEK, WEEK); 
 				commandSet.put(T_WEEK_OF_YEAR, WEEK_OF_YEAR); 
 				commandSet.put(T_ISOLATION_LEVEL, ISOLATION_LEVEL); 
 				commandSet.put(T_SESSION_ISOLATION_LEVEL, SESSION_ISOLATION_LEVEL); 
 				commandSet.put(T_DATABASE_ISOLATION_LEVEL, DATABASE_ISOLATION_LEVEL); 
 				commandSet.put(T_TRANSACTION_CONTROL, TRANSACTION_CONTROL); 
 				commandSet.put(T_TIMEZONE, TIMEZONE); 
 				commandSet.put(T_SESSION_TIMEZONE, SESSION_TIMEZONE); 
 				commandSet.put(T_DATABASE_TIMEZONE, DATABASE_TIMEZONE); 
 				commandSet.put(T_DATABASE_VERSION, DATABASE_VERSION); 
 				commandSet.put(T_LOB_ID, LOB_ID); 
 				commandSet.put(T_SEQUENCE_ARRAY, SEQUENCE_ARRAY); 
 				commandSet.put(T_ASTERISK, Tokens.ASTERISK); 
 				commandSet.put(T_CLOSEBRACKET, CLOSEBRACKET); 
 				commandSet.put(T_COLON, Tokens.COLON); 
 				commandSet.put(T_COMMA, Tokens.COMMA); 
 				commandSet.put(T_CONCAT, Tokens.CONCAT); 
 				commandSet.put(T_DIVIDE, Tokens.DIVIDE); 
 				commandSet.put(T_EQUALS, Tokens.EQUALS); 
 				commandSet.put(T_GREATER, Tokens.GREATER); 
 				commandSet.put(T_GREATER_EQUALS, Tokens.GREATER_EQUALS); 
 				commandSet.put(T_LEFTBRACKET, LEFTBRACKET); 
 				commandSet.put(T_LESS, Tokens.LESS); 
 				commandSet.put(T_LESS_EQUALS, Tokens.LESS_EQUALS); 
 				commandSet.put(T_MINUS, Tokens.MINUS); 
 				commandSet.put(T_NOT_EQUALS, Tokens.NOT_EQUALS); 
 				commandSet.put(T_NOT_EQUALS_ALT, Tokens.NOT_EQUALS); 
 				commandSet.put(T_OPENBRACKET, OPENBRACKET); 
 				commandSet.put(T_PLUS, Tokens.PLUS); 
 				commandSet.put(T_QUESTION, Tokens.QUESTION); 
 				commandSet.put(T_RIGHTBRACKET, RIGHTBRACKET); 
 				commandSet.put(T_SEMICOLON, SEMICOLON); 
 				} 
 				static int get(String token) { 
 				int type = reservedKeys.get(token, -1); 
 				if (type == -1) { 
 				return commandSet.get(token, -1); 
 				} 
 				return type; 
 				} 
 				public static boolean isCoreKeyword(int token) { 
 				return coreReservedWords.contains(token); 
 				} 
 				public static boolean isKeyword(String token) { 
 				return reservedKeys.containsKey(token); 
 				} 
 				public static int getKeywordID(String token, int defaultValue) { 
 				return reservedKeys.get(token, defaultValue); 
 				} 
 				public static int getNonKeywordID(String token, int defaultValue) { 
 				return commandSet.get(token, defaultValue); 
 				} 
 				public static String getKeyword(int token) { 
 				String key = (String) reservedKeys.getKey(token); 
 				if (key != null) { 
 				return key; 
 				} 
 				key = (String) commandSet.getKey(token); 
 				return key; 
 				} 
 				private static final OrderedIntHashSet coreReservedWords; 
 				static { 
 				coreReservedWords = new OrderedIntHashSet(128); 
 				short[] keyword = { 
 				AS, AND, ALL, ANY, AT, AVG, BY, BETWEEN, BOTH, CALL, CASE, CAST, 
 				CORRESPONDING, CONVERT, COUNT, COALESCE, CREATE, CROSS, DEFAULT, 
 				DISTINCT, DO, DROP, ELSE, EVERY, EXISTS, EXCEPT, FOR, FROM, FULL, 
 				GRANT, GROUP, HAVING, INTO, IS, IN, INTERSECT, JOIN, INNER, LEFT, 
 				LEADING, LIKE, MAX, MIN, NATURAL, NULLIF, NOT, ON, ORDER, OR, 
 				OUTER, PRIMARY, REFERENCES, RIGHT, SELECT, SET, SOME, STDDEV_POP, 
 				STDDEV_SAMP, SUM, TABLE, THEN, TO, TRAILING, TRIGGER, UNION, 
 				UNIQUE, USING, VALUES, VAR_POP, VAR_SAMP, WHEN, WHERE, WITH, 
 				}; 
 				for (int i = 0; i < keyword.length; i++) { 
 				coreReservedWords.add(keyword[i]); 
 				} 
 				} 
 				public static final short[] SQL_INTERVAL_FIELD_CODES = new short[] { 
 				Tokens.YEAR, Tokens.MONTH, Tokens.DAY, Tokens.HOUR, Tokens.MINUTE, 
 				Tokens.SECOND 
 				}; 
 				public static final String[] SQL_INTERVAL_FIELD_NAMES = new String[] { 
 				Tokens.T_YEAR, Tokens.T_MONTH, Tokens.T_DAY, Tokens.T_HOUR, 
 				Tokens.T_MINUTE, Tokens.T_SECOND 
 				}; 
 				private static final IntKeyHashMap sqlTSILookup = new IntKeyHashMap(10); 
 				static { 
 				sqlTSILookup.put(SQL_TSI_DAY, T_SQL_TSI_DAY); 
 				sqlTSILookup.put(SQL_TSI_FRAC_SECOND, T_SQL_TSI_FRAC_SECOND); 
 				sqlTSILookup.put(SQL_TSI_MILLI_SECOND, T_SQL_TSI_MILLI_SECOND); 
 				sqlTSILookup.put(SQL_TSI_HOUR, T_SQL_TSI_HOUR); 
 				sqlTSILookup.put(SQL_TSI_MINUTE, T_SQL_TSI_MINUTE); 
 				sqlTSILookup.put(SQL_TSI_MONTH, T_SQL_TSI_MONTH); 
 				sqlTSILookup.put(SQL_TSI_QUARTER, T_SQL_TSI_QUARTER); 
 				sqlTSILookup.put(SQL_TSI_SECOND, T_SQL_TSI_SECOND); 
 				sqlTSILookup.put(SQL_TSI_WEEK, T_SQL_TSI_WEEK); 
 				sqlTSILookup.put(SQL_TSI_YEAR, T_SQL_TSI_YEAR); 
 				} 
 				public static String getSQLTSIString(int token) { 
 				return (String) sqlTSILookup.get(token); 
 				} 
 				} 
 				
 
 LINES: 		| BitType.java: 274 - 282 || NumberType.java: 863 - 871 || IntervalType.java: 524 - 532 || PgType.java: 359 - 368 || JDBCPreparedStatement.java: 4237 - 4245 |
 CLONE CLASS: 	} 
 				case Types.TINYINT : 
 				case Types.SQL_SMALLINT : 
 				case Types.SQL_INTEGER : 
 				case Types.SQL_BIGINT : 
 				case Types.SQL_REAL : 
 				case Types.SQL_FLOAT : 
 				case Types.SQL_DOUBLE : 
 				case Types.SQL_NUMERIC : 
 				
 
 LINES: 		| JDBCParameterMetaData.java: 367 - 372 || DatabaseInformationMain.java: 2574 - 2579 || DatabaseInformationMain.java: 2729 - 2734 || JDBCResultSetMetaData.java: 954 - 959 |
 CLONE CLASS: 	if (type.isIntervalType()) { 
 				type = ((IntervalType) type).getCharacterType(); 
 				} else if (type.isDateTimeTypeWithZone()) { 
 				type = ((DateTimeType) type).getDateTimeTypeWithoutZone(); 
 				} 
 				} 
 				
 
 LINES: 		| SchemaManager.java: 2301 - 2313 || SchemaManager.java: 2317 - 2329 |
 CLONE CLASS: 	RoutineSchema routine = 
 				(RoutineSchema) set.getObject(name.name); 
 				object = routine; 
 				Routine[] specifics = routine.getSpecificRoutines(); 
 				for (int i = 0; i < specifics.length; i++) { 
 				removeSchemaObject(specifics[i].getSpecificName()); 
 				} 
 				break; 
 				} 
 				
 
 LINES: 		| BitType.java: 384 - 394 || CharacterType.java: 649 - 659 || BooleanType.java: 255 - 265 || IntervalType.java: 643 - 653 |
 CLONE CLASS: 	} 
 				public Object convertJavaToSQL(SessionInterface session, Object a) { 
 				return convertToDefaultType(session, a); 
 				} 
 				public String convertToString(Object a) { 
 				if (a == null) { 
 				return null; 
 				} 
 				
 
 LINES: 		| BitType.java: 444 - 449 || BinaryType.java: 602 - 607 |
 CLONE CLASS: 	if (hasLength) { 
 				end = offset + length; 
 				} else { 
 				end = dataLength > offset ? dataLength 
 				: offset; 
 				} 
 				
 
 LINES: 		| RB.java: 142 - 179 || SqltoolRB.java: 307 - 344 |
 CLONE CLASS: 	} 
 				public String getString(String... strings) { 
 				return vrb.getString(this, strings); 
 				} 
 				public String getString(int i1) { 
 				return vrb.getString(this, i1); 
 				} 
 				public String getString(int i1, int i2) { 
 				return vrb.getString(this, i1, i2); 
 				} 
 				public String getString(int i1, int i2, int i3) { 
 				return vrb.getString(this, i1, i2, i3); 
 				} 
 				public String getString(int i1, String s2) { 
 				return vrb.getString(this, i1, s2); 
 				} 
 				public String getString(String s1, int i2) { 
 				return vrb.getString(this, s1, i2); 
 				} 
 				public String getString(int i1, int i2, String s3) { 
 				return vrb.getString(this, i1, i2, s3); 
 				} 
 				public String getString(int i1, String s2, int i3) { 
 				return vrb.getString(this, i1, s2, i3); 
 				} 
 				public String getString(String s1, int i2, int i3) { 
 				return vrb.getString(this, s1, i2, i3); 
 				} 
 				public String getString(int i1, String s2, String s3) { 
 				return vrb.getString(this, i1, s3, s3); 
 				} 
 				public String getString(String s1, String s2, int i3) { 
 				return vrb.getString(this, s1, s2, i3); 
 				} 
 				public String getString(String s1, int i2, String s3) { 
 				return vrb.getString(this, s1, i2, s3); 
 				} 
 				} 
 				
 
 LINES: 		| JDBCPool.java: 151 - 180 || JDBCResultSet.java: 6952 - 6982 || JDBCParameterMetaData.java: 261 - 292 || JDBCDatabaseMetaData.java: 5782 - 5809 || JDBCResultSetMetaData.java: 817 - 848 || JDBCDataSource.java: 193 - 224 |
 CLONE CLASS: 	} 
 				@SuppressWarnings("unchecked") 
 				public <T>T unwrap(java.lang.Class<T> iface) throws java.sql.SQLException { 
 				if (isWrapperFor(iface)) { 
 				return (T) this; 
 				} 
 				throw JDBCUtil.invalidArgument("iface: " + iface); 
 				} 
 				
 
 LINES: 		| RowStoreAVLDisk.java: 41 - 46 || RowStoreAVLDiskData.java: 40 - 45 || RowStoreAVLMemory.java: 37 - 42 |
 CLONE CLASS: 	import org.hsqldb.RowAction; 
 				import org.hsqldb.Session; 
 				import org.hsqldb.Table; 
 				import org.hsqldb.TransactionManager; 
 				import org.hsqldb.error.Error; 
 				import org.hsqldb.error.ErrorCode; 
 				
 
 LINES: 		| KMPSearchAlgorithm.java: 148 - 161 || KMPSearchAlgorithm.java: 217 - 230 |
 CLONE CLASS: 	patternIndex++; 
 				} else if (patternIndex > 0) { 
 				patternIndex = table[patternIndex]; 
 				patternIndex++; 
 				} 
 				if (patternIndex == patternLength) { 
 				return streamIndex - (patternLength - 1); 
 				} 
 				} 
 				return -1; 
 				} 
 				
 
 LINES: 		| JDBCDatabaseMetaData.java: 3773 - 3779 || JDBCDatabaseMetaData.java: 3842 - 3848 || JDBCDatabaseMetaData.java: 4074 - 4080 |
 CLONE CLASS: 	if (table == null) { 
 				throw JDBCUtil.nullArgument("table"); 
 				} 
 				catalog = translateCatalog(catalog); 
 				schema  = translateSchema(schema); 
 				StringBuffer select = 
 				
 
 LINES: 		| NullType.java: 32 - 38 || BlobType.java: 32 - 38 |
 CLONE CLASS: 	package org.hsqldb.types; 
 				import org.hsqldb.Session; 
 				import org.hsqldb.SessionInterface; 
 				import org.hsqldb.Tokens; 
 				import org.hsqldb.error.Error; 
 				import org.hsqldb.error.ErrorCode; 
 				
 
 LINES: 		| DatabaseInformationFull.java: 7550 - 7563 || DatabaseInformationFull.java: 7744 - 7757 |
 CLONE CLASS: 	for (int i = 0; i < grantees.size(); i++) { 
 				Grantee granteeObject = (Grantee) grantees.get(i); 
 				OrderedHashSet rights = 
 				granteeObject.getAllDirectPrivileges(object); 
 				OrderedHashSet grants = 
 				granteeObject.getAllGrantedPrivileges(object); 
 				if (!grants.isEmpty()) { 
 				grants.addAll(rights); 
 				rights = grants; 
 				} 
 				for (int j = 0; j < rights.size(); j++) { 
 				
 
 LINES: 		| DatabaseInformationFull.java: 1967 - 1976 || DatabaseInformationFull.java: 2900 - 2910 || DatabaseInformationFull.java: 4550 - 4558 |
 CLONE CLASS: 	Object[]     row; 
 				tables = 
 				database.schemaManager.databaseObjectIterator(SchemaObject.TABLE); 
 				while (tables.hasNext()) { 
 				table = (Table) tables.next(); 
 				if (table.isView() 
 				
 
 LINES: 		| SqlFileScanner.java: 120 - 128 || SqlFileScanner.java: 269 - 277 |
 CLONE CLASS: 	int j = offset; 
 				int l = packed.length(); 
 				while (i < l) { 
 				int count = packed.charAt(i++); 
 				int value = packed.charAt(i++); 
 				do result[j++] = value; while (--count > 0); 
 				} 
 				return j; 
 				} 
 				
 
 LINES: 		| JDBCPreparedStatement.java: 4269 - 4276 || JDBCPreparedStatement.java: 4295 - 4302 |
 CLONE CLASS: 	try { 
 				o = outType.convertToDefaultType(session, o); 
 				break; 
 				} catch (HsqlException e) { 
 				JDBCUtil.throwError(e); 
 				} 
 				} 
 				
 
 LINES: 		| Scanner.java: 346 - 355 || Scanner.java: 472 - 481 || Scanner.java: 1277 - 1286 |
 CLONE CLASS: 	if (token.isMalformed) { 
 				return; 
 				} 
 				if (scanSeparator() && charAt(currentPosition) == '\'') { 
 				continue; 
 				} 
 				break; 
 				} 
 				
 
 LINES: 		| QuerySpecification.java: 328 - 338 || QueryExpression.java: 416 - 426 |
 CLONE CLASS: 	} 
 				public void resolveTypes(Session session) { 
 				if (isResolved) { 
 				return; 
 				} 
 				resolveTypesPartOne(session); 
 				resolveTypesPartTwo(session); 
 				resolveTypesPartThree(session); 
 				
 
 LINES: 		| RAFile.java: 243 - 250 || RAFile.java: 297 - 304 |
 CLONE CLASS: 	} 
 				if (seekPosition < bufferOffset 
 				|| seekPosition >= bufferOffset + buffer.length) { 
 				readIntoBuffer(); 
 				} else { 
 				cacheHit++; 
 				} 
 				
 
 LINES: 		| SchemaManager.java: 1404 - 1411 || SchemaManager.java: 1417 - 1424 || SchemaManager.java: 1434 - 1441 |
 CLONE CLASS: 	objectName = set.getName(name); 
 				if (objectName == null) { 
 				return null; 
 				} 
 				table = 
 				(Table) schema.tableList.get(objectName.parent.name); 
 				
 
 LINES: 		| ConnectionDialog.java: 294 - 300 || Transfer.java: 1139 - 1145 |
 CLONE CLASS: 	p.add("South", createLabel("")); 
 				p.add("East", createLabel("")); 
 				p.add("West", createLabel("")); 
 				p.setBackground(SystemColor.control); 
 				return p; 
 				} 
 				
 
 LINES: 		| FunctionSQL.java: 1373 - 1386 || FunctionSQL.java: 1399 - 1412 |
 CLONE CLASS: 	} 
 				if (nodes[1].dataType == null) { 
 				nodes[1].dataType = nodes[0].dataType; 
 				} 
 				if (nodes[0].dataType == null) { 
 				throw Error.error(ErrorCode.X_42567); 
 				} 
 				if (!nodes[0].dataType.isNumberType() 
 				|| !nodes[1].dataType.isNumberType()) { 
 				throw Error.error(ErrorCode.X_42563); 
 				} 
 				
 
 LINES: 		| TestOdbcService.java: 267 - 277 || TestOdbcService.java: 302 - 312 |
 CLONE CLASS: 	assertTrue("No rows fetched", rs.next()); 
 				assertEquals("str", rs.getString(4)); 
 				assertEquals(15, rs.getInt(1)); 
 				assertEquals(3, rs.getInt(2)); 
 				assertEquals("fifteen", rs.getString(3)); 
 				assertTrue("Not enough rows fetched", rs.next()); 
 				assertEquals(3, rs.getInt(2)); 
 				assertEquals(25, rs.getInt(1)); 
 				assertNull(rs.getString(3)); 
 				assertEquals("str", rs.getString(4)); 
 				
 
 LINES: 		| TestLikePredicateOptimizations.java: 186 - 199 || TestLikePredicateOptimizations.java: 236 - 249 |
 CLONE CLASS: 	rs  = stmt.executeQuery(sql); 
 				rs.next(); 
 				expectedCount = rs.getInt(1); 
 				sql           = "select count(*) from test where name like '%'"; 
 				pstmt         = conn.prepareStatement(sql); 
 				rs            = pstmt.executeQuery(); 
 				rs.next(); 
 				actualCount = rs.getInt(1); 
 				assertEquals("\"" + sql + "\"", expectedCount, actualCount); 
 				
 
 LINES: 		| LobManager.java: 1067 - 1078 || LobManager.java: 1541 - 1552 || LobManager.java: 1610 - 1621 || LobManager.java: 1686 - 1697 |
 CLONE CLASS: 	if (byteBuffer == null) { 
 				throw Error.error(ErrorCode.DATA_IS_READONLY); 
 				} 
 				writeLock.lock(); 
 				try { 
 				Object[] data = getLobHeader(lobID); 
 				if (data == null) { 
 				return Result.newErrorResult(Error.error(ErrorCode.X_0F502)); 
 				} 
 				
 
 LINES: 		| ParserCommand.java: 417 - 424 || ParserCommand.java: 1895 - 1902 |
 CLONE CLASS: 	} 
 				case Tokens.RESULT : { 
 				read(); 
 				readThis(Tokens.MEMORY); 
 				readThis(Tokens.ROWS); 
 				Integer  size = readIntegerObject(); 
 				Object[] args = new Object[]{ size }; 
 				
 
 LINES: 		| FunctionCustom.java: 3282 - 3288 || FunctionCustom.java: 3298 - 3304 |
 CLONE CLASS: 	if (nodes[0].dataType == null) { 
 				nodes[0].dataType = Type.SQL_TIMESTAMP_NO_FRACTION; 
 				} 
 				if (nodes[1].dataType == null) { 
 				nodes[1].dataType = Type.SQL_VARCHAR; 
 				} 
 				
 
 LINES: 		| HsqlDeque.java: 307 - 328 || LongDeque.java: 299 - 320 |
 CLONE CLASS: 	} 
 				private int getInternalIndex(int i) throws IndexOutOfBoundsException { 
 				if (i < 0 || i >= elementCount) { 
 				throw new IndexOutOfBoundsException(); 
 				} 
 				int index = firstindex + i; 
 				if (index >= list.length) { 
 				index -= list.length; 
 				} 
 				return index; 
 				} 
 				private void resetCapacity() { 
 				if (elementCount < list.length) { 
 				return; 
 				} 
 				
 
 LINES: 		| RowOutputBinary.java: 323 - 331 || RowInputBase.java: 171 - 179 |
 CLONE CLASS: 	} 
 				switch (type.typeCode) { 
 				case Types.SQL_ALL_TYPES : 
 				break; 
 				case Types.SQL_CHAR : 
 				case Types.SQL_VARCHAR : 
 				
 
 LINES: 		| FunctionSQL.java: 591 - 598 || FunctionSQL.java: 609 - 616 |
 CLONE CLASS: 	if (nodes[2] != null 
 				&& ((Number) nodes[2].valueData).intValue() 
 				== Tokens.OCTETS) { 
 				result *= 2; 
 				} 
 				return ValuePool.getLong(result); 
 				} 
 				
 
 LINES: 		| SchemaManager.java: 2630 - 2638 || SchemaManager.java: 2660 - 2668 |
 CLONE CLASS: 	if (ddl != null) { 
 				list.add(ddl); 
 				} 
 				} 
 				} 
 				String[] array = new String[list.size()]; 
 				list.toArray(array); 
 				
 
 LINES: 		| RowStoreAVLHybrid.java: 352 - 363 || RowStoreAVLHybridExtended.java: 217 - 228 |
 CLONE CLASS: 	} 
 				public synchronized void resetAccessorKeys(Session session, Index[] keys) { 
 				if (indexList.length == 0 || accessorList[0] == null) { 
 				indexList    = keys; 
 				accessorList = new CachedObject[indexList.length]; 
 				return; 
 				} 
 				if (isCached) { 
 				
 
 LINES: 		| TestUtil.java: 877 - 885 || TestUtil.java: 1165 - 1173 |
 CLONE CLASS: 	} 
 				protected String getResultString() { 
 				return ""; 
 				} 
 				protected boolean test(Statement aStatement) { 
 				try { 
 				
 
 LINES: 		| TestUtil.java: 721 - 736 || TestUtil.java: 883 - 898 |
 CLONE CLASS: 	protected boolean test(Statement aStatement) { 
 				try { 
 				try { 
 				aStatement.execute(getSql()); 
 				} catch (SQLException s) { 
 				throw new Exception("Expected a ResultSet, but got the error: " 
 				+ s.getMessage()); 
 				} 
 				if (aStatement.getUpdateCount() != -1) { 
 				throw new Exception( 
 				"Expected a ResultSet, but got an update count of " 
 				
 
 LINES: 		| SetFunction.java: 379 - 384 || SetFunction.java: 421 - 426 |
 CLONE CLASS: 	} 
 				default : 
 				throw Error.runtimeError(ErrorCode.U_S0500, 
 				"SetFunction"); 
 				} 
 				} 
 				
 
 LINES: 		| ParserDDL.java: 759 - 765 || ParserDDL.java: 797 - 803 || ParserDDL.java: 832 - 838 |
 CLONE CLASS: 	if (token.tokenType == Tokens.RESTRICT) { 
 				read(); 
 				} else if (token.tokenType == Tokens.CASCADE) { 
 				read(); 
 				cascade = true; 
 				} 
 				
 
 LINES: 		| TestBench.java: 64 - 70 || JDBCBench.java: 32 - 38 |
 CLONE CLASS: 	public static final int TELLER              = 0; 
 				public static final int BRANCH              = 1; 
 				public static final int ACCOUNT             = 2; 
 				int                     failed_transactions = 0; 
 				int                     transaction_count   = 0; 
 				static int              n_clients           = 10; 
 				static int              n_txn_per_client    = 10; 
 				
 
 LINES: 		| ClosableCharArrayWriter.java: 158 - 167 || ClosableCharArrayWriter.java: 196 - 205 || ClosableByteArrayOutputStream.java: 163 - 172 |
 CLONE CLASS: 	throw new IndexOutOfBoundsException(); 
 				} else if (len == 0) { 
 				return; 
 				} 
 				int newcount = count + len; 
 				if (newcount > buf.length) { 
 				buf = copyOf(buf, Math.max(buf.length << 1, newcount)); 
 				} 
 				
 
 LINES: 		| TransactionManager2PL.java: 289 - 306 || TransactionManagerMV2PL.java: 494 - 510 |
 CLONE CLASS: 	session.sessionContext.currentStatement = cs; 
 				if (cs == null) { 
 				return; 
 				} 
 				} 
 				boolean canProceed = setWaitedSessionsTPL(session, cs); 
 				if (canProceed) { 
 				if (session.tempSet.isEmpty()) { 
 				lockTablesTPL(session, cs); 
 				} else { 
 				setWaitingSessionTPL(session); 
 				} 
 				
 
 LINES: 		| RowType.java: 75 - 85 || ArrayType.java: 87 - 97 |
 CLONE CLASS: 	} 
 				public int getJDBCScale() { 
 				return 0; 
 				} 
 				public int getJDBCPrecision() { 
 				return 0; 
 				} 
 				public int getSQLGenericTypeCode() { 
 				
 
 LINES: 		| TestAllTypes.java: 235 - 250 || TestCacheSize.java: 385 - 400 |
 CLONE CLASS: 	+ sw.elapsedTime()); 
 				} 
 				if (deleteWhileInsert && i != 0 
 				&& i % deleteWhileInsertInterval == 0) { 
 				sStatement.execute("CALL IDENTITY();"); 
 				ResultSet rs = sStatement.getResultSet(); 
 				rs.next(); 
 				int lastId = rs.getInt(1); 
 				sStatement.execute( 
 				"SELECT * INTO TEMP tempt FROM test WHERE id > " 
 				
 
 LINES: 		| ArrayUtil.java: 506 - 516 || ArrayUtil.java: 524 - 534 |
 CLONE CLASS: 	for (int j = 0; j < arrb.length; j++) { 
 				if (arra[i] == arrb[j]) { 
 				k++; 
 				break; 
 				} 
 				} 
 				} 
 				return k; 
 				} 
 				
 
 LINES: 		| Token.java: 73 - 79 || Token.java: 87 - 93 || Token.java: 100 - 106 || Preprocessor.java: 605 - 611 |
 CLONE CLASS: 	return true; 
 				} 
 				default : { 
 				return false; 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| DatabaseManagerSwing.java: 971 - 979 || DatabaseManagerSwing.java: 1171 - 1179 |
 CLONE CLASS: 	txtCommand.setEnabled(false); 
 				} else { 
 				txtCommand.setText(sqlScriptBuffer); 
 				sqlScriptBuffer = null; 
 				txtCommand.setEnabled(true); 
 				} 
 				} 
 				
 
 LINES: 		| TestLobs.java: 415 - 426 || TestLobs.java: 507 - 518 |
 CLONE CLASS: 	+ "primary key (stateid, varid, scalabilitypassivated, scopeguid))"; 
 				statement.execute(ddl0); 
 				statement.execute(ddl1); 
 				} catch (SQLException e) {} 
 				try { 
 				String dml0 = "INSERT INTO VARIABLE VALUES (?, ?, 'N', ?, ?)"; 
 				String dml1 = 
 				"UPDATE VARIABLE SET value = ? WHERE stateid = ? AND " 
 				+ "varid = ? AND scalabilitypassivated = 'N' AND scopeguid = ?"; 
 				PreparedStatement ps = connection.prepareStatement(dml0); 
 				
 
 LINES: 		| StatementSchemaDefinition.java: 116 - 124 || StatementSchemaDefinition.java: 156 - 164 |
 CLONE CLASS: 	cs                    = session.parser.compileCreate(); 
 				cs.isSchemaDefinition = true; 
 				cs.setSchemaHsqlName(schemaDefinitionName); 
 				if (session.parser.token.tokenType 
 				!= Tokens.X_ENDPARSE) { 
 				throw session.parser.unexpectedToken(); 
 				} 
 				
 
 LINES: 		| LongKeyLongValueHashMap.java: 78 - 85 || IntKeyLongValueHashMap.java: 68 - 75 |
 CLONE CLASS: 	int lookup = getLookup(key); 
 				if (lookup != -1) { 
 				return longValueTable[lookup]; 
 				} 
 				return defaultValue; 
 				} 
 				
 
 LINES: 		| TransferTable.java: 186 - 192 || TransferTable.java: 218 - 224 || TransferTable.java: 250 - 256 || TransferTable.java: 401 - 407 || TransferTable.java: 433 - 439 |
 CLONE CLASS: 	destDb.execute(Statement); 
 				} catch (Exception e) { 
 				tracer.trace("Ignoring error " + e.getMessage()); 
 				} 
 				lastsemicolon = nextsemicolon + 1; 
 				nextsemicolon = lastsemicolon 
 				
 
 LINES: 		| DataOutputStream.java: 186 - 195 || HsqlByteArrayOutputStream.java: 189 - 198 |
 CLONE CLASS: 	} 
 				} 
 				public void writeUTF(String str) throws IOException { 
 				int len = str.length(); 
 				if (len > 0xffff) { 
 				throw new UTFDataFormatException(); 
 				} 
 				
 
 LINES: 		| TestLobs.java: 531 - 547 || TestLobs.java: 604 - 620 |
 CLONE CLASS: 	reader = dataClob.getCharacterStream(); 
 				ps.setString(1, "test-id-1" + i); 
 				ps.setLong(2, 23456789123456L + i); 
 				ps.setCharacterStream(3, reader, dataClob.length()); 
 				ps.setString(4, "test-scope-1" + i); 
 				ps.executeUpdate(); 
 				connection.commit(); 
 				} 
 				sw.stop(); 
 				System.out.println(sw.elapsedTimeToMessage("Time for inserts")); 
 				ps = connection.prepareStatement(dml1); 
 				sw.zero(); 
 				sw.start(); 
 				
 
 LINES: 		| ResultLob.java: 153 - 159 || ResultLob.java: 192 - 198 |
 CLONE CLASS: 	result.lobID       = id; 
 				result.blockOffset = offset; 
 				result.charBlock   = chars; 
 				result.blockLength = chars.length; 
 				return result; 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 6300 - 6308 || DatabaseInformationFull.java: 6339 - 6347 || DatabaseInformationFull.java: 6453 - 6461 |
 CLONE CLASS: 	SchemaObject.INDEX); 
 				t.createPrimaryKeyConstraint(name, new int[]{ 0 }, false); 
 				return t; 
 				} 
 				Session sys = database.sessionManager.newSysSession( 
 				SqlInvariants.INFORMATION_SCHEMA_HSQLNAME, session.getUser()); 
 				
 
 LINES: 		| StatementSchema.java: 453 - 459 || StatementSchema.java: 607 - 613 |
 CLONE CLASS: 	break; 
 				} 
 				} 
 				break; 
 				} catch (HsqlException e) { 
 				return Result.newErrorResult(e, sql); 
 				
 
 LINES: 		| BlobDataID.java: 129 - 147 || ClobDataID.java: 70 - 88 |
 CLONE CLASS: 	} 
 				public long length(SessionInterface session) { 
 				if (length > -1) { 
 				return length; 
 				} 
 				ResultLob resultOut = ResultLob.newLobGetLengthRequest(id); 
 				Result    resultIn  = session.execute(resultOut); 
 				if (resultIn.isError()) { 
 				throw resultIn.getException(); 
 				} 
 				length = ((ResultLob) resultIn).getBlockLength(); 
 				return length; 
 				} 
 				
 
 LINES: 		| Table.java: 2662 - 2669 || Table.java: 2710 - 2717 |
 CLONE CLASS: 	while (nav.hasNext()) { 
 				Object[] data = (Object[]) nav.getNext(); 
 				Object[] newData = 
 				(Object[]) ArrayUtil.resizeArrayIfDifferent(data, columnCount); 
 				insertData(session, store, newData); 
 				} 
 				} 
 				
 
 LINES: 		| TestStoredProcedure.java: 114 - 121 || TestDatabaseMetaData.java: 207 - 217 |
 CLONE CLASS: 	} finally { 
 				conn.close(); 
 				} 
 				} 
 				public void testTwo() throws Exception { 
 				Connection conn = newConnection(); 
 				
 
 LINES: 		| JDBCBlob.java: 233 - 240 || JDBCBlob.java: 276 - 283 |
 CLONE CLASS: 	final byte[] data = getData(); 
 				final int    dlen = data.length; 
 				if (start < MIN_POS) { 
 				throw JDBCUtil.outOfRangeArgument("start: " + start); 
 				} else if (start > dlen || pattern == null) { 
 				return -1L; 
 				} 
 				
 
 LINES: 		| Expression.java: 1615 - 1622 || ExpressionTable.java: 157 - 164 |
 CLONE CLASS: 	RowSetNavigatorData navigator = table.getNavigator(session); 
 				Result              result    = Result.newResult(navigator); 
 				result.metaData = table.queryExpression.getMetaData(); 
 				return result; 
 				} 
 				default : { 
 				
 
 LINES: 		| ExpressionArrayAggregate.java: 168 - 183 || ExpressionAggregate.java: 209 - 224 |
 CLONE CLASS: 	rangeGroup, rangeCount, rangeGroups, null, false); 
 				if (conditionSet != null) { 
 				ExpressionColumn.checkColumnsResolved(conditionSet); 
 				} 
 				if (unresolvedSet == null) { 
 				unresolvedSet = new ArrayListIdentity(); 
 				} 
 				unresolvedSet.add(this); 
 				return unresolvedSet; 
 				} 
 				public void resolveTypes(Session session, Expression parent) { 
 				
 
 LINES: 		| TestDbBackup.java: 241 - 246 || TestDbBackup.java: 354 - 359 |
 CLONE CLASS: 	rs.next(); 
 				assertEquals("Wrong table 't' contents", 34, rs.getInt("i")); 
 				} finally { 
 				shutdownAndCloseConn(); 
 				} 
 				} 
 				
 
 LINES: 		| WebServer.java: 191 - 205 || WebServer.java: 191 - 205 |
 CLONE CLASS: 	return; 
 				} 
 				server.print("Startup sequence initiated from main() method"); 
 				if (fileProps != null) { 
 				server.print("Loaded properties from [" + propsPath 
 				+ ".properties]"); 
 				} else { 
 				server.print("Could not load properties from file"); 
 				server.print("Using cli/default properties only"); 
 				} 
 				server.start(); 
 				
 
 LINES: 		| BlobType.java: 295 - 304 || ClobType.java: 165 - 174 || OtherType.java: 143 - 152 |
 CLONE CLASS: 	} 
 				throw Error.error(ErrorCode.X_42561); 
 				} 
 				public String convertToString(Object a) { 
 				if (a == null) { 
 				return null; 
 				} 
 				
 
 LINES: 		| DataFileCache.java: 372 - 380 || DataFileCache.java: 483 - 491 |
 CLONE CLASS: 	openShadowFile(); 
 				} else { 
 				initNewFile(); 
 				} 
 				initBuffers(); 
 				fileModified  = false; 
 				cacheModified = false; 
 				
 
 LINES: 		| TransactionManager2PL.java: 307 - 765 || TransactionManagerMV2PL.java: 513 - 537 |
 CLONE CLASS: 	} 
 				} finally { 
 				writeLock.unlock(); 
 				} 
 				} 
 				public void beginActionResume(Session session) { 
 				} finally { 
 				writeLock.unlock(); 
 				} 
 				} 
 				public void beginActionResume(Session session) { 
 				writeLock.lock(); 
 				try { 
 				session.actionTimestamp = getNextGlobalChangeTimestamp(); 
 				if (!session.isTransaction) { 
 				session.transactionTimestamp = session.actionTimestamp; 
 				session.isTransaction        = true; 
 				liveTransactionTimestamps.addLast( 
 				session.transactionTimestamp); 
 				transactionCount++; 
 				
 
 LINES: 		| TestBench.java: 622 - 669 || JDBCBench.java: 714 - 761 |
 CLONE CLASS: 	E.printStackTrace(); 
 				} 
 				connectClose(Conn); 
 				} 
 				public static int getRandomInt(int lo, int hi) { 
 				int ret = 0; 
 				ret = (int) (Math.random() * (hi - lo + 1)); 
 				ret += lo; 
 				return ret; 
 				} 
 				public static int getRandomID(int type) { 
 				int min = 0, 
 				max = 0; 
 				switch (type) { 
 				case TELLER : 
 				max = ntellers * tps - 1; 
 				break; 
 				case BRANCH : 
 				max = nbranches * tps - 1; 
 				break; 
 				case ACCOUNT : 
 				max = naccounts * tps - 1; 
 				break; 
 				} 
 				return (getRandomInt(min, max)); 
 				} 
 				public static Connection connect(String DBUrl, String DBUser, 
 				String DBPassword) { 
 				try { 
 				Connection conn = DriverManager.getConnection(DBUrl, DBUser, 
 				DBPassword); 
 				return conn; 
 				} catch (Exception E) { 
 				
 
 LINES: 		| DatabaseInformationMain.java: 3136 - 3207 || DatabaseInformationMain.java: 3241 - 3312 |
 CLONE CLASS: 	t.createPrimaryKeyConstraint(name, new int[] { 
 				0, 1, 2 
 				}, false); 
 				return t; 
 				} 
 				final int sequence_catalog           = 0; 
 				final int sequence_schema            = 1; 
 				final int sequence_name              = 2; 
 				final int data_type                  = 3; 
 				final int numeric_precision          = 4; 
 				final int numeric_precision_radix    = 5; 
 				final int numeric_scale              = 6; 
 				final int maximum_value              = 7; 
 				final int minimum_value              = 8; 
 				final int increment                  = 9; 
 				final int cycle_option               = 10; 
 				final int declared_data_type         = 11; 
 				final int declared_numeric_precision = 12; 
 				final int declared_numeric_scale     = 13; 
 				final int start_with                 = 14; 
 				final int next_value                 = 15; 
 				Iterator       it; 
 				Object[]       row; 
 				NumberSequence sequence; 
 				it = database.schemaManager.databaseObjectIterator( 
 				SchemaObject.SEQUENCE); 
 				while (it.hasNext()) { 
 				sequence = (NumberSequence) it.next(); 
 				if (!session.getGrantee().isAccessible(sequence)) { 
 				continue; 
 				} 
 				row = t.getEmptyRowData(); 
 				NumberType type = (NumberType) sequence.getDataType(); 
 				int radix = 
 				(type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types 
 				.SQL_DECIMAL) ? 10 
 				: 2; 
 				row[sequence_catalog] = database.getCatalogName().name; 
 				row[sequence_schema]  = sequence.getSchemaName().name; 
 				row[sequence_name]    = sequence.getName().name; 
 				row[data_type]        = sequence.getDataType().getFullNameString(); 
 				row[numeric_precision] = 
 				ValuePool.getInt((int) type.getPrecision()); 
 				row[numeric_precision_radix]    = ValuePool.getInt(radix); 
 				row[numeric_scale]              = ValuePool.INTEGER_0; 
 				row[maximum_value] = String.valueOf(sequence.getMaxValue()); 
 				row[minimum_value] = String.valueOf(sequence.getMinValue()); 
 				row[increment] = String.valueOf(sequence.getIncrement()); 
 				row[cycle_option]               = sequence.isCycle() ? "YES" 
 				: "NO"; 
 				row[declared_data_type]         = row[data_type]; 
 				row[declared_numeric_precision] = row[numeric_precision]; 
 				row[declared_numeric_scale]     = row[declared_numeric_scale]; 
 				row[start_with] = String.valueOf(sequence.getStartValue()); 
 				row[next_value]                 = String.valueOf(sequence.peek()); 
 				t.insertSys(session, store, row); 
 				} 
 				return t; 
 				} 
 				
 
 LINES: 		| ParserDDL.java: 384 - 396 || ParserDDL.java: 4712 - 4724 |
 CLONE CLASS: 	read(); 
 				switch (token.tokenType) { 
 				case Tokens.ROUTINE : 
 				case Tokens.PROCEDURE : 
 				case Tokens.FUNCTION : 
 				read(); 
 				break; 
 				default : 
 				throw unexpectedToken(); 
 				} 
 				
 
 LINES: 		| BooleanType.java: 117 - 126 || NumberType.java: 668 - 677 || IntervalType.java: 439 - 448 || BinaryType.java: 295 - 304 || BlobType.java: 132 - 141 || RowType.java: 115 - 124 || ArrayType.java: 141 - 150 |
 CLONE CLASS: 	} 
 				public int compare(Session session, Object a, Object b) { 
 				if (a == b) { 
 				return 0; 
 				} 
 				if (a == null) { 
 				return -1; 
 				
 
 LINES: 		| DatabaseInformationFull.java: 45 - 50 || DatabaseInformationMain.java: 37 - 42 |
 CLONE CLASS: 	import org.hsqldb.HsqlException; 
 				import org.hsqldb.HsqlNameManager; 
 				import org.hsqldb.HsqlNameManager.HsqlName; 
 				import org.hsqldb.NumberSequence; 
 				import org.hsqldb.Routine; 
 				import org.hsqldb.RoutineSchema; 
 				
 
 LINES: 		| TestSqlPersistent.java: 128 - 133 || TestSqlPersistent.java: 305 - 310 |
 CLONE CLASS: 	integerValue = new Integer(1000); 
 				arrayValue   = new Double[] { 
 				new Double(1), new Double(Double.NaN), 
 				new Double(Double.NEGATIVE_INFINITY), 
 				new Double(Double.POSITIVE_INFINITY) 
 				}; 
 				
 
 LINES: 		| TestDateTime.java: 177 - 192 || TestDateTime.java: 272 - 287 |
 CLONE CLASS: 	iUpdateCount = insertStatement.executeUpdate(); 
 				insertStatement.close(); 
 				Assert.assertEquals( 
 				"Exactly one record with time data shoud have been inserted.", 
 				iUpdateCount, 1); 
 				PreparedStatement selectStatement = null; 
 				PreparedStatement deleteStatement = null; 
 				ResultSet         results         = null; 
 				java.sql.Time     retrievedTime; 
 				int               iDeletedCount = 0; 
 				java.sql.Time     selectTime; 
 				selectStatement = connection.prepareStatement(SELECT_TIME); 
 				
 
 LINES: 		| Scanner.java: 1490 - 1496 || Scanner.java: 1507 - 1513 |
 CLONE CLASS: 	token.tokenString = Tokens.T_NOT_EQUALS; 
 				token.tokenType   = Tokens.NOT_EQUALS; 
 				currentPosition   += 2; 
 				token.isDelimiter = true; 
 				return; 
 				} 
 				
 
 LINES: 		| DataFileCache.java: 972 - 980 || DataFileCache.java: 1000 - 1008 || DataFileCache.java: 1027 - 1035 || DataFileCache.java: 1051 - 1059 || DataFileCache.java: 1122 - 1130 |
 CLONE CLASS: 	object = cache.get(pos); 
 				if (object != null) { 
 				if (keep) { 
 				object.keepInMemory(true); 
 				} 
 				return object; 
 				} 
 				
 
 LINES: 		| ParserDDL.java: 1783 - 1789 || ParserDDL.java: 2890 - 2896 || ParserDDL.java: 3196 - 3202 || ParserDDL.java: 4264 - 4270 || Scanner.java: 1089 - 1095 |
 CLONE CLASS: 	break; 
 				} 
 				if (end) { 
 				break; 
 				} 
 				} 
 				
 
 LINES: 		| ParserCommand.java: 1685 - 1695 || ParserCommand.java: 1800 - 1810 |
 CLONE CLASS: 	if (token.tokenType == Tokens.AND) { 
 				read(); 
 				if (token.tokenType == Tokens.NO) { 
 				read(); 
 				} else { 
 				chain = true; 
 				} 
 				readThis(Tokens.CHAIN); 
 				} 
 				
 
 LINES: 		| DoubleIntIndex.java: 265 - 275 || DoubleIntIndex.java: 322 - 332 |
 CLONE CLASS: 	} else { 
 				doubleCapacity(); 
 				} 
 				} 
 				if (!sorted) { 
 				fastQuickSort(); 
 				} 
 				targetSearchValue = sortOnValues ? value 
 				: key; 
 				
 
 LINES: 		| FunctionSQL.java: 1718 - 1727 || FunctionSQL.java: 2034 - 2043 |
 CLONE CLASS: 	case FUNC_CURRENT_CATALOG : 
 				case FUNC_CURRENT_DEFAULT_TRANSFORM_GROUP : 
 				case FUNC_CURRENT_PATH : 
 				case FUNC_CURRENT_ROLE : 
 				case FUNC_CURRENT_SCHEMA : 
 				case FUNC_CURRENT_TRANSFORM_GROUP_FOR_TYPE : 
 				case FUNC_CURRENT_USER : 
 				case FUNC_SESSION_USER : 
 				case FUNC_SYSTEM_USER : 
 				case FUNC_USER : 
 				
 
 LINES: 		| ClobInputStream.java: 167 - 173 || BlobInputStream.java: 150 - 156 |
 CLONE CLASS: 	bufferOffset = currentPosition; 
 				} 
 				static boolean isInLimits(long fullLength, long pos, long len) { 
 				return pos >= 0 && len >= 0 && pos + len <= fullLength; 
 				} 
 				} 
 				
 
 LINES: 		| JDBCBlob.java: 752 - 757 || JDBCClob.java: 883 - 888 |
 CLONE CLASS: 	if (data == null) { 
 				throw JDBCUtil.nullArgument(); 
 				} 
 				m_data                = data; 
 				m_createdByConnection = false; 
 				} 
 				
 
 LINES: 		| Expression.java: 1383 - 1389 || ExpressionTable.java: 224 - 230 |
 CLONE CLASS: 	Row row = (Row) store.getNewCachedObject(session, data, false); 
 				try { 
 				store.indexRow(session, row); 
 				} catch (HsqlException e) {} 
 				} 
 				} 
 				
 
 LINES: 		| QuerySpecification.java: 2547 - 2556 || StatementDML.java: 283 - 292 || StatementSet.java: 333 - 342 |
 CLONE CLASS: 	if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) { 
 				continue; 
 				} 
 				if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) { 
 				continue; 
 				} 
 				set.add(name); 
 				} 
 				
 
 LINES: 		| LineGroupReader.java: 183 - 189 || RowOutputTextQuoted.java: 67 - 73 |
 CLONE CLASS: 	return true; 
 				} 
 				} 
 				return false; 
 				} 
 				} 
 				
 
 LINES: 		| JDBCBlobFile.java: 646 - 675 || JDBCClobFile.java: 772 - 801 |
 CLONE CLASS: 	} 
 				public boolean isDeleteOnFree() { 
 				return m_deleteOnFree; 
 				} 
 				public void setDeleteOnFree(boolean deleteOnFree) { 
 				m_deleteOnFree = deleteOnFree; 
 				} 
 				protected void finalize() throws Throwable { 
 				try { 
 				super.finalize(); 
 				} finally { 
 				
 
 LINES: 		| TestUtil.java: 1055 - 1063 || TestUtil.java: 1141 - 1149 |
 CLONE CLASS: 	sb.append("+ " + lines[i]); 
 				} 
 				TestUtil.expandStamps(sb); 
 				return sb.toString().trim(); 
 				} 
 				protected boolean test(Statement aStatement) { 
 				
 
 LINES: 		| JDBCSQLXML.java: 1727 - 1735 || JDBCSQLXML.java: 1764 - 1772 || JDBCSQLXML.java: 1793 - 1801 |
 CLONE CLASS: 	} catch (SecurityException ex) { 
 				throw Exceptions.resultInstantiation(ex); 
 				} catch (InstantiationException ex) { 
 				throw Exceptions.resultInstantiation(ex); 
 				} catch (IllegalAccessException ex) { 
 				throw Exceptions.resultInstantiation(ex); 
 				} catch (ClassCastException ex) { 
 				throw Exceptions.resultInstantiation(ex); 
 				} 
 				
 
 LINES: 		| IndexAVL.java: 946 - 952 || IndexAVL.java: 1136 - 1142 |
 CLONE CLASS: 	} catch (RuntimeException e) { 
 				throw e; 
 				} finally { 
 				store.writeUnlock(); 
 				writeLock.unlock(); 
 				} 
 				} 
 				
 
 LINES: 		| Grid.java: 77 - 85 || Tree.java: 76 - 84 |
 CLONE CLASS: 	import java.awt.Dimension; 
 				import java.awt.Event; 
 				import java.awt.Font; 
 				import java.awt.FontMetrics; 
 				import java.awt.Graphics; 
 				import java.awt.Image; 
 				import java.awt.Panel; 
 				import java.awt.Scrollbar; 
 				import java.awt.SystemColor; 
 				
 
 LINES: 		| JDBCPreparedStatement.java: 1601 - 1606 || JDBCPreparedStatement.java: 1763 - 1768 |
 CLONE CLASS: 	break; 
 				default : 
 				throw JDBCUtil.sqlException(ErrorCode.X_42561); 
 				} 
 				parameterSet[i] = Boolean.TRUE; 
 				} 
 				
 
 LINES: 		| TransferSQLText.java: 74 - 80 || TransferSQLText.java: 101 - 107 || TransferSQLText.java: 167 - 173 |
 CLONE CLASS: 	if (WTextWrite == null) { 
 				try { 
 				WTextWrite = new BufferedWriter(new FileWriter(sFileName)); 
 				} catch (IOException e) { 
 				throw new DataAccessPointException(e.getMessage()); 
 				} 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 4724 - 4730 || DatabaseInformationFull.java: 5182 - 5188 |
 CLONE CLASS: 	addColumn(t, "GRANTOR", SQL_IDENTIFIER); 
 				addColumn(t, "GRANTEE", SQL_IDENTIFIER); 
 				addColumn(t, "SPECIFIC_CATALOG", SQL_IDENTIFIER); 
 				addColumn(t, "SPECIFIC_SCHEMA", SQL_IDENTIFIER); 
 				addColumn(t, "SPECIFIC_NAME", SQL_IDENTIFIER); 
 				addColumn(t, "ROUTINE_CATALOG", SQL_IDENTIFIER); 
 				addColumn(t, "ROUTINE_SCHEMA", SQL_IDENTIFIER); 
 				
 
 LINES: 		| TransactionManagerCommon.java: 701 - 707 || TransactionManagerCommon.java: 711 - 717 |
 CLONE CLASS: 	while (it.hasNext()) { 
 				Session s = (Session) it.next(); 
 				if (s == session) { 
 				it.remove(); 
 				} 
 				} 
 				
 
 LINES: 		| RowType.java: 435 - 447 || ArrayType.java: 488 - 500 |
 CLONE CLASS: 	} 
 				return false; 
 				} 
 				public int hashCode(Object a) { 
 				if (a == null) { 
 				return 0; 
 				} 
 				int      hash  = 0; 
 				Object[] array = (Object[]) a; 
 				
 
 LINES: 		| ParserDQL.java: 5458 - 5467 || ParserDQL.java: 5487 - 5496 |
 CLONE CLASS: 	if (token.tokenType == Tokens.COMMA) { 
 				readThis(Tokens.COMMA); 
 				} else { 
 				break; 
 				} 
 				} while (true); 
 				readThis(Tokens.CLOSEBRACKET); 
 				return casewhen; 
 				
 
 LINES: 		| StatementSchema.java: 377 - 383 || StatementSchema.java: 676 - 682 || StatementSchema.java: 853 - 859 || StatementSchema.java: 912 - 918 || StatementSchema.java: 956 - 962 || StatementSchema.java: 1022 - 1028 || StatementSchema.java: 1056 - 1062 || StatementSchema.java: 1090 - 1096 |
 CLONE CLASS: 	} 
 				break; 
 				} catch (HsqlException e) { 
 				return Result.newErrorResult(e, sql); 
 				} 
 				} 
 				
 
 LINES: 		| DatabaseManager.java: 226 - 235 || DatabaseManager.java: 351 - 360 |
 CLONE CLASS: 	} catch (Exception e) { 
 				e.printStackTrace(); 
 				} 
 				if (c == null) { 
 				return; 
 				} 
 				m.connect(c); 
 				} 
 				
 
 LINES: 		| RowAction.java: 558 - 572 || RowAction.java: 590 - 604 |
 CLONE CLASS: 	if (action.type == ACTION_DELETE) { 
 				if (actionType == ACTION_INSERT) { 
 				actionType = ACTION_INSERT_DELETE; 
 				} else { 
 				actionType = action.type; 
 				} 
 				} else if (action.type == ACTION_INSERT) { 
 				actionType = action.type; 
 				} 
 				} 
 				action = action.next; 
 				} while (action != null); 
 				return actionType; 
 				
 
 LINES: 		| ExpressionLogical.java: 2249 - 2256 || ExpressionLogical.java: 2282 - 2289 |
 CLONE CLASS: 	PersistentStore store = 
 				rangeVar.rangeTable.getRowStore(session); 
 				cost = store.elementCount(); 
 				if (cost < Index.minimumSelectivity) { 
 				cost = Index.minimumSelectivity; 
 				} 
 				
 
 LINES: 		| ExpressionOp.java: 325 - 331 || ExpressionArithmetic.java: 214 - 220 |
 CLONE CLASS: 	break; 
 				} 
 				if (getLeftNode() != null) { 
 				sb.append(" arg_left=["); 
 				sb.append(nodes[LEFT].describe(session, blanks + 1)); 
 				sb.append(']'); 
 				
 
 LINES: 		| TestINPredicateParameterizationAndCorrelation.java: 121 - 132 || TestINPredicateParameterizationAndCorrelation.java: 137 - 148 |
 CLONE CLASS: 	pstmt         = conn.prepareStatement(sql); 
 				pstmt.setInt(1, 0); 
 				pstmt.setInt(2, 9); 
 				rs = pstmt.executeQuery(); 
 				rs.next(); 
 				actualCount = rs.getInt(1); 
 				assertEquals("\"" + sql + "\"", expectedCount, actualCount); 
 				
 
 LINES: 		| RowInputText.java: 514 - 522 || RowInputText.java: 533 - 541 |
 CLONE CLASS: 	} 
 				s = s.trim(); 
 				if (s.length() == 0) { 
 				return null; 
 				} 
 				long id = Long.parseLong(s); 
 				
 
 LINES: 		| Collation.java: 38 - 43 || Charset.java: 34 - 39 |
 CLONE CLASS: 	import org.hsqldb.HsqlNameManager; 
 				import org.hsqldb.HsqlNameManager.HsqlName; 
 				import org.hsqldb.SchemaObject; 
 				import org.hsqldb.Session; 
 				import org.hsqldb.SqlInvariants; 
 				import org.hsqldb.Tokens; 
 				
 
 LINES: 		| TestUtil.java: 617 - 624 || TestUtil.java: 974 - 981 || TestUtil.java: 1241 - 1248 |
 CLONE CLASS: 	} catch (Exception x) { 
 				message = x.toString(); 
 				return false; 
 				} 
 				return true; 
 				} 
 				
 
 LINES: 		| RowType.java: 202 - 213 || ArrayType.java: 291 - 302 |
 CLONE CLASS: 	} 
 				public Object convertToDefaultType(SessionInterface sessionInterface, 
 				Object o) { 
 				return o; 
 				} 
 				public String convertToString(Object a) { 
 				if (a == null) { 
 				return null; 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 8073 - 8078 || DatabaseInformationFull.java: 8312 - 8317 |
 CLONE CLASS: 	final int view_catalog  = 0; 
 				final int view_schema   = 1; 
 				final int view_name     = 2; 
 				final int table_catalog = 3; 
 				final int table_schema  = 4; 
 				final int table_name    = 5; 
 				
 
 LINES: 		| ExpressionLogical.java: 148 - 153 || ExpressionLogical.java: 2241 - 2246 |
 CLONE CLASS: 	case OpTypes.IN : 
 				case OpTypes.MATCH_SIMPLE : 
 				case OpTypes.MATCH_PARTIAL : 
 				case OpTypes.MATCH_FULL : 
 				case OpTypes.MATCH_UNIQUE_SIMPLE : 
 				case OpTypes.MATCH_UNIQUE_PARTIAL : 
 				
 
 LINES: 		| NodeAVLDisk.java: 215 - 221 || NodeAVLDisk.java: 237 - 243 || NodeAVLDisk.java: 259 - 265 || NodeAVLDisk.java: 280 - 286 || NodeAVLDisk.java: 293 - 299 || NodeAVLDisk.java: 306 - 312 |
 CLONE CLASS: 	NodeAVLDisk node = this; 
 				RowAVLDisk  row  = this.row; 
 				if (!row.isInMemory()) { 
 				row  = (RowAVLDisk) store.get(this.row, false); 
 				node = (NodeAVLDisk) row.getNode(iId); 
 				} 
 				
 
 LINES: 		| GranteeManager.java: 218 - 225 || GranteeManager.java: 425 - 432 |
 CLONE CLASS: 	return; 
 				} 
 				HsqlName name = dbObject.getName(); 
 				if (dbObject instanceof Routine) { 
 				name = ((Routine) dbObject).getSpecificName(); 
 				} 
 				
 
 LINES: 		| ParserDDL.java: 2412 - 2423 || ParserRoutine.java: 1004 - 1015 |
 CLONE CLASS: 	Statement statement = compileSQLProcedureStatementOrNull(routine, 
 				null); 
 				if (statement == null) { 
 				throw unexpectedToken(); 
 				} 
 				Token[] tokenisedStatement = getRecordedStatement(); 
 				String  sql                = Token.getSQL(tokenisedStatement); 
 				statement.setSQL(sql); 
 				routine.setProcedure(statement); 
 				
 
 LINES: 		| TestLobs.java: 731 - 736 || TestLobs.java: 808 - 813 || TestLobs.java: 939 - 944 |
 CLONE CLASS: 	} 
 				} catch (SQLException e) { 
 				e.printStackTrace(); 
 				fail("test failure"); 
 				} 
 				} 
 				
 
 LINES: 		| ParserBase.java: 662 - 671 || ParserBase.java: 687 - 696 |
 CLONE CLASS: 	throw unexpectedToken(); 
 				} 
 				read(); 
 				scale = readInteger(); 
 				if (scale < 0) { 
 				throw Error.error(ErrorCode.X_42592); 
 				} 
 				
 
 LINES: 		| HSQLDialect.java: 30 - 35 || HSQLDialect.java: 32 - 37 |
 CLONE CLASS: 	import org.hibernate.LockMode; 
 				import org.hibernate.StaleObjectStateException; 
 				import org.hibernate.JDBCException; 
 				import org.hibernate.engine.SessionImplementor; 
 				import org.hibernate.persister.entity.Lockable; 
 				import org.hibernate.cfg.Environment; 
 				
 
 LINES: 		| ParserDDL.java: 3658 - 3664 || ParserDDL.java: 3692 - 3698 |
 CLONE CLASS: 	String   sql  = getLastPart(); 
 				Object[] args = new Object[] { 
 				StatementTypes.ADD_CONSTRAINT, table, c 
 				}; 
 				HsqlName[] writeLockNames = 
 				database.schemaManager.getCatalogAndBaseTableNames( 
 				table.getName()); 
 				
 
 LINES: 		| DatabaseInformationFull.java: 3709 - 3720 || DatabaseInformationFull.java: 3740 - 3751 |
 CLONE CLASS: 	row                             = t.getEmptyRowData(); 
 				row[object_catalog] = database.getCatalogName().name; 
 				row[object_schema]              = routine.getSchemaName().name; 
 				row[object_name]                = routine.getName().name; 
 				row[object_type]                = "ROUTINE"; 
 				row[collection_type_identifier] = type.getDefinition(); 
 				addTypeInfo(row, ((ArrayType) type).collectionBaseType()); 
 				try { 
 				t.insertSys(session, store, row); 
 				} catch (HsqlException e) {} 
 				
 
 LINES: 		| ArrayUtil.java: 1676 - 1684 || RAFile.java: 492 - 500 |
 CLONE CLASS: 	long mask    = 0xffffffffffffffffl << scale; 
 				long newSize = value & mask; 
 				if (newSize != value) { 
 				newSize += 1 << scale; 
 				} 
 				return newSize; 
 				} 
 				
 
 LINES: 		| TransferSQLText.java: 405 - 412 || TransferSQLText.java: 542 - 549 |
 CLONE CLASS: 	continue; 
 				} 
 				Token = Tokenizer.nextToken().toUpperCase(); 
 				if (Token.equals("TABLE") || Token.equals("VIEW")) { 
 				try { 
 				name = Tokenizer.nextToken(" (;"); 
 				
 
 LINES: 		| JDBCResultSet.java: 4438 - 4479 || JDBCResultSet.java: 7629 - 7642 |
 CLONE CLASS: 	} 
 				throw JDBCUtil.sqlException(ErrorCode.X_42561); 
 				} 
 				public Clob getClob(int columnIndex) throws SQLException { 
 				checkColumn(columnIndex); 
 				Type   sourceType = resultMetaData.columnTypes[columnIndex - 1]; 
 				Object o          = getColumnInType(columnIndex, sourceType); 
 				if (o == null) { 
 				return null; 
 				
 
 LINES: 		| DatabaseInformationFull.java: 1129 - 1135 || DatabaseInformationFull.java: 1146 - 1152 |
 CLONE CLASS: 	for (int j = 0; j < array.length; j++) { 
 				if (j > 0) { 
 				sb.append(','); 
 				} 
 				sb.append(array[j].getId()); 
 				} 
 				
 
 LINES: 		| ParserDML.java: 847 - 854 || ParserDQL.java: 665 - 672 |
 CLONE CLASS: 	while (true) { 
 				Expression target = XreadTargetSpecification(rangeVars, 
 				colIndexList); 
 				if (!targets.add(target)) { 
 				ColumnSchema col = target.getColumn(); 
 				throw Error.error(ErrorCode.X_42579, col.getName().name); 
 				
 
 LINES: 		| ArrayUtil.java: 259 - 265 || ArrayUtil.java: 270 - 276 |
 CLONE CLASS: 	for (int i = 0; i < array.length; i++) { 
 				if (array[i] == value) { 
 				return i; 
 				} 
 				} 
 				return -1; 
 				
 
 LINES: 		| Tree.java: 351 - 366 || Tree.java: 481 - 496 |
 CLONE CLASS: 	String   folder = s[2]; 
 				int      ci     = currentindent; 
 				for (; ci > 0; ci--) { 
 				if (key.startsWith(root[ci])) { 
 				break; 
 				} 
 				} 
 				if (root[ci].length() < key.length()) { 
 				ci++; 
 				} 
 				if (closed && ci > currentindent) { 
 				continue; 
 				} 
 				
 
 LINES: 		| TestHTTPKeepAlive.java: 106 - 112 || TestMerge.java: 397 - 403 || TestMultiInsert.java: 142 - 147 |
 CLONE CLASS: 	connection.close(); 
 				} catch (Exception e) { 
 				e.printStackTrace(); 
 				System.out.println("TestSql.tearDown() error: " + e.getMessage()); 
 				} 
 				super.tearDown(); 
 				
 
 LINES: 		| DoubleIntIndex.java: 512 - 520 || DoubleIntIndex.java: 568 - 576 |
 CLONE CLASS: 	while (low < high) { 
 				mid     = (low + high) / 2; 
 				compare = compare(mid); 
 				if (compare < 0) { 
 				high = mid; 
 				} else if (compare > 0) { 
 				low = mid + 1; 
 				} else { 
 				
 
 LINES: 		| TestBench.java: 317 - 324 || JDBCBench.java: 291 - 298 |
 CLONE CLASS: 	connectClose(guardian); 
 				} 
 				public void reportDone() { 
 				long end_time = System.currentTimeMillis(); 
 				double completion_time = ((double) end_time - (double) start_time) 
 				/ 1000; 
 				
 
 LINES: 		| IntervalType.java: 134 - 145 || DateTimeType.java: 99 - 110 |
 CLONE CLASS: 	} 
 				} 
 				public int getJDBCTypeCode() { 
 				return typeCode; 
 				} 
 				public Class getJDBCClass() { 
 				switch (typeCode) { 
 				
 
 LINES: 		| DatabaseInformationFull.java: 2646 - 2663 || DatabaseInformationFull.java: 3589 - 3606 |
 CLONE CLASS: 	int            columnCount; 
 				Iterator       tables; 
 				Table          table; 
 				Object[]       row; 
 				OrderedHashSet columnList; 
 				Type           type; 
 				tables = allTables(); 
 				while (tables.hasNext()) { 
 				table = (Table) tables.next(); 
 				columnList = 
 				session.getGrantee().getColumnsForAllPrivileges(table); 
 				if (columnList.isEmpty()) { 
 				continue; 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 6780 - 6785 || DatabaseInformationFull.java: 7118 - 7123 |
 CLONE CLASS: 	addColumn(t, "TRIGGER_CATALOG", SQL_IDENTIFIER); 
 				addColumn(t, "TRIGGER_SCHEMA", SQL_IDENTIFIER); 
 				addColumn(t, "TRIGGER_NAME", SQL_IDENTIFIER); 
 				addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER); 
 				addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER); 
 				addColumn(t, "TABLE_NAME", SQL_IDENTIFIER); 
 				
 
 LINES: 		| DatabaseInformationFull.java: 2705 - 2719 || DatabaseInformationFull.java: 3455 - 3469 || DatabaseInformationFull.java: 3797 - 3811 || DatabaseInformationFull.java: 5985 - 5999 || DatabaseInformationFull.java: 7947 - 7961 |
 CLONE CLASS: 	row[collation_name] = 
 				((CharacterType) type).getCollation().getName().name; 
 				} else if (type.isNumberType()) { 
 				row[numeric_precision] = ValuePool.getLong( 
 				((NumberType) type).getNumericPrecisionInRadix()); 
 				row[declared_numeric_precision] = ValuePool.getLong( 
 				((NumberType) type).getNumericPrecisionInRadix()); 
 				if (type.isExactNumberType()) { 
 				row[numeric_scale] = row[declared_numeric_scale] = 
 				ValuePool.getLong(type.scale); 
 				} 
 				row[numeric_precision_radix] = 
 				ValuePool.getLong(type.getPrecisionRadix()); 
 				
 
 LINES: 		| StatementExpression.java: 146 - 153 || StatementSchemaDefinition.java: 69 - 76 || StatementSimple.java: 131 - 138 |
 CLONE CLASS: 	if (result.isError()) { 
 				result.getException().setStatementType(group, type); 
 				} 
 				return result; 
 				} 
 				Result getResult(Session session) { 
 				
 
 LINES: 		| ExpressionOp.java: 773 - 779 || ExpressionColumn.java: 672 - 678 |
 CLONE CLASS: 	} 
 				case OpTypes.SIMPLE_COLUMN : { 
 				Object value = 
 				session.sessionContext.rangeIterators[rangePosition] 
 				.getCurrent(columnIndex); 
 				return value; 
 				
 
 LINES: 		| DatabaseInformationFull.java: 6910 - 6920 || DatabaseInformationFull.java: 7019 - 7029 |
 CLONE CLASS: 	t.createPrimaryKeyConstraint(name, new int[] { 
 				0, 1, 2, 3, 4, 5 
 				}, false); 
 				return t; 
 				} 
 				final int trigger_catalog  = 0; 
 				final int trigger_schema   = 1; 
 				final int trigger_name     = 2; 
 				
 
 LINES: 		| DatabaseInformationFull.java: 3441 - 3452 || DatabaseInformationFull.java: 7933 - 7944 |
 CLONE CLASS: 	if (type.isCharacterType()) { 
 				row[character_maximum_length] = 
 				ValuePool.getLong(type.precision); 
 				row[character_octet_length] = ValuePool.getLong(type.precision 
 				* 2); 
 				row[character_set_catalog] = database.getCatalogName().name; 
 				row[character_set_schema] = 
 				((CharacterType) type).getCharacterSet().getSchemaName() 
 				.name; 
 				row[character_set_name] = 
 				((CharacterType) type).getCharacterSet().getName().name; 
 				row[collation_catalog] = database.getCatalogName().name; 
 				
 
 LINES: 		| ExpressionArrayAggregate.java: 92 - 104 || ExpressionAggregate.java: 62 - 74 |
 CLONE CLASS: 	} 
 				boolean isSelfAggregate() { 
 				return true; 
 				} 
 				public String getSQL() { 
 				StringBuffer sb   = new StringBuffer(64); 
 				String       left = getContextSQL(nodes.length > 0 ? nodes[LEFT] 
 				: null); 
 				switch (opType) { 
 				
 
 LINES: 		| JDBCArrayBasic.java: 346 - 415 || JDBCArray.java: 358 - 427 |
 CLONE CLASS: 	} 
 				public ResultSet getResultSet(java.util.Map<String, 
 				Class<?>> map) throws SQLException { 
 				return getResultSet(); 
 				} 
 				public ResultSet getResultSet(long index, int count) throws SQLException { 
 				checkClosed(); 
 				Result result = this.newColumnResult(index - 1, count); 
 				
 
 LINES: 		| BlobType.java: 88 - 93 || ClobType.java: 86 - 91 |
 CLONE CLASS: 	if (precision % (1024 * 1024 * 1024) == 0) { 
 				factor     = precision / (1024 * 1024 * 1024); 
 				multiplier = Tokens.T_G_FACTOR; 
 				} else if (precision % (1024 * 1024) == 0) { 
 				factor     = precision / (1024 * 1024); 
 				multiplier = Tokens.T_M_FACTOR; 
 				
 
 LINES: 		| RowSetNavigatorData.java: 535 - 557 || RowSetNavigatorDataTable.java: 535 - 557 |
 CLONE CLASS: 	reset(); 
 				} 
 				public void trim(int limitstart, int limitcount) { 
 				if (size == 0) { 
 				return; 
 				} 
 				if (limitstart >= size) { 
 				clear(); 
 				return; 
 				} 
 				if (limitstart != 0) { 
 				reset(); 
 				for (int i = 0; i < limitstart; i++) { 
 				next(); 
 				removeCurrent(); 
 				} 
 				} 
 				
 
 LINES: 		| DatabaseInformationMain.java: 2940 - 2947 || DatabaseInformationMain.java: 3367 - 3374 |
 CLONE CLASS: 	return t; 
 				} 
 				String  tableCatalog; 
 				String  tableSchema; 
 				String  tableName; 
 				Grantee granteeObject; 
 				
 
 LINES: 		| IndexAVLMemory.java: 188 - 198 || IndexAVL.java: 890 - 900 |
 CLONE CLASS: 	try { 
 				n = getAccessor(store); 
 				x = n; 
 				if (n == null) { 
 				store.setAccessor(this, ((RowAVL) row).getNode(position)); 
 				return; 
 				} 
 				while (true) { 
 				
 
 LINES: 		| BaseHashMap.java: 395 - 400 || BaseHashMap.java: 445 - 450 || BaseHashMap.java: 640 - 645 |
 CLONE CLASS: 	objectValueTable[lookup] = objectValue; 
 				} else if (isIntValue) { 
 				intValueTable[lookup] = (int) longValue; 
 				} else if (isLongValue) { 
 				longValueTable[lookup] = longValue; 
 				} 
 				
 
 LINES: 		| TransactionManagerMVCC.java: 168 - 177 || TransactionManager2PL.java: 99 - 108 || TransactionManagerMV2PL.java: 123 - 132 |
 CLONE CLASS: 	session.actionTimestamp         = getNextGlobalChangeTimestamp(); 
 				session.transactionEndTimestamp = session.actionTimestamp; 
 				endTransaction(session); 
 				for (int i = 0; i < limit; i++) { 
 				RowAction action = (RowAction) session.rowActionList.get(i); 
 				action.commit(session); 
 				} 
 				
 
 LINES: 		| ExpressionLogical.java: 645 - 651 || ExpressionLike.java: 121 - 127 |
 CLONE CLASS: 	} 
 				for (int i = 0; i < nodes.length; i++) { 
 				if (nodes[i] != null) { 
 				nodes[i].resolveTypes(session, this); 
 				} 
 				} 
 				
 
 LINES: 		| TestOdbcTypes.java: 857 - 862 || TestOdbcTypes.java: 897 - 902 || TestOdbcTypes.java: 937 - 942 || TestOdbcTypes.java: 978 - 983 || TestOdbcTypes.java: 1023 - 1028 || TestOdbcTypes.java: 1063 - 1068 || TestOdbcTypes.java: 1103 - 1108 || TestOdbcTypes.java: 1143 - 1148 || TestOdbcTypes.java: 1183 - 1188 || TestOdbcTypes.java: 1263 - 1268 || TestOdbcTypes.java: 1307 - 1312 || TestOdbcTypes.java: 1354 - 1359 || TestOdbcTypes.java: 1396 - 1401 || TestOdbcTypes.java: 1524 - 1529 || TestOdbcTypes.java: 1576 - 1581 |
 CLONE CLASS: 	assertEquals(1, ps.executeUpdate()); 
 				ps.setInt(1, 4); 
 				assertEquals(1, ps.executeUpdate()); 
 				ps.close(); 
 				netConn.commit(); 
 				ps = netConn.prepareStatement( 
 				
 
 LINES: 		| SimpleLog.java: 138 - 144 || SimpleLog.java: 161 - 167 |
 CLONE CLASS: 	if (level < atLevel) { 
 				return; 
 				} 
 				if (writer == null) { 
 				return; 
 				} 
 				
 
 LINES: 		| DataOutputStream.java: 94 - 101 || DataOutputStream.java: 111 - 118 |
 CLONE CLASS: 	int count = 0; 
 				tempBuffer[count++] = (byte) (v >>> 8); 
 				tempBuffer[count++] = (byte) v; 
 				write(tempBuffer, 0, count); 
 				} 
 				} 
 				
 
 LINES: 		| KMPSearchAlgorithm.java: 294 - 305 || KMPSearchAlgorithm.java: 364 - 375 |
 CLONE CLASS: 	} 
 				patternIndex++; 
 				} 
 				sourceIndex = (matchStart + patternIndex); 
 				} 
 				if (patternIndex == patternLength) { 
 				return matchStart; 
 				} else { 
 				return -1; 
 				
 
 LINES: 		| Server.java: 396 - 405 || Server.java: 1444 - 1451 |
 CLONE CLASS: 	synchronized (serverConnSet) { 
 				array = new ServerConnection[serverConnSet.size()]; 
 				serverConnSet.toArray(array); 
 				} 
 				for (int i = 0; i < array.length; i++) { 
 				ServerConnection sc = array[i]; 
 				
 
 LINES: 		| ExpressionColumn.java: 434 - 440 || ExpressionColumn.java: 476 - 482 |
 CLONE CLASS: 	} 
 				} 
 				} 
 				if (resolved) { 
 				return unresolvedSet; 
 				} 
 				
 
 LINES: 		| BlobDataID.java: 259 - 273 || ClobDataID.java: 254 - 268 |
 CLONE CLASS: 	} 
 				public boolean equals(Object other) { 
 				if (other instanceof BlobDataID) { 
 				return id == ((BlobDataID) other).id; 
 				} 
 				return false; 
 				} 
 				public int hashCode() { 
 				return (int) id; 
 				} 
 				} 
 				
 
 LINES: 		| TestUtil.java: 943 - 960 || TestUtil.java: 1192 - 1209 |
 CLONE CLASS: 	countWeWant = Integer.parseInt(lines[0]); 
 				} 
 				protected String getResultString() { 
 				return Integer.toString(getCountWeWant()); 
 				} 
 				private int getCountWeWant() { 
 				return countWeWant; 
 				} 
 				protected boolean test(Statement aStatement) { 
 				try { 
 				try { 
 				aStatement.execute(getSql()); 
 				
 
 LINES: 		| StatementCommand.java: 537 - 545 || StatementCommand.java: 782 - 790 |
 CLONE CLASS: 	session.checkAdmin(); 
 				session.checkDDLWrite(); 
 				return Result.updateZeroResult; 
 				} catch (HsqlException e) { 
 				return Result.newErrorResult(e, sql); 
 				} 
 				} 
 				
 
 LINES: 		| ParserDML.java: 230 - 236 || ParserDML.java: 297 - 303 |
 CLONE CLASS: 	if (baseTable.identitySequence.isAlways()) { 
 				if (!overridingUser && !overridingSystem) { 
 				throw Error.error(ErrorCode.X_42543); 
 				} 
 				} 
 				if (overridingUser) { 
 				
 
 LINES: 		| LongKeyLongValueHashMap.java: 116 - 125 || IntKeyIntValueHashMap.java: 109 - 118 || OrderedLongKeyHashMap.java: 151 - 160 || OrderedIntKeyHashMap.java: 108 - 117 || MultiValueHashMap.java: 106 - 115 || IntKeyHashMapConcurrent.java: 147 - 156 || LongKeyHashMap.java: 181 - 190 || LongKeyIntValueHashMap.java: 120 - 129 || HashMap.java: 118 - 127 || IntValueHashMap.java: 153 - 162 || LongValueHashMap.java: 148 - 157 || IntKeyHashMap.java: 93 - 102 |
 CLONE CLASS: 	} 
 				public Set keySet() { 
 				if (keySet == null) { 
 				keySet = new KeySet(); 
 				} 
 				return keySet; 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 1320 - 1329 || DatabaseInformationMain.java: 3475 - 3484 |
 CLONE CLASS: 	t.createPrimaryKeyConstraint(name, new int[] { 
 				0, 1, 2, 
 				}, false); 
 				return t; 
 				} 
 				Iterator  tables; 
 				Table     table; 
 				
 
 LINES: 		| NumberType.java: 779 - 785 || NumberType.java: 810 - 816 |
 CLONE CLASS: 	case Types.SQL_NUMERIC : 
 				case Types.SQL_DECIMAL : { 
 				BigDecimal dec = (BigDecimal) a; 
 				if (scale != dec.scale()) { 
 				dec = dec.setScale(scale, BigDecimal.ROUND_HALF_DOWN); 
 				} 
 				
 
 LINES: 		| FunctionCustom.java: 609 - 614 || FunctionCustom.java: 632 - 637 |
 CLONE CLASS: 	parseList = new short[] { 
 				Tokens.OPENBRACKET, Tokens.QUESTION, Tokens.COMMA, 
 				Tokens.QUESTION, Tokens.X_OPTION, 2, Tokens.COMMA, 
 				Tokens.QUESTION, Tokens.CLOSEBRACKET 
 				}; 
 				break; 
 				
 
 LINES: 		| TestBench.java: 345 - 365 || JDBCBench.java: 357 - 377 |
 CLONE CLASS: 	transaction_count   = 0; 
 				failed_transactions = 0; 
 				MemoryWatcher.reset(); 
 				} 
 				public synchronized void incrementTransactionCount() { 
 				transaction_count++; 
 				} 
 				public synchronized void incrementFailedTransactionCount() { 
 				failed_transactions++; 
 				} 
 				void createDatabase(String url, String user, 
 				String password) throws Exception { 
 				Connection Conn = connect(url, user, password); 
 				String     s    = Conn.getMetaData().getDatabaseProductName(); 
 				System.out.println("DBMS: " + s); 
 				
 
 LINES: 		| ParserRoutine.java: 1954 - 1964 || ParserRoutine.java: 2001 - 2011 |
 CLONE CLASS: 	statements = new Statement[list.size()]; 
 				list.toArray(statements); 
 				StatementCompound result = new StatementCompound(StatementTypes.IF, 
 				null); 
 				result.setStatements(statements); 
 				return result; 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 8041 - 8046 || DatabaseInformationFull.java: 8291 - 8296 |
 CLONE CLASS: 	addColumn(t, "VIEW_CATALOG", SQL_IDENTIFIER); 
 				addColumn(t, "VIEW_SCHEMA", SQL_IDENTIFIER); 
 				addColumn(t, "VIEW_NAME", SQL_IDENTIFIER); 
 				addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER); 
 				addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER); 
 				addColumn(t, "TABLE_NAME", SQL_IDENTIFIER); 
 				
 
 LINES: 		| ParserDDL.java: 4876 - 4883 || ParserDDL.java: 4978 - 4985 |
 CLONE CLASS: 	}; 
 				HsqlName[] writeLockNames = 
 				database.schemaManager.getCatalogNameArray(); 
 				StatementSchema cs = new StatementSchema(sql, type, args, null, 
 				writeLockNames); 
 				return cs; 
 				} 
 				
 
 LINES: 		| TransactionManagerCommon.java: 682 - 691 || TransactionManagerCommon.java: 757 - 766 |
 CLONE CLASS: 	} 
 				nameList = cs.getTableNamesForRead(); 
 				for (int i = 0; i < nameList.length; i++) { 
 				HsqlName name = nameList[i]; 
 				if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) { 
 				continue; 
 				} 
 				
 
 LINES: 		| JDBCCallableStatement.java: 1131 - 1138 || JDBCCallableStatement.java: 1179 - 1186 || JDBCCallableStatement.java: 4261 - 4268 |
 CLONE CLASS: 	checkGetParameterIndex(parameterIndex); 
 				Type   sourceType = parameterMetaData.columnTypes[parameterIndex - 1]; 
 				Object o          = getColumnInType(parameterIndex, sourceType); 
 				if (o == null) { 
 				return null; 
 				} 
 				
 
 LINES: 		| DatabaseManagerSwing.java: 1045 - 1055 || DatabaseManager.java: 531 - 541 |
 CLONE CLASS: 	} 
 				} 
 				public void keyPressed(KeyEvent k) {} 
 				public void keyReleased(KeyEvent k) {} 
 				public void keyTyped(KeyEvent k) { 
 				if (k.getKeyChar() == '\n' && k.isControlDown()) { 
 				k.consume(); 
 				
 
 LINES: 		| TestBench.java: 293 - 311 || JDBCBench.java: 270 - 288 |
 CLONE CLASS: 	Client.start(); 
 				vClient.addElement(Client); 
 				} 
 				e = vClient.elements(); 
 				while (e.hasMoreElements()) { 
 				Client = (Thread) e.nextElement(); 
 				Client.join(); 
 				} 
 				vClient.removeAllElements(); 
 				reportDone(); 
 				guardian = connect(url, user, password); 
 				
 
 LINES: 		| LobManager.java: 1583 - 1595 || LobManager.java: 1653 - 1665 |
 CLONE CLASS: 	long length) { 
 				if (length == 0) { 
 				return ResultLob.newLobSetResponse(lobID, 0); 
 				} 
 				if (byteBuffer == null) { 
 				throw Error.error(ErrorCode.DATA_IS_READONLY); 
 				} 
 				writeLock.lock(); 
 				try { 
 				
 
 LINES: 		| Grid.java: 166 - 204 || Tree.java: 147 - 187 |
 CLONE CLASS: 	} 
 				public void setMinimumSize(Dimension d) { 
 				dMinimum = d; 
 				} 
 				public void setBounds(int x, int y, int w, int h) { 
 				super.setBounds(x, y, w, h); 
 				iSbHeight = sbHoriz.getPreferredSize().height; 
 				iSbWidth  = sbVert.getPreferredSize().width; 
 				iHeight   = h - iSbHeight; 
 				iWidth    = w - iSbWidth; 
 				sbHoriz.setBounds(0, iHeight, iWidth, iSbHeight); 
 				sbVert.setBounds(iWidth, 0, iSbWidth, iHeight); 
 				adjustScroll(); 
 				iImage = null; 
 				repaint(); 
 				} 
 				
 
 LINES: 		| TestHashStructures.java: 59 - 69 || TestHashStructures.java: 139 - 147 |
 CLONE CLASS: 	java.util.HashMap uMap = new java.util.HashMap(); 
 				try { 
 				populateBySerialIntKeys(uMap, hMap, testSize); 
 				compareByUIterator(uMap, hMap); 
 				compareByHIterator(uMap, hMap); 
 				populateByRandomIntKeys(uMap, hMap, testSize); 
 				compareByUIterator(uMap, hMap); 
 				compareByHIterator(uMap, hMap); 
 				
 
 LINES: 		| SqlFileEmbedder.java: 32 - 150 || SqlFileEmbedder.java: 32 - 150 |
 CLONE CLASS: 	package org.hsqldb.sample; 
 				import java.sql.Connection; 
 				import java.sql.SQLException; 
 				import org.hsqldb.lib.RCData; 
 				import org.hsqldb.cmdline.SqlFile; 
 				import org.hsqldb.cmdline.SqlToolError; 
 				import java.io.File; 
 				import java.io.IOException; 
 				import java.util.HashMap; 
 				import java.util.Map; 
 				public class SqlFileEmbedder { 
 				private Connection conn; 
 				public Connection getConn() { 
 				return conn; 
 				} 
 				public static void main(String[] sa) throws Exception { 
 				if (sa.length < 3) { 
 				System.err.println("SYNTAX:  " + SqlFileEmbedder.class.getName() 
 				+ " path/ro/file.rc URLID file1.sql..."); 
 				System.exit(2); 
 				} 
 				SqlFileEmbedder embedder = 
 				new SqlFileEmbedder(new File(sa[0]), sa[1]); 
 				String[] files = new String[sa.length - 2]; 
 				for (int i = 0; i < sa.length - 2; i++) { 
 				files[i] = sa[i + 2]; 
 				} 
 				try { 
 				embedder.executeFiles(files); 
 				} finally { 
 				try { 
 				embedder.getConn().close(); 
 				} catch (SQLException se) { 
 				} 
 				} 
 				} 
 				public SqlFileEmbedder(File rcFile, String urlid) throws Exception { 
 				conn = (new RCData(rcFile, urlid)).getConnection(); 
 				conn.setAutoCommit(false); 
 				} 
 				public void executeFiles(String[] fileStrings) 
 				throws IOException, SqlToolError, SQLException { 
 				Map<String, String> sqlVarMap = new HashMap<String, String>(); 
 				sqlVarMap.put("invoker", getClass().getName()); 
 				File file; 
 				SqlFile sqlFile; 
 				for (String fileString : fileStrings) { 
 				file = new File(fileString); 
 				if (!file.isFile()) 
 				throw new IOException("SQL file not present: " 
 				+ file.getAbsolutePath()); 
 				sqlFile = new SqlFile(file); 
 				sqlFile.setConnection(conn); 
 				sqlFile.addUserVars(sqlVarMap); 
 				sqlFile.execute(); 
 				conn = sqlFile.getConnection(); 
 				sqlVarMap = sqlFile.getUserVars(); 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| SqlFile.java: 2538 - 2543 || SqlFile.java: 2602 - 2607 || SqlFile.java: 2661 - 2666 || SqlFile.java: 2697 - 2702 |
 CLONE CLASS: 	} finally { 
 				recursed = origRecursed; 
 				} 
 				} 
 				} catch (BreakException be) { 
 				String beMessage = be.getMessage(); 
 				
 
 LINES: 		| JDBCBlobFile.java: 139 - 149 || JDBCBlobFile.java: 207 - 217 |
 CLONE CLASS: 	} catch (SQLException ex) { 
 				throw ex; 
 				} catch (Exception ex) { 
 				throw JDBCUtil.sqlException(ex); 
 				} finally { 
 				if (is != null) { 
 				try { 
 				is.close(); 
 				} catch (Exception ex) {} 
 				} 
 				} 
 				
 
 LINES: 		| Schema.java: 98 - 108 || Grantee.java: 144 - 154 |
 CLONE CLASS: 	} 
 				public HsqlName getSchemaName() { 
 				return null; 
 				} 
 				public HsqlName getCatalogName() { 
 				return null; 
 				} 
 				public Grantee getOwner() { 
 				
 
 LINES: 		| SpringExtAuth.java: 121 - 134 || SpringExtAuth.java: 156 - 169 |
 CLONE CLASS: 	c.commit(); 
 				} finally { 
 				if (st != null) try { 
 				st.close(); 
 				} catch (SQLException se) { 
 				log.error("Failed to close emulation database setup Connection", 
 				se); 
 				} finally { 
 				st = null; 
 				} 
 				if (c != null) try { 
 				c.close(); 
 				} catch (SQLException se) { 
 				log.error("Failed to close emulation database setup Connection", 
 				
 
 LINES: 		| ParserDDL.java: 4825 - 4830 || ParserDDL.java: 4926 - 4931 || ParserRoutine.java: 1146 - 1151 || ParserDQL.java: 4811 - 4816 || ParserDQL.java: 4997 - 5002 |
 CLONE CLASS: 	if (token.tokenType == Tokens.COMMA) { 
 				read(); 
 				} else { 
 				break; 
 				} 
 				} 
 				
 
 LINES: 		| JaasAuthBean.java: 232 - 241 || LdapAuthBean.java: 449 - 458 || HsqldbSlaveAuthBean.java: 137 - 146 |
 CLONE CLASS: 	} 
 				public String[] authenticate(String userName, String password) 
 				throws DenyException { 
 				if (!initialized) { 
 				throw new IllegalStateException( 
 				"You must invoke the 'init' method to initialize the " 
 				
 
 LINES: 		| SqlFile.java: 453 - 458 || SqlTool.java: 82 - 87 |
 CLONE CLASS: 	private static final int revStringLength = revString.length(); 
 				private static final String  revnum = 
 				(revStringLength - " $".length() > "$Revision: ".length()) 
 				?  revString.substring("$Revision: ".length(), 
 				revStringLength - " $".length()) 
 				: "<UNTRACKED>"; 
 				
 
 LINES: 		| OrderedIntKeyHashMap.java: 58 - 68 || IntKeyHashMap.java: 54 - 64 |
 CLONE CLASS: 	} 
 				public Object get(int key) { 
 				int lookup = getLookup(key); 
 				if (lookup != -1) { 
 				return objectValueTable[lookup]; 
 				} 
 				return null; 
 				
 
 LINES: 		| ServerConnection.java: 675 - 687 || ServerConnection.java: 711 - 723 |
 CLONE CLASS: 	outPacket.writeShort(4); 
 				outPacket.writeInt(-1); 
 				outPacket.writeShort(0); 
 				outPacket.xmit('T', dataOutput); 
 				outPacket.write("SELECT"); 
 				outPacket.xmit('C', dataOutput); 
 				sendReadyForQuery = true; 
 				break; 
 				} 
 				
 
 LINES: 		| ParserDML.java: 462 - 475 || ParserDML.java: 575 - 588 |
 CLONE CLASS: 	HsqlList unresolved = condition.resolveColumnReferences(session, 
 				rangeGroup, rangeGroups, null); 
 				ExpressionColumn.checkColumnsResolved(unresolved); 
 				condition.resolveTypes(session, null); 
 				if (condition.isUnresolvedParam()) { 
 				condition.dataType = Type.SQL_BOOLEAN; 
 				} 
 				if (condition.getDataType() != Type.SQL_BOOLEAN) { 
 				throw Error.error(ErrorCode.X_42568); 
 				} 
 				} 
 				
 
 LINES: 		| TestSql.java: 35 - 40 || SqlFile.java: 51 - 56 || TransferDb.java: 35 - 40 |
 CLONE CLASS: 	import java.sql.DatabaseMetaData; 
 				import java.sql.PreparedStatement; 
 				import java.sql.ResultSet; 
 				import java.sql.ResultSetMetaData; 
 				import java.sql.SQLException; 
 				import java.sql.Statement; 
 				
 
 LINES: 		| RowStoreAVLHybrid.java: 138 - 145 || BlockObjectStore.java: 76 - 83 |
 CLONE CLASS: 	} catch (HsqlException e) { 
 				return null; 
 				} 
 				} 
 				public CachedObject get(CachedObject object, boolean keep) { 
 				try { 
 				
 
 LINES: 		| TestOdbcService.java: 274 - 283 || TestOdbcService.java: 309 - 318 |
 CLONE CLASS: 	assertEquals(3, rs.getInt(2)); 
 				assertEquals(25, rs.getInt(1)); 
 				assertNull(rs.getString(3)); 
 				assertEquals("str", rs.getString(4)); 
 				assertTrue("Not enough rows fetched", rs.next()); 
 				assertEquals(3, rs.getInt(2)); 
 				assertEquals(40, rs.getInt(1)); 
 				assertEquals("forty", rs.getString(3)); 
 				assertEquals("str", rs.getString(4)); 
 				
 
 LINES: 		| Expression.java: 322 - 329 || FunctionCustom.java: 3680 - 3687 |
 CLONE CLASS: 	if (i > 0) { 
 				sb.append(','); 
 				} 
 				sb.append(nodes[i].getSQL()); 
 				} 
 				sb.append(')'); 
 				
 
 LINES: 		| ServerConnection.java: 861 - 868 || ServerConnection.java: 1376 - 1383 |
 CLONE CLASS: 	+ rowData[i].getClass().getName() 
 				+ ") [" + dataString + ']'); 
 				} 
 				} 
 				} 
 				outPacket.xmit('D', dataOutput); 
 				} 
 				
 
 LINES: 		| RowSetNavigatorData.java: 424 - 434 || RowSetNavigatorDataTable.java: 437 - 447 |
 CLONE CLASS: 	removeDuplicates(session); 
 				other.sortFull(session); 
 				while (hasNext()) { 
 				Object[] currentData = getNext(); 
 				boolean  hasRow      = other.containsRow(currentData); 
 				if (hasRow) { 
 				removeCurrent(); 
 				} 
 				} 
 				
 
 LINES: 		| ParserDQL.java: 2485 - 2491 || ParserDQL.java: 3634 - 3640 || ParserDQL.java: 3655 - 3661 || ParserDQL.java: 5162 - 5168 || ParserDQL.java: 5750 - 5756 |
 CLONE CLASS: 	} catch (HsqlException ex) { 
 				ex.setLevel(compileContext.subqueryDepth); 
 				if (lastError == null 
 				|| lastError.getLevel() < ex.getLevel()) { 
 				lastError = ex; 
 				} 
 				
 
 LINES: 		| RAFileNIO.java: 217 - 232 || RAFileNIO.java: 283 - 298 |
 CLONE CLASS: 	positionBufferMove((int) transferLength); 
 				length -= transferLength; 
 				offset += transferLength; 
 				if (length == 0) { 
 				break; 
 				} 
 				} 
 				} catch (Throwable t) { 
 				database.logger.logWarningEvent(JVM_ERROR, t); 
 				IOException io = JavaSystem.toIOException(t); 
 				throw io; 
 				} 
 				
 
 LINES: 		| RowSetNavigatorData.java: 402 - 411 || RowSetNavigatorData.java: 458 - 467 |
 CLONE CLASS: 	if (newGroup) { 
 				compareData = currentData; 
 				it          = other.findFirstRow(currentData); 
 				} 
 				otherData = it.getNext(); 
 				if (otherData != null 
 				&& queryExpression.fullIndex.compareRowNonUnique( 
 				session, currentData, otherData, 
 				
 
 LINES: 		| MultiValueHashMap.java: 146 - 154 || HashMap.java: 165 - 173 || IntValueHashMap.java: 200 - 208 || LongValueHashMap.java: 186 - 194 |
 CLONE CLASS: 	} 
 				public boolean addAll(Collection c) { 
 				throw new RuntimeException(); 
 				} 
 				public boolean remove(Object o) { 
 				int oldSize = size(); 
 				
 
 LINES: 		| LobManager.java: 1539 - 1547 || LobManager.java: 1608 - 1616 |
 CLONE CLASS: 	int dataLength) { 
 				if (byteBuffer == null) { 
 				throw Error.error(ErrorCode.DATA_IS_READONLY); 
 				} 
 				writeLock.lock(); 
 				try { 
 				
 
 LINES: 		| ExpressionLogical.java: 1195 - 1201 || ExpressionOp.java: 774 - 780 || Expression.java: 1531 - 1537 || ExpressionColumn.java: 673 - 679 || ExpressionArithmetic.java: 616 - 622 |
 CLONE CLASS: 	case OpTypes.SIMPLE_COLUMN : { 
 				Object value = 
 				session.sessionContext.rangeIterators[rangePosition] 
 				.getCurrent(columnIndex); 
 				return value; 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 2732 - 2746 || DatabaseInformationFull.java: 3481 - 3495 || DatabaseInformationFull.java: 4434 - 4448 || DatabaseInformationFull.java: 6012 - 6026 || DatabaseInformationFull.java: 7971 - 7985 |
 CLONE CLASS: 	} else if (type.isBinaryType()) { 
 				row[character_maximum_length] = 
 				ValuePool.getLong(type.precision); 
 				row[character_octet_length] = 
 				ValuePool.getLong(type.precision); 
 				} else if (type.isBitType()) { 
 				row[character_maximum_length] = 
 				ValuePool.getLong(type.precision); 
 				row[character_octet_length] = 
 				ValuePool.getLong(type.precision); 
 				} else if (type.isArrayType()) { 
 				row[maximum_cardinality] = 
 				ValuePool.getLong(type.arrayLimitCardinality()); 
 				row[data_type] = "ARRAY"; 
 				} 
 				
 
 LINES: 		| Scanner.java: 2081 - 2091 || Scanner.java: 2236 - 2246 |
 CLONE CLASS: 	currentDigits++; 
 				i++; 
 				} else if (character == separators[currentPart]) { 
 				endOfPart = true; 
 				if (currentPart != lastPart) { 
 				i++; 
 				} 
 				} else if (currentPart == lastPart) { 
 				endOfPart = true; 
 				} else { 
 				
 
 LINES: 		| RangeVariableResolver.java: 1046 - 1052 || RangeVariableResolver.java: 1062 - 1068 |
 CLONE CLASS: 	!= conditions.rangeVar) { 
 				continue; 
 				} 
 				if (conditions.rangeVar.isLeftJoin) { 
 				continue; 
 				} 
 				
 
 LINES: 		| TestBench.java: 775 - 784 || TestBench.java: 946 - 955 || JDBCBench.java: 861 - 870 |
 CLONE CLASS: 	System.out.println(number_of_txns); 
 				ntrans = number_of_txns; 
 				Conn   = connect(url, user, password); 
 				if (Conn == null) { 
 				return; 
 				} 
 				try { 
 				
 
 LINES: 		| RowStoreAVLDiskData.java: 232 - 244 || RowStoreAVLMemory.java: 160 - 172 |
 CLONE CLASS: 	public void rollbackRow(Session session, Row row, int changeAction, 
 				int txModel) { 
 				switch (changeAction) { 
 				case RowAction.ACTION_DELETE : 
 				if (txModel == TransactionManager.LOCKS) { 
 				((RowAVL) row).setNewNodes(this); 
 				indexRow(session, row); 
 				} 
 				break; 
 				case RowAction.ACTION_INSERT : 
 				
 
 LINES: 		| ExpressionArrayAggregate.java: 118 - 131 || ExpressionAggregate.java: 127 - 140 |
 CLONE CLASS: 	sb.append(left).append(')'); 
 				break; 
 				default : 
 				throw Error.runtimeError(ErrorCode.U_S0500, 
 				"ExpressionAggregate"); 
 				} 
 				return sb.toString(); 
 				} 
 				protected String describe(Session session, int blanks) { 
 				StringBuffer sb = new StringBuffer(64); 
 				
 
 LINES: 		| FrameworkLogger.java: 421 - 427 || FrameworkLogger.java: 449 - 457 |
 CLONE CLASS: 	}); 
 				} catch (Exception e) { 
 				throw new RuntimeException( 
 				"Logging failed when attempting to log: " + message, e); 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| JDBCArrayBasic.java: 539 - 557 || JDBCArray.java: 585 - 603 |
 CLONE CLASS: 	RowSetNavigatorClient navigator = new RowSetNavigatorClient(); 
 				for (int i = (int) position; i < position + count; i++) { 
 				Object[] rowData = new Object[2]; 
 				rowData[0] = Integer.valueOf(i + 1); 
 				rowData[1] = data[i]; 
 				navigator.add(rowData); 
 				} 
 				Result result = Result.newDataResult(meta); 
 				result.setNavigator(navigator); 
 				return result; 
 				} 
 				private void checkClosed() throws SQLException { 
 				
 
 LINES: 		| RangeVariable.java: 1109 - 1119 || RangeVariable.java: 1220 - 1230 |
 CLONE CLASS: 	} 
 				public void removeCurrent() {} 
 				public void reset() { 
 				if (it != null) { 
 				it.release(); 
 				} 
 				it            = null; 
 				
 
 LINES: 		| DataFileCache.java: 1090 - 1112 || DataFileCache.java: 1147 - 1169 |
 CLONE CLASS: 	} 
 				} 
 				} 
 				cache.put(object); 
 				if (keep) { 
 				object.keepInMemory(true); 
 				} 
 				store.set(object); 
 				return object; 
 				} catch (HsqlException e) { 
 				logSevereEvent(dataFileName + " getFromFile failed " + pos, e); 
 				throw e; 
 				} finally { 
 				writeLock.unlock(); 
 				} 
 				} 
 				
 
 LINES: 		| RAFileInJar.java: 262 - 270 || RAStorageWrapper.java: 102 - 110 |
 CLONE CLASS: 	} 
 				public boolean ensureLength(long newLong) { 
 				return true; 
 				} 
 				public boolean setLength(long newLength) { 
 				return false; 
 				} 
 				
 
 LINES: 		| StatementSchema.java: 454 - 460 || StatementSchema.java: 608 - 614 || StatementSchema.java: 955 - 961 || StatementSchema.java: 1055 - 1061 || StatementSchema.java: 1089 - 1095 |
 CLONE CLASS: 	} 
 				} 
 				break; 
 				} catch (HsqlException e) { 
 				return Result.newErrorResult(e, sql); 
 				} 
 				
 
 LINES: 		| TestBench.java: 46 - 52 || JDBCBench.java: 16 - 22 |
 CLONE CLASS: 	import java.sql.DriverManager; 
 				import java.sql.PreparedStatement; 
 				import java.sql.ResultSet; 
 				import java.sql.SQLException; 
 				import java.sql.Statement; 
 				import java.util.Enumeration; 
 				import java.util.Vector; 
 				
 
 LINES: 		| OrderedIntHashSet.java: 103 - 109 || OrderedLongHashSet.java: 103 - 109 |
 CLONE CLASS: 	int i = 0; 
 				for (; i < array.length; i++) { 
 				if (!super.containsKey(array[i])) { 
 				break; 
 				} 
 				} 
 				
 
 LINES: 		| TestUtil.java: 975 - 982 || TestUtil.java: 1242 - 1249 |
 CLONE CLASS: 	message = x.toString(); 
 				return false; 
 				} 
 				return true; 
 				} 
 				} 
 				
 
 LINES: 		| TestOdbcTypes.java: 656 - 661 || TestOdbcTypes.java: 684 - 689 |
 CLONE CLASS: 	Statement st = null; 
 				try { 
 				st = netConn.createStatement(); 
 				rs = st.executeQuery("SELECT * FROM alltypes WHERE id in (1, 2)"); 
 				assertTrue("Got no rows with id in (1, 2)", rs.next()); 
 				assertTrue("Got only one row with id in (1, 2)", rs.next()); 
 				
 
 LINES: 		| SchemaManager.java: 827 - 834 || SchemaManager.java: 1351 - 1358 |
 CLONE CLASS: 	readLock.lock(); 
 				try { 
 				Schema schema = (Schema) schemaMap.get(schemaName); 
 				if (schema == null) { 
 				return null; 
 				} 
 				
 
 LINES: 		| TransactionManagerMVCC.java: 144 - 154 || TransactionManager2PL.java: 85 - 95 || TransactionManagerMV2PL.java: 109 - 119 |
 CLONE CLASS: 	} 
 				public boolean commitTransaction(Session session) { 
 				if (session.abortTransaction) { 
 				return false; 
 				} 
 				writeLock.lock(); 
 				try { 
 				
 
 LINES: 		| NumberType.java: 1071 - 1077 || NumberType.java: 1122 - 1128 |
 CLONE CLASS: 	} else if (a instanceof Double || a instanceof Float) { 
 				double d = ((Number) a).doubleValue(); 
 				if (session instanceof Session) { 
 				if (!((Session) session).database.sqlConvertTruncate) { 
 				d = java.lang.Math.rint(d); 
 				} 
 				
 
 LINES: 		| Session.java: 1460 - 1479 || Session.java: 1520 - 1539 |
 CLONE CLASS: 	updateCounts[count++] = in.getUpdateCount(); 
 				} else if (in.isData()) { 
 				updateCounts[count++] = ResultConstants.SUCCESS_NO_INFO; 
 				} else if (in.mode == ResultConstants.CALL_RESPONSE) { 
 				updateCounts[count++] = ResultConstants.SUCCESS_NO_INFO; 
 				} else if (in.mode == ResultConstants.ERROR) { 
 				updateCounts = ArrayUtil.arraySlice(updateCounts, 0, count); 
 				error        = in; 
 				break; 
 				} else { 
 				throw Error.runtimeError(ErrorCode.U_S0500, "Session"); 
 				} 
 				} 
 				
 
 LINES: 		| TestHashStructures.java: 83 - 90 || TestHashStructures.java: 156 - 163 |
 CLONE CLASS: 	compareByUIterator(uMap, hMap); 
 				compareByHIterator(uMap, hMap); 
 				} catch (Exception e) { 
 				failed = true; 
 				} 
 				assertTrue(!failed); 
 				} 
 				
 
 LINES: 		| TestUtil.java: 973 - 980 || TestUtil.java: 1240 - 1247 |
 CLONE CLASS: 	} 
 				} catch (Exception x) { 
 				message = x.toString(); 
 				return false; 
 				} 
 				return true; 
 				
 
 LINES: 		| SchemaManager.java: 1186 - 1196 || SchemaManager.java: 1212 - 1222 || SchemaManager.java: 1237 - 1247 || SchemaManager.java: 1262 - 1272 || SchemaManager.java: 1288 - 1298 |
 CLONE CLASS: 	} 
 				} 
 				if (raise) { 
 				throw Error.error(ErrorCode.X_42501, name); 
 				} 
 				return null; 
 				} finally { 
 				readLock.unlock(); 
 				} 
 				
 
 LINES: 		| Transfer.java: 411 - 421 || DatabaseManager.java: 476 - 486 |
 CLONE CLASS: 	Dimension d    = Toolkit.getDefaultToolkit().getScreenSize(); 
 				Dimension size = fMain.getSize(); 
 				if (d.width >= 640) { 
 				fMain.setLocation((d.width - size.width) / 2, 
 				(d.height - size.height) / 2); 
 				} else { 
 				fMain.setLocation(0, 0); 
 				fMain.setSize(d); 
 				} 
 				
 
 LINES: 		| JDBCClobFile.java: 948 - 957 || JDBCClobClient.java: 746 - 755 |
 CLONE CLASS: 	String csn = charsetName; 
 				if (csn == null) { 
 				csn = Charset.defaultCharset().name(); 
 				} 
 				try { 
 				if (Charset.isSupported(csn)) { 
 				return Charset.forName(csn); 
 				} 
 				
 
 LINES: 		| SchemaManager.java: 1403 - 1410 || SchemaManager.java: 1433 - 1440 |
 CLONE CLASS: 	set        = schema.indexLookup; 
 				objectName = set.getName(name); 
 				if (objectName == null) { 
 				return null; 
 				} 
 				table = 
 				
 
 LINES: 		| JDBCResultSet.java: 4928 - 4943 || JDBCCallableStatement.java: 1408 - 1423 |
 CLONE CLASS: 	.isDateTimeTypeWithZone()) { 
 				Calendar calendar = cal == null ? session.getCalendar() 
 				: cal; 
 				if (cal != null) { 
 				millis = HsqlDateTime.convertMillisToCalendar(calendar, 
 				millis); 
 				} 
 				} 
 				Timestamp ts = new Timestamp(millis); 
 				ts.setNanos(t.getNanos()); 
 				return ts; 
 				} 
 				
 
 LINES: 		| ServerConnection.java: 819 - 829 || ServerConnection.java: 1329 - 1336 |
 CLONE CLASS: 	while (navigator.next()) { 
 				rowNum++; 
 				Object[] rowData = navigator.getCurrent(); 
 				if (rowData == null) { 
 				throw new RecoverableOdbcFailure("Null row?"); 
 				} 
 				
 
 LINES: 		| ParserDQL.java: 3239 - 3245 || ParserDQL.java: 3404 - 3410 |
 CLONE CLASS: 	FunctionSQL function = 
 				FunctionSQL.newSQLFunction(token.tokenString, 
 				compileContext); 
 				if (function == null) { 
 				throw super.unexpectedToken(); 
 				} 
 				
 
 LINES: 		| NodeAVLDiskLarge.java: 349 - 357 || NodeAVLDisk.java: 388 - 396 |
 CLONE CLASS: 	} 
 				if (!row.isInMemory()) { 
 				throw Error.runtimeError(ErrorCode.U_S0500, "NodeAVLDisk"); 
 				} 
 				row.setNodesChanged(); 
 				node.iLeft = n == null ? NO_POS 
 				
 
 LINES: 		| Scanner.java: 708 - 718 || Scanner.java: 740 - 750 |
 CLONE CLASS: 	int c = charAt(currentPosition); 
 				if (c == 'u' || c == 'U') { 
 				if (scanSpecialIdentifier(Tokens.T_UESCAPE)) { 
 				scanSeparator(); 
 				escape = scanEscapeDefinition(); 
 				if (escape == -1) { 
 				token.tokenType   = Tokens.X_MALFORMED_UNICODE_ESCAPE; 
 				token.isMalformed = true; 
 				
 
 LINES: 		| SqlFile.java: 6152 - 6159 || SqlFile.java: 6164 - 6171 |
 CLONE CLASS: 	} else if (c >= 'A' && c <= 'F') { 
 				octet += 10 + c - 'A'; 
 				} else if (c >= '0' && c <= '9') { 
 				octet += c - '0'; 
 				} else { 
 				throw new NumberFormatException( 
 				"Non-hex character in input at offset " + i + ": " + c); 
 				} 
 				
 
 LINES: 		| TestBench.java: 519 - 541 || JDBCBench.java: 556 - 578 |
 CLONE CLASS: 	try { 
 				Statement Stmt = Conn.createStatement(); 
 				String    Query; 
 				Query = "DELETE FROM history"; 
 				Stmt.execute(Query); 
 				Stmt.clearWarnings(); 
 				Query = "DELETE FROM accounts"; 
 				Stmt.execute(Query); 
 				Stmt.clearWarnings(); 
 				Query = "DELETE FROM tellers"; 
 				Stmt.execute(Query); 
 				Stmt.clearWarnings(); 
 				Query = "DELETE FROM branches"; 
 				Stmt.execute(Query); 
 				Stmt.clearWarnings(); 
 				
 
 LINES: 		| Collation.java: 484 - 495 || Routine.java: 164 - 175 |
 CLONE CLASS: 	return name.schema; 
 				} 
 				public HsqlName getCatalogName() { 
 				return name.schema.schema; 
 				} 
 				public Grantee getOwner() { 
 				return name.schema.owner; 
 				} 
 				public OrderedHashSet getReferences() { 
 				
 
 LINES: 		| ParserDQL.java: 3022 - 3031 || ParserDQL.java: 3070 - 3079 |
 CLONE CLASS: 	break; 
 				} 
 				if (end) { 
 				break; 
 				} 
 				read(); 
 				Expression a = e; 
 				
 
 LINES: 		| TestDatabaseMetaData.java: 117 - 124 || TestDatabaseMetaData.java: 160 - 167 |
 CLONE CLASS: 	for (i = 0; rs.next(); i++) { 
 				String tempstr = 
 				rs.getString("TABLE_NAME").trim().toLowerCase(); 
 				tablesarr.add(tempstr); 
 				} 
 				rs.close(); 
 				
 
 LINES: 		| SessionData.java: 337 - 344 || SessionData.java: 367 - 374 |
 CLONE CLASS: 	} 
 				database.lobManager.adjustUsageCount(session, 
 				((LobData) value).getId(), 
 				adjust); 
 				hasLobOps = true; 
 				} 
 				
 
 LINES: 		| DatabaseManagerSwing.java: 1187 - 1196 || DatabaseManagerSwing.java: 1207 - 1216 |
 CLONE CLASS: 	if (defDirectory != null) { 
 				f.setCurrentDirectory(new File(defDirectory)); 
 				} 
 				int option = f.showSaveDialog((Component) fMain); 
 				if (option == JFileChooser.APPROVE_OPTION) { 
 				File file = f.getSelectedFile(); 
 				if (file != null) { 
 				
 
 LINES: 		| TestOdbcTypes.java: 794 - 801 || TestOdbcTypes.java: 827 - 834 |
 CLONE CLASS: 	assertTrue("Got only one row with id in (1, 2)", rs.next()); 
 				assertFalse("Got too many rows with id in (1, 2)", rs.next()); 
 				} catch (SQLException se) { 
 				junit.framework.AssertionFailedError ase 
 				= new junit.framework.AssertionFailedError(se.getMessage()); 
 				ase.initCause(se); 
 				
 
 LINES: 		| Database.java: 722 - 731 || Logger.java: 2133 - 2142 |
 CLONE CLASS: 	list.add(sb.toString()); 
 				sb.setLength(0); 
 				} 
 				} 
 				String[] array = new String[list.size()]; 
 				list.toArray(array); 
 				return array; 
 				
 
 LINES: 		| TestPreparedSubQueries.java: 135 - 142 || TestPreparedStatements.java: 176 - 183 |
 CLONE CLASS: 	System.out.println(" -- executing "); 
 				if (stmtArray[i].update) { 
 				int r = ps.executeUpdate(); 
 				System.out.println(" ***** ps.executeUpdate gave me " 
 				+ r); 
 				} else { 
 				
 
 LINES: 		| SetFunction.java: 383 - 390 || SetFunction.java: 504 - 511 |
 CLONE CLASS: 	} 
 				} 
 				case OpTypes.SUM : { 
 				switch (typeCode) { 
 				case Types.TINYINT : 
 				case Types.SQL_SMALLINT : 
 				case Types.SQL_INTEGER : 
 				
 
 LINES: 		| TestHarness.java: 38 - 44 || TestGroupByHaving.java: 32 - 38 || TestSchemaParse.java: 32 - 38 |
 CLONE CLASS: 	package org.hsqldb.test; 
 				import java.sql.Connection; 
 				import java.sql.DriverManager; 
 				import java.sql.ResultSet; 
 				import java.sql.SQLException; 
 				import java.sql.Statement; 
 				
 
 LINES: 		| ParserRoutine.java: 2055 - 2069 || ParserRoutine.java: 2091 - 2105 |
 CLONE CLASS: 	readThis(Tokens.THEN); 
 				statements = compileSQLProcedureStatementList(routine, context); 
 				for (int i = 0; i < statements.length; i++) { 
 				list.add(statements[i]); 
 				} 
 				if (token.tokenType != Tokens.WHEN) { 
 				break; 
 				} 
 				} while (true); 
 				return list; 
 				} 
 				
 
 LINES: 		| NumberType.java: 1426 - 1432 || NumberType.java: 1476 - 1482 || NumberType.java: 1524 - 1530 || NumberType.java: 1575 - 1581 |
 CLONE CLASS: 	switch (typeCode) { 
 				case Types.SQL_REAL : 
 				case Types.SQL_FLOAT : 
 				case Types.SQL_DOUBLE : { 
 				double ad = ((Number) a).doubleValue(); 
 				double bd = ((Number) b).doubleValue(); 
 				
 
 LINES: 		| TriggerSample.java: 37 - 274 || TriggerSample.java: 37 - 274 |
 CLONE CLASS: 	import java.sql.PreparedStatement; 
 				import java.sql.ResultSet; 
 				import java.sql.ResultSetMetaData; 
 				import java.sql.SQLException; 
 				import java.sql.Statement; 
 				import org.hsqldb.error.Error; 
 				import org.hsqldb.error.ErrorCode; 
 				import org.hsqldb.Trigger; 
 				import org.hsqldb.lib.StringUtil; 
 				public class TriggerSample implements Trigger { 
 				static final PrintWriter out  = new PrintWriter(System.out); 
 				static final String      drv  = "org.hsqldb.jdbc.JDBCDriver"; 
 				static final String      url  = "jdbc:hsqldb:mem:trigger-sample"; 
 				static final String      usr  = "SA"; 
 				static final String      pwd  = ""; 
 				static final String      impl = TriggerSample.class.getName(); 
 				static final String      tn   = "trig_test"; 
 				static final String drop_test_table_stmt = "DROP TABLE " + tn 
 				+ " IF EXISTS"; 
 				static final String create_test_table_stmt = "CREATE TABLE " + tn 
 				+ "(id INTEGER PRIMARY KEY, value VARCHAR(20))"; 
 				static final String drop_audit_table_stmt = "DROP TABLE audit IF EXISTS"; 
 				static final String create_audit_table_stmt = "CREATE TABLE audit(" 
 				+ "id  INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1), " 
 				+ "op  VARCHAR(6), " + "tn  VARCHAR(20), " + "ors LONGVARCHAR, " 
 				+ "nrs LONGVARCHAR, " + "ts  TIMESTAMP DEFAULT CURRENT_TIMESTAMP)"; 
 				static final String audit_insert_stmt = 
 				"INSERT INTO audit(op, tn, ors, nrs) VALUES(?, ?, ?, ?)"; 
 				public void fire(int typ, String trn, String tn, Object[] or, 
 				Object[] nr) { 
 				synchronized (TriggerSample.class) { 
 				String ors = or == null ? "null" 
 				: StringUtil.arrayToString(or); 
 				String nrs = nr == null ? "null" 
 				: StringUtil.arrayToString(nr); 
 				out.println("----------------------------------------"); 
 				out.println(getTriggerDescriptor(trn, typ, tn)); 
 				out.println("old row : " + ors); 
 				out.println("new row : " + nrs); 
 				out.flush(); 
 				if ("TRIG_TEST".equals(tn)) { 
 				switch (typ) { 
 				case INSERT_BEFORE_ROW : { 
 				final int ID = ((Number) nr[0]).intValue(); 
 				doAssert(ID < 11, "ID < 11"); 
 				break; 
 				} 
 				case UPDATE_BEFORE_ROW : { 
 				if ("unchangable".equals(or[1])) { 
 				nr[1] = or[1]; 
 				} 
 				break; 
 				} 
 				} 
 				} 
 				doAuditStep(typ, tn, ors, nrs); 
 				} 
 				} 
 				private static void doAssert(boolean b, String msg) { 
 				if (b) { 
 				} else { 
 				throw Error.error(ErrorCode.GENERAL_ERROR, msg); 
 				} 
 				} 
 				private static void doAuditStep(int typ, String tn, String ors, 
 				String nrs) { 
 				Connection        conn; 
 				PreparedStatement stmt; 
 				switch (typ) { 
 				case INSERT_AFTER_ROW : 
 				case UPDATE_AFTER_ROW : 
 				case DELETE_AFTER_ROW : { 
 				try { 
 				conn = getConnection(); 
 				stmt = conn.prepareStatement(audit_insert_stmt); 
 				stmt.setString(1, getOperationSpec(typ)); 
 				stmt.setString(2, tn); 
 				stmt.setString(3, ors); 
 				stmt.setString(4, nrs); 
 				stmt.executeUpdate(); 
 				conn.close(); 
 				} catch (SQLException se) { 
 				se.printStackTrace(); 
 				} 
 				} 
 				} 
 				} 
 				public static String getWhenSpec(int type) { 
 				switch (type) { 
 				case INSERT_BEFORE_ROW : 
 				case UPDATE_BEFORE_ROW : 
 				case DELETE_BEFORE_ROW : { 
 				return "BEFORE"; 
 				} 
 				case INSERT_AFTER : 
 				case INSERT_AFTER_ROW : 
 				case UPDATE_AFTER : 
 				case UPDATE_AFTER_ROW : 
 				case DELETE_AFTER : 
 				case DELETE_AFTER_ROW : { 
 				return "AFTER"; 
 				} 
 				default : { 
 				return ""; 
 				} 
 				} 
 				
 
 LINES: 		| IntervalType.java: 192 - 199 || DateTimeType.java: 145 - 152 |
 CLONE CLASS: 	} 
 				} 
 				public int getJDBCPrecision() { 
 				return this.displaySize(); 
 				} 
 				public int getSQLGenericTypeCode() { 
 				
 
 LINES: 		| FrameworkLogger.java: 630 - 640 || LockFile.java: 1168 - 1178 |
 CLONE CLASS: 	} finally { 
 				if (fis != null) { 
 				try { 
 				fis.close(); 
 				} catch (IOException ioe) { 
 				} 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| TestOdbcTypes.java: 165 - 170 || TestOdbcTypes.java: 195 - 200 || TestOdbcTypes.java: 225 - 230 || TestOdbcTypes.java: 254 - 259 || TestOdbcTypes.java: 318 - 323 || TestOdbcTypes.java: 347 - 352 || TestOdbcTypes.java: 376 - 381 || TestOdbcTypes.java: 405 - 410 || TestOdbcTypes.java: 434 - 439 || TestOdbcTypes.java: 464 - 469 || TestOdbcTypes.java: 494 - 499 || TestOdbcTypes.java: 525 - 530 || TestOdbcTypes.java: 554 - 559 || TestOdbcTypes.java: 616 - 621 || TestOdbcTypes.java: 646 - 651 || TestOdbcTypes.java: 675 - 680 || TestOdbcTypes.java: 703 - 708 || TestOdbcTypes.java: 809 - 814 || TestOdbcTypes.java: 842 - 847 |
 CLONE CLASS: 	st.close(); 
 				} 
 				} catch(Exception e) { 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| DataSpaceManagerBlocks.java: 390 - 397 || DataSpaceManagerBlocks.java: 675 - 682 |
 CLONE CLASS: 	ba.initialise(false); 
 				for (;;) { 
 				boolean result = ba.nextBlock(); 
 				if (!result) { 
 				break; 
 				} 
 				
 
 LINES: 		| OdbcUtil.java: 259 - 266 || OdbcUtil.java: 271 - 278 |
 CLONE CLASS: 	} else if (c >= 'A' && c <= 'F') { 
 				octet += 10 + c - 'A'; 
 				} else if (c >= '0' && c <= '9') { 
 				octet += c - '0'; 
 				} else { 
 				throw new IllegalArgumentException( 
 				"Non-hex character in input at offset " + i + ": " + c); 
 				} 
 				
 
 LINES: 		| IntervalType.java: 1084 - 1092 || DTIType.java: 235 - 243 |
 CLONE CLASS: 	} 
 				public int getStartIntervalType() { 
 				return startIntervalType; 
 				} 
 				public int getEndIntervalType() { 
 				return endIntervalType; 
 				} 
 				
 
 LINES: 		| TestLobs.java: 117 - 136 || TestLobs.java: 880 - 899 |
 CLONE CLASS: 	ps = connection.prepareStatement(dql0); 
 				ResultSet rs = ps.executeQuery(); 
 				rs.next(); 
 				Blob blob1 = rs.getBlob(2); 
 				rs.next(); 
 				Blob   blob2 = rs.getBlob(2); 
 				byte[] data1 = blob1.getBytes(1, 10); 
 				byte[] data2 = blob2.getBytes(1, 10); 
 				assertTrue(data1[4] == 5 && data2[4] == 50); 
 				} catch (SQLException e) { 
 				e.printStackTrace(); 
 				fail("test failure"); 
 				} 
 				} 
 				
 
 LINES: 		| ExpressionColumn.java: 454 - 460 || ExpressionColumn.java: 469 - 475 |
 CLONE CLASS: 	dataType   = seq.getDataType(); 
 				sequence   = seq; 
 				schema     = null; 
 				tableName  = null; 
 				columnName = null; 
 				resolved   = true; 
 				} 
 				
 
 LINES: 		| Table.java: 941 - 958 || Table.java: 973 - 990 |
 CLONE CLASS: 	for (int i = 0; i < fkMainConstraints.length; i++) { 
 				Constraint constraint  = fkMainConstraints[i]; 
 				Table      ref         = constraint.getRef(); 
 				int[]      mainColumns = constraint.getMainColumns(); 
 				if (ref == this) { 
 				continue; 
 				} 
 				if (columnMap == null) { 
 				if (constraint.core.hasDeleteAction) { 
 				int[] cols = 
 				constraint.core.deleteAction 
 				== SchemaObject.ReferentialAction.CASCADE ? null 
 				: constraint 
 				.getRefColumns(); 
 				if (set.add(ref.getName())) { 
 				
 
 LINES: 		| CharacterType.java: 653 - 661 || IntervalType.java: 647 - 655 |
 CLONE CLASS: 	} 
 				public String convertToString(Object a) { 
 				if (a == null) { 
 				return null; 
 				} 
 				switch (typeCode) { 
 				
 
 LINES: 		| TransactionManagerMVCC.java: 103 - 112 || TransactionManagerMVCC.java: 148 - 155 || TransactionManager2PL.java: 89 - 96 || TransactionManagerMV2PL.java: 113 - 120 |
 CLONE CLASS: 	if (session.abortTransaction) { 
 				return false; 
 				} 
 				writeLock.lock(); 
 				try { 
 				int limit = session.rowActionList.size(); 
 				
 
 LINES: 		| TestBench.java: 249 - 259 || JDBCBench.java: 226 - 236 |
 CLONE CLASS: 	E.printStackTrace(); 
 				} finally { 
 				MemoryWatcher.end(); 
 				try { 
 				MemoryWatcher.join(); 
 				if (ShutdownCommand.length() > 0) { 
 				guardian = connect(url, user, password); 
 				Statement Stmt = guardian.createStatement(); 
 				
 
 LINES: 		| RowStoreAVLHybrid.java: 120 - 127 || RowStoreAVLHybrid.java: 134 - 141 |
 CLONE CLASS: 	} else { 
 				throw Error.runtimeError(ErrorCode.U_S0500, 
 				"RowStoreAVLHybrid"); 
 				} 
 				} catch (HsqlException e) { 
 				return null; 
 				} 
 				} 
 				
 
 LINES: 		| StatementSchema.java: 1508 - 1522 || StatementSchema.java: 1537 - 1551 |
 CLONE CLASS: 	if (name.schema == null) { 
 				name.schema = schemaName == null 
 				? session.getCurrentSchemaHsqlName() 
 				: schemaName; 
 				} else { 
 				name.schema = session.getSchemaHsqlName(name.schema.name); 
 				if (name.schema == null) { 
 				throw Error.error(ErrorCode.X_42505); 
 				} 
 				if (isSchemaDefinition && schemaName != name.schema) { 
 				throw Error.error(ErrorCode.X_42505); 
 				} 
 				} 
 				
 
 LINES: 		| TransactionManagerCommon.java: 587 - 596 || TransactionManagerCommon.java: 670 - 679 || TransactionManagerCommon.java: 731 - 740 |
 CLONE CLASS: 	} 
 				HsqlName[] nameList = cs.getTableNamesForWrite(); 
 				for (int i = 0; i < nameList.length; i++) { 
 				HsqlName name = nameList[i]; 
 				if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) { 
 				continue; 
 				} 
 				
 
 LINES: 		| HsqlArrayList.java: 167 - 176 || HsqlArrayList.java: 206 - 215 || HsqlArrayList.java: 237 - 246 |
 CLONE CLASS: 	if (index >= elementCount) { 
 				throw new IndexOutOfBoundsException("Index out of bounds: " 
 				+ index + " >= " 
 				+ elementCount); 
 				} 
 				if (index < 0) { 
 				throw new IndexOutOfBoundsException("Index out of bounds: " 
 				+ index + " < 0"); 
 				} 
 				
 
 LINES: 		| ParserDDL.java: 3121 - 3128 || ParserDDL.java: 3161 - 3168 |
 CLONE CLASS: 	constName = database.nameManager.newAutoName("CT", 
 				table.getSchemaName(), table.getName(), 
 				SchemaObject.CONSTRAINT); 
 				} 
 				Constraint c = 
 				new Constraint(constName, null, 
 				SchemaObject.ConstraintTypes.CHECK); 
 				
 
 LINES: 		| SqlFile.java: 2677 - 2683 || SqlFile.java: 2712 - 2718 |
 CLONE CLASS: 	throw bs; 
 				} catch (RuntimeException re) { 
 				throw re; 
 				} catch (Exception e) { 
 				throw new BadSpecial( 
 				SqltoolRB.pl_block_fail.getString(), e); 
 				} 
 				
 
 LINES: 		| OrderedIntKeyHashMap.java: 64 - 79 || IntKeyHashMap.java: 60 - 75 |
 CLONE CLASS: 	if (lookup != -1) { 
 				return objectValueTable[lookup]; 
 				} 
 				return null; 
 				} 
 				public Object put(int key, Object value) { 
 				return super.addOrRemove(key, value, null, false); 
 				} 
 				public boolean containsValue(Object value) { 
 				return super.containsValue(value); 
 				} 
 				public Object remove(int key) { 
 				
 
 LINES: 		| TestPreparedSubQueries.java: 146 - 157 || TestPreparedStatements.java: 205 - 216 |
 CLONE CLASS: 	} 
 				} else { 
 				System.out.println(" -- executing directly\n<<<\n" 
 				+ stmtArray[i].command + "\n>>>\n"); 
 				Statement s = con.createStatement(); 
 				boolean   b = s.execute(stmtArray[i].command); 
 				System.out.println(" ***** st.execute gave me " + b); 
 				} 
 				} 
 				} catch (Exception e) { 
 				
 
 LINES: 		| IndexAVL.java: 1746 - 1761 || IndexAVL.java: 1828 - 1843 |
 CLONE CLASS: 	} 
 				if (n == null) { 
 				break; 
 				} 
 				x = n; 
 				} 
 				if (session == null) { 
 				return result; 
 				} 
 				while (result != null) { 
 				currentRow = result.getRow(store); 
 				
 
 LINES: 		| IntervalType.java: 332 - 342 || Types.java: 702 - 712 |
 CLONE CLASS: 	case Types.SQL_INTERVAL_HOUR_TO_MINUTE : 
 				case Types.SQL_INTERVAL_HOUR_TO_SECOND : 
 				case Types.SQL_INTERVAL_MINUTE : 
 				case Types.SQL_INTERVAL_MINUTE_TO_SECOND : 
 				case Types.SQL_INTERVAL_SECOND : 
 				return true; 
 				default : 
 				return false; 
 				} 
 				} 
 				
 
 LINES: 		| Transfer.java: 232 - 242 || Transfer.java: 312 - 322 |
 CLONE CLASS: 	} 
 				bStart.invalidate(); 
 				bStart.setEnabled(true); 
 				for (Enumeration e = 
 				result.elements(); e.hasMoreElements(); ) { 
 				lTable.add(e.nextElement().toString()); 
 				} 
 				lTable.repaint(); 
 				
 
 LINES: 		| NodeAVLDiskLarge.java: 396 - 418 || NodeAVLDisk.java: 425 - 447 |
 CLONE CLASS: 	row.keepInMemory(false); 
 				return node; 
 				} 
 				public NodeAVL set(PersistentStore store, boolean isLeft, NodeAVL n) { 
 				NodeAVL x; 
 				if (isLeft) { 
 				x = setLeft(store, n); 
 				} else { 
 				x = setRight(store, n); 
 				} 
 				if (n != null) { 
 				n.setParent(store, this); 
 				} 
 				return x; 
 				} 
 				public void replace(PersistentStore store, Index index, NodeAVL n) { 
 				
 
 LINES: 		| DatabaseInformationMain.java: 647 - 652 || DatabaseInformationMain.java: 2801 - 2810 |
 CLONE CLASS: 	addColumn(t, "BUFFER_LENGTH", Type.SQL_INTEGER); 
 				addColumn(t, "DECIMAL_DIGITS", Type.SQL_SMALLINT); 
 				addColumn(t, "PSEUDO_COLUMN", Type.SQL_SMALLINT); 
 				addColumn(t, "TABLE_CAT", SQL_IDENTIFIER); 
 				addColumn(t, "TABLE_SCHEM", SQL_IDENTIFIER); 
 				addColumn(t, "TABLE_NAME", SQL_IDENTIFIER); 
 				
 
 LINES: 		| BlobType.java: 97 - 112 || ClobType.java: 96 - 111 |
 CLONE CLASS: 	} 
 				StringBuffer sb = new StringBuffer(16); 
 				sb.append(getNameString()); 
 				sb.append('('); 
 				sb.append(factor); 
 				if (multiplier != null) { 
 				sb.append(multiplier); 
 				} 
 				sb.append(')'); 
 				return sb.toString(); 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 6809 - 6816 || DatabaseInformationFull.java: 6926 - 6933 || DatabaseInformationFull.java: 7035 - 7042 || DatabaseInformationFull.java: 7145 - 7152 || DatabaseInformationFull.java: 7310 - 7317 || DatabaseInformationFull.java: 7428 - 7435 |
 CLONE CLASS: 	Iterator it; 
 				Object[] row; 
 				it = database.schemaManager.databaseObjectIterator( 
 				SchemaObject.TRIGGER); 
 				while (it.hasNext()) { 
 				TriggerDef trigger = (TriggerDef) it.next(); 
 				
 
 LINES: 		| DoubleIntIndex.java: 537 - 544 || DoubleIntIndex.java: 563 - 570 |
 CLONE CLASS: 	int low     = 0; 
 				int high    = count; 
 				int mid     = 0; 
 				int compare = 0; 
 				while (low < high) { 
 				mid     = (low + high) / 2; 
 				compare = compare(mid); 
 				
 
 LINES: 		| TestCacheSize.java: 708 - 715 || TestCacheSize.java: 748 - 755 || TestCacheSize.java: 790 - 797 || TestCacheSize.java: 836 - 843 || TestCacheSize.java: 878 - 885 || TestCacheSize.java: 929 - 936 |
 CLONE CLASS: 	StopWatch        sw        = new StopWatch(); 
 				java.util.Random randomgen = new java.util.Random(); 
 				int              i         = 0; 
 				boolean          slow      = false; 
 				int              count     = 0; 
 				int              random    = 0; 
 				try { 
 				
 
 LINES: 		| FunctionSQL.java: 1013 - 1033 || FunctionSQL.java: 1110 - 1130 |
 CLONE CLASS: 	if (data[0] == null || data[1] == null || data[2] == null) { 
 				return null; 
 				} 
 				Object value; 
 				value = Type.SQL_BIGINT.convertToType(session, data[2], 
 				nodes[2].dataType); 
 				long offset = ((Number) value).longValue() - 1; 
 				long length = 0; 
 				if (nodes[3] != null) { 
 				if (data[3] == null) { 
 				return null; 
 				} 
 				value = Type.SQL_BIGINT.convertToType(session, data[3], 
 				nodes[3].dataType); 
 				length = ((Number) value).longValue(); 
 				} 
 				
 
 LINES: 		| NodeAVLDiskLarge.java: 540 - 550 || NodeAVLDisk.java: 555 - 565 |
 CLONE CLASS: 	return false; 
 				} 
 				public boolean isKeepInMemory() { 
 				return false; 
 				} 
 				public boolean keepInMemory(boolean keep) { 
 				return false; 
 				} 
 				} 
 				
 
 LINES: 		| RAFileNIO.java: 158 - 165 || RAFileNIO.java: 226 - 233 || RAFileNIO.java: 243 - 250 || RAFileNIO.java: 260 - 267 || RAFileNIO.java: 292 - 299 || RAFileNIO.java: 308 - 315 || RAFileNIO.java: 324 - 331 |
 CLONE CLASS: 	} catch (Throwable t) { 
 				database.logger.logWarningEvent(JVM_ERROR, t); 
 				IOException io = JavaSystem.toIOException(t); 
 				throw io; 
 				} 
 				} 
 				
 
 LINES: 		| RowInputBinary.java: 40 - 52 || RowInputText.java: 41 - 53 |
 CLONE CLASS: 	import org.hsqldb.map.ValuePool; 
 				import org.hsqldb.types.BinaryData; 
 				import org.hsqldb.types.BlobData; 
 				import org.hsqldb.types.BlobDataID; 
 				import org.hsqldb.types.ClobData; 
 				import org.hsqldb.types.ClobDataID; 
 				import org.hsqldb.types.IntervalMonthData; 
 				import org.hsqldb.types.IntervalSecondData; 
 				import org.hsqldb.types.IntervalType; 
 				import org.hsqldb.types.JavaObjectData; 
 				import org.hsqldb.types.TimeData; 
 				import org.hsqldb.types.TimestampData; 
 				import org.hsqldb.types.Type; 
 				
 
 LINES: 		| JDBCBlobFile.java: 807 - 817 || JDBCClobFile.java: 1000 - 1010 |
 CLONE CLASS: 	try { 
 				if (!m_file.exists()) { 
 				FileUtil.getFileUtil().makeParentDirectories(m_file); 
 				m_file.createNewFile(); 
 				} 
 				} catch (Exception ex) { 
 				throw JDBCUtil.sqlException(ex); 
 				} 
 				checkIsFile(true); 
 				} 
 				
 
 LINES: 		| LongKeyLongValueHashMap.java: 67 - 74 || IntKeyLongValueHashMap.java: 57 - 64 |
 CLONE CLASS: 	int lookup = getLookup(key); 
 				if (lookup != -1) { 
 				return longValueTable[lookup]; 
 				} 
 				throw new NoSuchElementException(); 
 				} 
 				
 
 LINES: 		| ArrayUtil.java: 1157 - 1164 || ArrayUtil.java: 1177 - 1184 |
 CLONE CLASS: 	if (oldsize < newsize) { 
 				newsize = oldsize; 
 				} 
 				System.arraycopy(source, 0, newarray, 0, newsize); 
 				return newarray; 
 				} 
 				
 
 LINES: 		| TestCacheSize.java: 348 - 355 || TestCacheSize.java: 446 - 453 |
 CLONE CLASS: 	long nextrandom   = randomgen.nextLong(); 
 				int  randomlength = (int) nextrandom & 0x7f; 
 				if (randomlength > filler.length()) { 
 				randomlength = filler.length(); 
 				} 
 				String varfiller = filler.substring(0, randomlength); 
 				
 
 LINES: 		| BaseHashMap.java: 1461 - 1479 || BaseHashMap.java: 1513 - 1531 |
 CLONE CLASS: 	return value; 
 				} 
 				public int nextInt() throws NoSuchElementException { 
 				throw new NoSuchElementException("Hash Iterator"); 
 				} 
 				public long nextLong() throws NoSuchElementException { 
 				throw new NoSuchElementException("Hash Iterator"); 
 				} 
 				public void remove() throws NoSuchElementException { 
 				throw new NoSuchElementException("Hash Iterator"); 
 				} 
 				public void setValue(Object value) { 
 				throw new NoSuchElementException("Hash Iterator"); 
 				} 
 				} 
 				
 
 LINES: 		| ParserDDL.java: 4839 - 4859 || ParserDDL.java: 4942 - 4961 |
 CLONE CLASS: 	} 
 				if (token.tokenType == Tokens.GRANTED) { 
 				read(); 
 				readThis(Tokens.BY); 
 				if (token.tokenType == Tokens.CURRENT_USER) { 
 				read(); 
 				} else { 
 				readThis(Tokens.CURRENT_ROLE); 
 				if (session.getRole() == null) { 
 				throw Error.error(ErrorCode.X_0P000); 
 				} 
 				grantor = session.getRole(); 
 				} 
 				} 
 				
 
 LINES: 		| ParserRoutine.java: 629 - 636 || ParserRoutine.java: 753 - 760 || ParserDML.java: 1161 - 1168 || ParserDQL.java: 5244 - 5251 |
 CLONE CLASS: 	if (token.tokenType == Tokens.COMMA) { 
 				read(); 
 				} else { 
 				readThis(Tokens.CLOSEBRACKET); 
 				break; 
 				} 
 				} 
 				
 
 LINES: 		| Transfer.java: 338 - 346 || Transfer.java: 822 - 830 |
 CLONE CLASS: 	} 
 				if (iTransferMode == TRFM_DUMP) { 
 				iSelectionStep = Transfer.SELECT_SOURCE_TABLES; 
 				} else { 
 				iSelectionStep++; 
 				} 
 				ProcessNextStep(); 
 				
 
 LINES: 		| NumberType.java: 910 - 916 || NumberType.java: 1072 - 1078 || NumberType.java: 1123 - 1129 |
 CLONE CLASS: 	double d = ((Number) a).doubleValue(); 
 				if (session instanceof Session) { 
 				if (!((Session) session).database.sqlConvertTruncate) { 
 				d = java.lang.Math.rint(d); 
 				} 
 				} 
 				
 
 LINES: 		| TestBench.java: 887 - 914 || JDBCBench.java: 965 - 992 |
 CLONE CLASS: 	pstmt1.setInt(1, delta); 
 				pstmt1.setInt(2, aid); 
 				pstmt1.executeUpdate(); 
 				pstmt1.clearWarnings(); 
 				pstmt2.setInt(1, aid); 
 				ResultSet RS = pstmt2.executeQuery(); 
 				pstmt2.clearWarnings(); 
 				while (RS.next()) { 
 				aBalance = RS.getInt(1); 
 				} 
 				pstmt3.setInt(1, delta); 
 				pstmt3.setInt(2, tid); 
 				pstmt3.executeUpdate(); 
 				pstmt3.clearWarnings(); 
 				pstmt4.setInt(1, delta); 
 				pstmt4.setInt(2, bid); 
 				pstmt4.executeUpdate(); 
 				pstmt4.clearWarnings(); 
 				pstmt5.setInt(1, tid); 
 				pstmt5.setInt(2, bid); 
 				pstmt5.setInt(3, aid); 
 				pstmt5.setInt(4, delta); 
 				pstmt5.executeUpdate(); 
 				pstmt5.clearWarnings(); 
 				
 
 LINES: 		| TestCollation.java: 62 - 70 || TestTypeConversion.java: 54 - 62 |
 CLONE CLASS: 	} 
 				protected void setUp() { 
 				super.setUp(); 
 				try { 
 				connection = super.newConnection(); 
 				statement  = connection.createStatement(); 
 				
 
 LINES: 		| RowStoreAVLHybrid.java: 298 - 307 || RowStoreAVLMemory.java: 177 - 186 |
 CLONE CLASS: 	case RowAction.ACTION_INSERT_DELETE : 
 				remove(row); 
 				break; 
 				} 
 				} 
 				public DataFileCache getCache() { 
 				
 
 LINES: 		| TableWorks.java: 335 - 343 || TableWorks.java: 390 - 397 |
 CLONE CLASS: 	HsqlName indexName = 
 				database.nameManager.newAutoName("IDX", 
 				c.getName().name, 
 				table.getSchemaName(), 
 				table.getName(), 
 				SchemaObject.INDEX); 
 				index = tn.createAndAddIndexStructure(session, indexName, 
 				
 
 LINES: 		| AllSimpleTests.java: 38 - 43 || ReusableObjectCache.java: 41 - 46 |
 CLONE CLASS: 	try { 
 				jbInit(); 
 				} catch (Exception ex) { 
 				ex.printStackTrace(); 
 				} 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 5116 - 5121 || DatabaseInformationFull.java: 5702 - 5707 |
 CLONE CLASS: 	row[specific_schema]  = routine.getSchemaName().name; 
 				row[specific_name]    = routine.getSpecificName().name; 
 				row[routine_catalog]  = database.getCatalogName().name; 
 				row[routine_schema]   = routine.getSchemaName().name; 
 				row[routine_name]     = routine.getName().name; 
 				row[table_catalog]    = database.getCatalogName().name; 
 				
 
 LINES: 		| DatabaseManagerSwing.java: 1896 - 1905 || DatabaseManager.java: 1109 - 1118 |
 CLONE CLASS: 	if (l > size[j]) { 
 				size[j] = l; 
 				} 
 				} 
 				} 
 				StringBuffer b = new StringBuffer(); 
 				for (int i = 0; i < width; i++) { 
 				b.append(col[i]); 
 				
 
 LINES: 		| Server.java: 903 - 909 || Server.java: 948 - 954 |
 CLONE CLASS: 	try { 
 				setProperties(p); 
 				} catch (Exception e) { 
 				throw Error.error(e, ErrorCode.GENERAL_ERROR, 
 				ErrorCode.M_Message_Pair, 
 				new String[]{ "Failed to set properties" }); 
 				} 
 				
 
 LINES: 		| KMPSearchAlgorithm.java: 248 - 256 || KMPSearchAlgorithm.java: 321 - 328 |
 CLONE CLASS: 	int[] table, final int start) { 
 				if (source == null || pattern == null || pattern.length == 0) { 
 				return -1; 
 				} 
 				final int sourceLength  = source.length; 
 				final int patternLength = pattern.length; 
 				
 
 LINES: 		| SetFunction.java: 352 - 365 || SetFunction.java: 408 - 421 |
 CLONE CLASS: 	if (!NumberType.isInLongLimits(bi)) { 
 				throw Error.error(ErrorCode.X_22015); 
 				} 
 				if (((IntervalType) type).isDaySecondIntervalType()) { 
 				return new IntervalSecondData(bi.longValue(), 
 				currentLong, 
 				(IntervalType) type, 
 				true); 
 				} else { 
 				return IntervalMonthData.newIntervalMonth( 
 				bi.longValue(), (IntervalType) type); 
 				} 
 				} 
 				
 
 LINES: 		| NumberSequence.java: 95 - 121 || NumberSequence.java: 335 - 361 || NumberSequence.java: 465 - 491 || NumberSequence.java: 506 - 532 |
 CLONE CLASS: 	long min; 
 				long max; 
 				switch (dataType.typeCode) { 
 				case Types.TINYINT : 
 				max = Byte.MAX_VALUE; 
 				min = Byte.MIN_VALUE; 
 				break; 
 				case Types.SQL_SMALLINT : 
 				max = Short.MAX_VALUE; 
 				min = Short.MIN_VALUE; 
 				break; 
 				case Types.SQL_INTEGER : 
 				max = Integer.MAX_VALUE; 
 				min = Integer.MIN_VALUE; 
 				break; 
 				case Types.SQL_BIGINT : 
 				max = Long.MAX_VALUE; 
 				min = Long.MIN_VALUE; 
 				break; 
 				case Types.SQL_NUMERIC : 
 				case Types.SQL_DECIMAL : 
 				
 
 LINES: 		| JDBCClobFile.java: 173 - 179 || JDBCClobFile.java: 281 - 287 || JDBCClobFile.java: 1034 - 1040 |
 CLONE CLASS: 	} finally { 
 				if (reader != null) { 
 				try { 
 				reader.close(); 
 				} catch (Exception ex) {} 
 				} 
 				} 
 				
 
 LINES: 		| RowInputTextQuoted.java: 140 - 151 || RowInputText.java: 181 - 192 |
 CLONE CLASS: 	} catch (Exception e) { 
 				Object[] messages = new Object[] { 
 				new Integer(field), e.toString() 
 				}; 
 				throw new IOException( 
 				Error.getMessage( 
 				ErrorCode.M_TEXT_SOURCE_FIELD_ERROR, 0, messages)); 
 				} 
 				return s; 
 				} 
 				
 
 LINES: 		| TransactionManagerCommon.java: 594 - 602 || TransactionManagerCommon.java: 624 - 632 |
 CLONE CLASS: 	if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) { 
 				continue; 
 				} 
 				Session holder = (Session) tableWriteLocks.get(name); 
 				if (holder != null && holder != session) { 
 				session.tempSet.add(holder); 
 				} 
 				
 
 LINES: 		| DatabaseManagerSwing.java: 1634 - 1655 || DatabaseManager.java: 854 - 875 |
 CLONE CLASS: 	int r = sStatement.getUpdateCount(); 
 				if (r == -1) { 
 				ResultSet rs = sStatement.getResultSet(); 
 				try { 
 				formatResultSet(rs); 
 				} catch (Throwable t) { 
 				g[0] = "Error displaying the ResultSet"; 
 				gResult.setHead(g); 
 				String s = t.getMessage(); 
 				g[0] = s; 
 				gResult.addRow(g); 
 				} 
 				} else { 
 				g[0] = "update count"; 
 				gResult.setHead(g); 
 				
 
 LINES: 		| StatementExpression.java: 115 - 130 || StatementSet.java: 268 - 283 || StatementSimple.java: 104 - 119 || StatementCompound.java: 199 - 214 |
 CLONE CLASS: 	} 
 				protected String describe(Session session, int blanks) { 
 				StringBuffer sb = new StringBuffer(); 
 				sb.append('\n'); 
 				for (int i = 0; i < blanks; i++) { 
 				sb.append(' '); 
 				} 
 				sb.append(Tokens.T_STATEMENT); 
 				return sb.toString(); 
 				} 
 				
 
 LINES: 		| TestMerge.java: 231 - 236 || TestMerge.java: 256 - 261 || TestMerge.java: 281 - 286 || TestMerge.java: 306 - 311 || TestMerge.java: 331 - 336 |
 CLONE CLASS: 	"ON T.I = X.I " + 
 				"WHEN MATCHED THEN " + 
 				"UPDATE SET T.A = X.A, T.B = 'UPDATED' " + 
 				"WHEN NOT MATCHED THEN " + 
 				"INSERT VALUES (X.I, X.A, 'INSERTED');" 
 				); 
 				
 
 LINES: 		| DatabaseInformationFull.java: 1466 - 1473 || DatabaseInformationFull.java: 1668 - 1675 || DatabaseInformationFull.java: 6725 - 6732 || DatabaseInformationMain.java: 3239 - 3246 |
 CLONE CLASS: 	SchemaObject.INDEX); 
 				t.createPrimaryKeyConstraint(name, new int[] { 
 				0, 1, 2 
 				}, false); 
 				return t; 
 				} 
 				
 
 LINES: 		| TestBench.java: 117 - 137 || JDBCBench.java: 117 - 137 |
 CLONE CLASS: 	} 
 				} else if (Args[i].equals("-password")) { 
 				if (i + 1 < Args.length) { 
 				i++; 
 				DBPassword = Args[i]; 
 				} 
 				} else if (Args[i].equals("-tpc")) { 
 				if (i + 1 < Args.length) { 
 				i++; 
 				n_txn_per_client = Integer.parseInt(Args[i]); 
 				} 
 				} else if (Args[i].equals("-init")) { 
 				initialize_dataset = true; 
 				} else if (Args[i].equals("-tps")) { 
 				if (i + 1 < Args.length) { 
 				i++; 
 				tps = Integer.parseInt(Args[i]); 
 				} 
 				
 
 LINES: 		| ParserDDL.java: 1546 - 1551 || ParserDDL.java: 1582 - 1587 |
 CLONE CLASS: 	} else if (token.tokenType == Tokens.RESTRICT) { 
 				read(); 
 				} else { 
 				readThis(Tokens.NO); 
 				readThis(Tokens.ACTION); 
 				} 
 				
 
 LINES: 		| Scanner.java: 1906 - 1918 || Scanner.java: 1938 - 1950 |
 CLONE CLASS: 	throw Error.error(errorCode); 
 				} 
 				scanNext(errorCode); 
 				if (token.dataType == null 
 				|| token.dataType.typeCode != Types.SQL_INTEGER) { 
 				throw Error.error(errorCode); 
 				} 
 				scale = ((Number) token.tokenValue).intValue(); 
 				scanNext(errorCode); 
 				
 
 LINES: 		| DatabaseInformationFull.java: 1222 - 1229 || DatabaseInformationFull.java: 1318 - 1325 || DatabaseInformationFull.java: 4525 - 4532 |
 CLONE CLASS: 	SchemaObject.INDEX); 
 				t.createPrimaryKeyConstraint(name, new int[] { 
 				0, 1, 2, 
 				}, false); 
 				return t; 
 				} 
 				
 
 LINES: 		| StringConverter.java: 133 - 140 || StringConverter.java: 185 - 192 |
 CLONE CLASS: 	for (int j = 0; j < l; j++) { 
 				char c = s.charAt(j); 
 				if (c == ' ') { 
 				continue; 
 				} 
 				n = getNibble(c); 
 				
 
 LINES: 		| LongKeyLongValueHashMap.java: 120 - 138 || IntKeyIntValueHashMap.java: 113 - 131 || OrderedLongKeyHashMap.java: 155 - 173 || OrderedIntKeyHashMap.java: 112 - 130 || MultiValueHashMap.java: 110 - 128 || IntKeyHashMapConcurrent.java: 151 - 169 || LongKeyHashMap.java: 185 - 203 || LongKeyIntValueHashMap.java: 124 - 142 || HashMap.java: 122 - 140 || IntValueHashMap.java: 157 - 175 || IntKeyHashMap.java: 97 - 115 |
 CLONE CLASS: 	if (keySet == null) { 
 				keySet = new KeySet(); 
 				} 
 				return keySet; 
 				} 
 				public Collection values() { 
 				if (values == null) { 
 				values = new Values(); 
 				} 
 				return values; 
 				} 
 				class KeySet implements Set { 
 				public Iterator iterator() { 
 				
 
 LINES: 		| TestBug778213.java: 163 - 173 || TestDatabaseMetaData.java: 268 - 277 |
 CLONE CLASS: 	} finally { 
 				conn.close(); 
 				} 
 				} 
 				public static void main(String[] args) throws Exception { 
 				TestResult            result; 
 				TestCase              test; 
 				java.util.Enumeration failures; 
 				
 
 LINES: 		| MultiValueHashMap.java: 158 - 165 || HashMap.java: 177 - 184 || IntValueHashMap.java: 212 - 219 || LongValueHashMap.java: 198 - 205 |
 CLONE CLASS: 	return size() != oldSize; 
 				} 
 				public boolean isEmpty() { 
 				return size() == 0; 
 				} 
 				public void clear() { 
 				
 
 LINES: 		| TestSql.java: 32 - 38 || TestDatabaseMetaData.java: 32 - 38 |
 CLONE CLASS: 	package org.hsqldb.test; 
 				import java.sql.Connection; 
 				import java.sql.DatabaseMetaData; 
 				import java.sql.PreparedStatement; 
 				import java.sql.ResultSet; 
 				import java.sql.ResultSetMetaData; 
 				
 
 LINES: 		| CharacterType.java: 341 - 354 || ClobType.java: 119 - 133 |
 CLONE CLASS: 	} 
 				public int compare(Session session, Object a, Object b) { 
 				return compare(session, a, b, OpTypes.EQUAL); 
 				} 
 				public int compare(Session session, Object a, Object b, int opType) { 
 				if (a == b) { 
 				return 0; 
 				} 
 				if (a == null) { 
 				return -1; 
 				
 
 LINES: 		| SqlFile.java: 964 - 973 || SqlFile.java: 1015 - 1024 |
 CLONE CLASS: 	} catch (SQLException nse) { 
 				} finally { 
 				statement = null; 
 				} 
 				throw se; 
 				} 
 				displaySqlResults( 
 				statement, rs, null, null, true); 
 				} 
 				
 
 LINES: 		| TransactionManager2PL.java: 198 - 207 || TransactionManagerMV2PL.java: 250 - 259 |
 CLONE CLASS: 	session.rowActionList.setSize(start); 
 				} 
 				public RowAction addDeleteAction(Session session, Table table, 
 				PersistentStore store, Row row, 
 				int[] colMap) { 
 				RowAction action; 
 				synchronized (row) { 
 				
 
 LINES: 		| IntervalType.java: 505 - 512 || RowType.java: 170 - 177 || ArrayType.java: 201 - 208 |
 CLONE CLASS: 	} 
 				public Object convertToType(SessionInterface session, Object a, 
 				Type otherType) { 
 				if (a == null) { 
 				return null; 
 				} 
 				
 
 LINES: 		| LongKeyLongValueHashMap.java: 156 - 170 || LongKeyLongValueHashMap.java: 191 - 205 || IntKeyIntValueHashMap.java: 149 - 163 || IntKeyIntValueHashMap.java: 184 - 198 || OrderedLongKeyHashMap.java: 191 - 205 || OrderedLongKeyHashMap.java: 226 - 240 || OrderedIntKeyHashMap.java: 148 - 162 || OrderedIntKeyHashMap.java: 183 - 197 || MultiValueHashMap.java: 186 - 200 || IntKeyHashMapConcurrent.java: 187 - 201 || IntKeyHashMapConcurrent.java: 222 - 236 || LongKeyHashMap.java: 221 - 235 || LongKeyHashMap.java: 256 - 270 || LongKeyIntValueHashMap.java: 160 - 174 || LongKeyIntValueHashMap.java: 195 - 209 || HashMap.java: 205 - 219 || IntValueHashMap.java: 240 - 254 || IntKeyHashMap.java: 133 - 147 || IntKeyHashMap.java: 168 - 182 |
 CLONE CLASS: 	} 
 				public boolean addAll(Collection c) { 
 				throw new RuntimeException(); 
 				} 
 				public boolean remove(Object o) { 
 				throw new RuntimeException(); 
 				} 
 				public boolean isEmpty() { 
 				return size() == 0; 
 				} 
 				public void clear() { 
 				
 
 LINES: 		| RowOutputBinary.java: 392 - 401 || IntervalType.java: 152 - 161 || IntervalType.java: 178 - 187 || IntervalType.java: 327 - 336 || IntervalType.java: 463 - 472 || IntervalType.java: 662 - 671 || IntervalType.java: 838 - 847 || IntervalType.java: 889 - 898 || Types.java: 697 - 706 || RowInputBase.java: 227 - 236 || Type.java: 1092 - 1101 || RowOutputBase.java: 257 - 266 |
 CLONE CLASS: 	case Types.SQL_INTERVAL_DAY : 
 				case Types.SQL_INTERVAL_DAY_TO_HOUR : 
 				case Types.SQL_INTERVAL_DAY_TO_MINUTE : 
 				case Types.SQL_INTERVAL_DAY_TO_SECOND : 
 				case Types.SQL_INTERVAL_HOUR : 
 				case Types.SQL_INTERVAL_HOUR_TO_MINUTE : 
 				case Types.SQL_INTERVAL_HOUR_TO_SECOND : 
 				case Types.SQL_INTERVAL_MINUTE : 
 				case Types.SQL_INTERVAL_MINUTE_TO_SECOND : 
 				case Types.SQL_INTERVAL_SECOND : 
 				
 
 LINES: 		| ExpressionValue.java: 78 - 87 || ExpressionTable.java: 73 - 82 |
 CLONE CLASS: 	} 
 				} 
 				protected String describe(Session session, int blanks) { 
 				StringBuffer sb = new StringBuffer(64); 
 				sb.append('\n'); 
 				for (int i = 0; i < blanks; i++) { 
 				
 
 LINES: 		| DataFileCache.java: 999 - 1005 || DataFileCache.java: 1026 - 1032 || DataFileCache.java: 1050 - 1056 || DataFileCache.java: 1121 - 1127 |
 CLONE CLASS: 	try { 
 				object = cache.get(pos); 
 				if (object != null) { 
 				if (keep) { 
 				object.keepInMemory(true); 
 				} 
 				
 
 LINES: 		| BitMap.java: 178 - 184 || BitMap.java: 204 - 210 |
 CLONE CLASS: 	} 
 				int windex = pos >> 5; 
 				int mask   = 0x80000000 >>> (pos & 0x1F); 
 				int word   = map[windex]; 
 				int result = (word & mask) == 0 ? 0 
 				: 1; 
 				
 
 LINES: 		| BitType.java: 35 - 40 || CharacterType.java: 38 - 43 || IntervalType.java: 38 - 43 || BinaryType.java: 35 - 40 |
 CLONE CLASS: 	import org.hsqldb.Session; 
 				import org.hsqldb.SessionInterface; 
 				import org.hsqldb.Tokens; 
 				import org.hsqldb.error.Error; 
 				import org.hsqldb.error.ErrorCode; 
 				import org.hsqldb.lib.ArrayUtil; 
 				
 
 LINES: 		| SimpleLog.java: 144 - 152 || SimpleLog.java: 191 - 199 |
 CLONE CLASS: 	} 
 				sb.append(HsqlDateTime.getSystemTimeString()).append(' '); 
 				if (!isSQL) { 
 				sb.append(logTypeNames[atLevel]).append(' '); 
 				} 
 				sb.append(message); 
 				
 
 LINES: 		| DatabaseInformationFull.java: 4459 - 4465 || DatabaseInformationMain.java: 1410 - 1416 || DatabaseInformationMain.java: 1770 - 1776 |
 CLONE CLASS: 	t.insertSys(session, store, row); 
 				} 
 				} 
 				} 
 				return t; 
 				} 
 				
 
 LINES: 		| TimeData.java: 49 - 55 || DateTimeType.java: 928 - 934 |
 CLONE CLASS: 	while (seconds < 0) { 
 				seconds += 24 * 60 * 60; 
 				} 
 				if (seconds > 24 * 60 * 60) { 
 				seconds %= 24 * 60 * 60; 
 				} 
 				
 
 LINES: 		| CountdownInputStream.java: 81 - 87 || CountdownInputStream.java: 107 - 113 |
 CLONE CLASS: 	if (buf == null) { 
 				throw new NullPointerException(); 
 				} 
 				if (m_count <= 0) { 
 				return -1; 
 				} 
 				
 
 LINES: 		| ExpressionLogical.java: 249 - 259 || ExpressionLogical.java: 265 - 275 |
 CLONE CLASS: 	case OpTypes.VALUE : 
 				case OpTypes.DYNAMIC_PARAM : 
 				case OpTypes.PARAMETER : 
 				case OpTypes.VARIABLE : 
 				isSingleColumnCondition = true; 
 				if (opType == OpTypes.EQUAL) { 
 				isSingleColumnEqual = true; 
 				} 
 				break; 
 				} 
 				
 
 LINES: 		| BaseHashMap.java: 1179 - 1196 || BaseHashMap.java: 1208 - 1225 |
 CLONE CLASS: 	if (isObjectKey) { 
 				if (objectKeyTable[lookup] != null) { 
 				return lookup; 
 				} 
 				} else if (isIntKey) { 
 				if (intKeyTable[lookup] != 0) { 
 				return lookup; 
 				} else if (hasZeroKey && lookup == zeroKeyIndex) { 
 				return lookup; 
 				} 
 				} else { 
 				if (longKeyTable[lookup] != 0) { 
 				return lookup; 
 				} else if (hasZeroKey && lookup == zeroKeyIndex) { 
 				return lookup; 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| FunctionSQL.java: 1222 - 1229 || FunctionSQL.java: 1632 - 1639 |
 CLONE CLASS: 	} 
 				} 
 				if (nodes[1].dataType == null) { 
 				if (nodes[0].dataType.typeCode == Types.SQL_CLOB 
 				|| nodes[0].dataType.isBinaryType()) { 
 				nodes[1].dataType = nodes[0].dataType; 
 				} else { 
 				
 
 LINES: 		| DatabaseInformationFull.java: 5465 - 5474 || DatabaseInformationFull.java: 8220 - 8229 |
 CLONE CLASS: 	for (int i = 0; i < set.size(); i++) { 
 				HsqlName refName = (HsqlName) set.get(i); 
 				if (refName.type != SchemaObject.SPECIFIC_ROUTINE) { 
 				continue; 
 				} 
 				if (!session.getGrantee().isFullyAccessibleByRole(refName)) { 
 				continue; 
 				} 
 				
 
 LINES: 		| TestLobs.java: 517 - 528 || TestLobs.java: 590 - 601 |
 CLONE CLASS: 	+ "varid = ? AND scalabilitypassivated = 'N' AND scopeguid = ?"; 
 				PreparedStatement ps = connection.prepareStatement(dml0); 
 				connection.setAutoCommit(false); 
 				JDBCClob dataClob = 
 				new JDBCClob("the quick brown fox jumps on the lazy dog"); 
 				Reader    reader = null; 
 				StopWatch sw     = new StopWatch(); 
 				sw.start(); 
 				
 
 LINES: 		| TarReader.java: 339 - 346 || TarReader.java: 447 - 454 |
 CLONE CLASS: 	while (readBlocks > 0) { 
 				readNow = (readBlocks > archive.getReadBufferBlocks()) 
 				? archive.getReadBufferBlocks() 
 				: readBlocks; 
 				archive.readBlocks(readNow); 
 				readBlocks -= readNow; 
 				
 
 LINES: 		| NumberType.java: 414 - 421 || Types.java: 721 - 728 |
 CLONE CLASS: 	case Types.SQL_DECIMAL : 
 				case Types.SQL_NUMERIC : 
 				return true; 
 				default : 
 				return false; 
 				} 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 5080 - 5087 || DatabaseInformationFull.java: 5668 - 5675 |
 CLONE CLASS: 	final int specific_schema  = 1; 
 				final int specific_name    = 2; 
 				final int routine_catalog  = 3; 
 				final int routine_schema   = 4; 
 				final int routine_name     = 5; 
 				final int table_catalog    = 6; 
 				final int table_schema     = 7; 
 				final int table_name       = 8; 
 				
 
 LINES: 		| TransactionManagerMVCC.java: 106 - 122 || TransactionManagerMVCC.java: 149 - 165 |
 CLONE CLASS: 	return false; 
 				} 
 				writeLock.lock(); 
 				try { 
 				int limit = session.rowActionList.size(); 
 				for (int i = 0; i < limit; i++) { 
 				RowAction action = (RowAction) session.rowActionList.get(i); 
 				if (!action.canCommit(session, session.tempSet)) { 
 				return false; 
 				} 
 				} 
 				
 
 LINES: 		| ParserDQL.java: 1017 - 1023 || ParserDQL.java: 1109 - 1115 |
 CLONE CLASS: 	if (queryExpression.sortAndSlice == null) { 
 				queryExpression.addSortAndSlice(sortAndSlice); 
 				} else { 
 				if (queryExpression.sortAndSlice.hasLimit()) { 
 				if (sortAndSlice.hasLimit()) { 
 				throw Error.error(ErrorCode.X_42549); 
 				} 
 				
 
 LINES: 		| TestBench.java: 755 - 781 || JDBCBench.java: 841 - 867 |
 CLONE CLASS: 	} finally { 
 				if (st1 != null) { 
 				st1.close(); 
 				} 
 				} 
 				} 
 				class ClientThread extends Thread { 
 				int               ntrans = 0; 
 				Connection        Conn; 
 				PreparedStatement pstmt1 = null; 
 				PreparedStatement pstmt2 = null; 
 				PreparedStatement pstmt3 = null; 
 				PreparedStatement pstmt4 = null; 
 				PreparedStatement pstmt5 = null; 
 				public ClientThread(int number_of_txns, String url, String user, 
 				String password, int transactionMode) { 
 				System.out.println(number_of_txns); 
 				ntrans = number_of_txns; 
 				Conn   = connect(url, user, password); 
 				if (Conn == null) { 
 				return; 
 				
 
 LINES: 		| ParserDDL.java: 3872 - 3878 || ParserDDL.java: 4477 - 4483 |
 CLONE CLASS: 	args, null, writeLockNames); 
 				} else { 
 				throw unexpectedToken(); 
 				} 
 				} 
 				case Tokens.SET : { 
 				read(); 
 				
 
 LINES: 		| NumberType.java: 600 - 608 || IntervalType.java: 430 - 436 |
 CLONE CLASS: 	} 
 				break; 
 				case OpTypes.SUBTRACT : 
 				default : 
 				return getAggregateType(other); 
 				} 
 				
 
 LINES: 		| ValuePoolHashMap.java: 114 - 121 || ValuePoolHashMap.java: 134 - 141 || ValuePoolHashMap.java: 156 - 163 || ValuePoolHashMap.java: 176 - 183 || ValuePoolHashMap.java: 215 - 222 || ValuePoolHashMap.java: 235 - 242 || ValuePoolHashMap.java: 260 - 267 || ValuePoolHashMap.java: 280 - 287 || ValuePoolHashMap.java: 303 - 310 || ValuePoolHashMap.java: 323 - 330 || ValuePoolHashMap.java: 345 - 352 || ValuePoolHashMap.java: 365 - 372 || ValuePoolHashMap.java: 387 - 394 |
 CLONE CLASS: 	if (accessCount > ACCESS_MAX) { 
 				resetAccessCount(); 
 				} 
 				accessTable[lookup] = accessCount++; 
 				return testValue; 
 				} 
 				
 
 LINES: 		| TestLobs.java: 670 - 679 || TestLobs.java: 745 - 754 |
 CLONE CLASS: 	"CREATE TABLE CLOBTEST(ID IDENTITY, CLOBFIELD CLOB(100000))"; 
 				statement.execute(ddl0); 
 				statement.execute(ddl1); 
 				} catch (SQLException e) {} 
 				try { 
 				String dml0 = "insert into clobtest(clobfield) values ?"; 
 				String            value = "0123456789"; 
 				PreparedStatement ps    = connection.prepareStatement(dml0); 
 				
 
 LINES: 		| ParserBase.java: 773 - 785 || ParserBase.java: 800 - 812 |
 CLONE CLASS: 	} 
 				String tokenS; 
 				if (token.charsetSchema != null) { 
 				tokenS = token.charsetSchema; 
 				} else if (token.charsetName != null) { 
 				tokenS = token.charsetName; 
 				} else if (token.namePrePrefix != null) { 
 				tokenS = token.namePrePrefix; 
 				} else if (token.namePrefix != null) { 
 				tokenS = token.namePrefix; 
 				} else { 
 				
 
 LINES: 		| TestBench.java: 154 - 164 || JDBCBench.java: 146 - 156 |
 CLONE CLASS: 	System.out.println(); 
 				System.out.println("-v          verbose error messages"); 
 				System.out.println("-init       initialize the tables"); 
 				System.out.println("-tpc        transactions per client"); 
 				System.out.println("-clients    number of simultaneous clients"); 
 				System.exit(-1); 
 				} 
 				System.out.println( 
 				"*********************************************************"); 
 				System.out.println( 
 				
 
 LINES: 		| ExpressionOp.java: 344 - 351 || Expression.java: 1019 - 1026 |
 CLONE CLASS: 	RangeGroup rangeGroup, int rangeCount, RangeGroup[] rangeGroups, 
 				HsqlList unresolvedSet, boolean acceptsSequences) { 
 				if (opType == OpTypes.VALUE) { 
 				return unresolvedSet; 
 				} 
 				switch (opType) { 
 				
 
 LINES: 		| OrderedIntKeyHashMap.java: 92 - 103 || IntKeyHashMap.java: 77 - 88 |
 CLONE CLASS: 	} 
 				public boolean containsKey(int key) { 
 				return super.containsKey(key); 
 				} 
 				public void valuesToArray(Object[] array) { 
 				Iterator it = values().iterator(); 
 				int      i  = 0; 
 				while (it.hasNext()) { 
 				
 
 LINES: 		| DatabaseInformationFull.java: 552 - 559 || DatabaseInformationFull.java: 646 - 653 || DatabaseInformationFull.java: 2213 - 2220 || DatabaseInformationFull.java: 3127 - 3134 || DatabaseInformationFull.java: 7520 - 7527 |
 CLONE CLASS: 	SchemaObject.INDEX); 
 				t.createPrimaryKeyConstraint(name, new int[] { 
 				0, 1, 2, 3, 4 
 				}, false); 
 				return t; 
 				} 
 				
 
 LINES: 		| OrderedIntHashSet.java: 80 - 88 || OrderedLongHashSet.java: 80 - 88 |
 CLONE CLASS: 	super.clear(); 
 				for (int i = 0; i < array.length; i++) { 
 				add(array[i]); 
 				} 
 				} 
 				return result; 
 				} 
 				
 
 LINES: 		| Scanner.java: 1003 - 1009 || Scanner.java: 1019 - 1025 |
 CLONE CLASS: 	token.tokenString = sqlString.substring(tokenStart, 
 				currentPosition + 1); 
 				token.tokenType   = Tokens.X_MALFORMED_NUMERIC; 
 				token.isMalformed = true; 
 				return; 
 				} 
 				
 
 LINES: 		| TestSubselect.java: 74 - 85 || TestGroupByHaving.java: 73 - 84 |
 CLONE CLASS: 	super(s); 
 				} 
 				protected static Connection getJDBCConnection() throws SQLException { 
 				return DriverManager.getConnection(databaseURL, databaseUser, 
 				databasePassword); 
 				} 
 				protected void setUp() throws Exception { 
 				
 
 LINES: 		| DatabaseInformationFull.java: 5469 - 5476 || DatabaseInformationFull.java: 5576 - 5583 || DatabaseInformationFull.java: 5693 - 5700 || DatabaseInformationFull.java: 8224 - 8231 |
 CLONE CLASS: 	continue; 
 				} 
 				if (!session.getGrantee().isFullyAccessibleByRole(refName)) { 
 				continue; 
 				} 
 				row                   = t.getEmptyRowData(); 
 				
 
 LINES: 		| RowSetNavigatorClient.java: 153 - 175 || RowSetNavigator.java: 237 - 264 |
 CLONE CLASS: 	} 
 				public boolean absolute(int position) { 
 				if (position < 0) { 
 				position += size; 
 				} 
 				if (position < 0) { 
 				beforeFirst(); 
 				return false; 
 				} 
 				if (position >= size) { 
 				afterLast(); 
 				return false; 
 				} 
 				if (size == 0) { 
 				return false; 
 				} 
 				
 
 LINES: 		| StatementExpression.java: 147 - 155 || StatementSimple.java: 132 - 140 |
 CLONE CLASS: 	result.getException().setStatementType(group, type); 
 				} 
 				return result; 
 				} 
 				Result getResult(Session session) { 
 				switch (type) { 
 				
 
 LINES: 		| StringUtil.java: 222 - 230 || StringUtil.java: 256 - 264 || StringUtil.java: 274 - 282 |
 CLONE CLASS: 	for (int i = 0; i < len; i++) { 
 				sb.append(quote); 
 				sb.append(s[i]); 
 				sb.append(quote); 
 				if (i + 1 < len) { 
 				sb.append(separator); 
 				} 
 				} 
 				
 
 LINES: 		| DataFileCache.java: 1046 - 1055 || DataFileCache.java: 1117 - 1126 |
 CLONE CLASS: 	CachedObject object = null; 
 				writeLock.lock(); 
 				try { 
 				object = cache.get(pos); 
 				if (object != null) { 
 				if (keep) { 
 				object.keepInMemory(true); 
 				
 
 LINES: 		| DatabaseInformationMain.java: 2116 - 2139 || DatabaseInformationMain.java: 2147 - 2170 |
 CLONE CLASS: 	row[icat]       = cat; 
 				row[ischem]     = schem; 
 				row[iname]      = pName; 
 				row[icol_name]  = cName; 
 				row[icol_type]  = cType; 
 				row[idata_type] = dType; 
 				row[itype_name] = tName; 
 				row[iprec]      = prec; 
 				row[ilength]    = len; 
 				row[iscale]     = scale; 
 				row[iradix]     = radix; 
 				row[inullable]  = nullability; 
 				row[iremark]    = remark; 
 				row[icol_default]      = colDefault; 
 				row[isql_data_type]    = sqlDataType; 
 				row[isql_datetime_sub] = sqlDateTimeSub; 
 				row[ichar_octet_len]   = charOctetLength; 
 				row[iordinal_position] = ordinalPosition; 
 				row[iis_nullable]      = isNullable; 
 				row[ispecific_name]    = specificName; 
 				t.insertSys(session, store, row); 
 				
 
 LINES: 		| JDBCArrayBasic.java: 168 - 256 || JDBCArray.java: 179 - 267 |
 CLONE CLASS: 	} 
 				public Object getArray(java.util.Map<String, 
 				Class<?>> map) throws SQLException { 
 				return getArray(); 
 				} 
 				public Object getArray(long index, int count) throws SQLException { 
 				checkClosed(); 
 				if (!JDBCClobClient.isInLimits(data.length, index - 1, count)) { 
 				throw JDBCUtil.outOfRangeArgument(); 
 				} 
 				Object[] slice = new Object[count]; 
 				for (int i = 0; i < count; i++) { 
 				
 
 LINES: 		| TestMerge.java: 35 - 43 || TestMultiInsert.java: 35 - 43 |
 CLONE CLASS: 	import java.sql.PreparedStatement; 
 				import java.sql.ResultSet; 
 				import java.sql.ResultSetMetaData; 
 				import java.sql.SQLException; 
 				import java.sql.Statement; 
 				import java.util.Enumeration; 
 				import junit.framework.TestCase; 
 				import junit.framework.TestResult; 
 				
 
 LINES: 		| BinaryType.java: 380 - 389 || BlobType.java: 266 - 275 || ClobType.java: 196 - 205 |
 CLONE CLASS: 	} 
 				throw Error.error(ErrorCode.X_42561); 
 				} 
 				public Object convertSQLToJava(SessionInterface session, Object a) { 
 				if (a == null) { 
 				return null; 
 				} 
 				
 
 LINES: 		| ParserDML.java: 1149 - 1162 || ParserDQL.java: 5232 - 5245 |
 CLONE CLASS: 	HsqlArrayList list = new HsqlArrayList(); 
 				readThis(Tokens.OPENBRACKET); 
 				if (token.tokenType == Tokens.CLOSEBRACKET) { 
 				read(); 
 				} else { 
 				while (true) { 
 				Expression e = XreadValueExpression(); 
 				list.add(e); 
 				if (token.tokenType == Tokens.COMMA) { 
 				read(); 
 				
 
 LINES: 		| DatabaseInformationFull.java: 6946 - 6952 || DatabaseInformationFull.java: 7055 - 7061 |
 CLONE CLASS: 	continue; 
 				} 
 				row                   = t.getEmptyRowData(); 
 				row[trigger_catalog]  = database.getCatalogName().name; 
 				row[trigger_schema]   = trigger.getSchemaName().name; 
 				row[trigger_name]     = trigger.getName().name; 
 				
 
 LINES: 		| DatabaseInformationFull.java: 3062 - 3070 || DatabaseInformationFull.java: 4660 - 4667 || DatabaseInformationFull.java: 4741 - 4748 || DatabaseInformationFull.java: 4837 - 4844 || DatabaseInformationFull.java: 4990 - 4997 |
 CLONE CLASS: 	}, false); 
 				return t; 
 				} 
 				Session sys = database.sessionManager.newSysSession( 
 				SqlInvariants.INFORMATION_SCHEMA_HSQLNAME, session.getUser()); 
 				Result rs = sys.executeDirectStatement( 
 				
 
 LINES: 		| Table.java: 2437 - 2443 || Table.java: 2452 - 2458 |
 CLONE CLASS: 	cols.length)) { 
 				return indexList[i]; 
 				} 
 				} 
 				return null; 
 				} 
 				
 
 LINES: 		| OrderedIntKeyHashMap.java: 132 - 140 || OrderedIntKeyHashMap.java: 171 - 179 |
 CLONE CLASS: 	} 
 				public int size() { 
 				return OrderedIntKeyHashMap.this.size(); 
 				} 
 				public boolean contains(Object o) { 
 				throw new RuntimeException(); 
 				} 
 				
 
 LINES: 		| CharacterType.java: 32 - 41 || IntervalType.java: 32 - 41 |
 CLONE CLASS: 	package org.hsqldb.types; 
 				import java.math.BigDecimal; 
 				import org.hsqldb.HsqlDateTime; 
 				import org.hsqldb.OpTypes; 
 				import org.hsqldb.Session; 
 				import org.hsqldb.SessionInterface; 
 				import org.hsqldb.Tokens; 
 				import org.hsqldb.error.Error; 
 				
 
 LINES: 		| RangeVariable.java: 1328 - 1336 || RangeVariable.java: 1341 - 1349 |
 CLONE CLASS: 	value = null; 
 				break; 
 				default : 
 				it = conditions[condIndex].rangeIndex 
 				.emptyIterator(); 
 				return; 
 				} 
 				
 
 LINES: 		| TransactionManager2PL.java: 133 - 139 || TransactionManagerMV2PL.java: 183 - 189 |
 CLONE CLASS: 	endTransactionTPL(session); 
 				} finally { 
 				writeLock.unlock(); 
 				} 
 				} 
 				public void rollbackSavepoint(Session session, int index) { 
 				
 
 LINES: 		| TestStoredProcedure.java: 558 - 564 || TestBug778213.java: 185 - 191 || TestJDBCSavepoints.java: 560 - 566 || TestBug808460.java: 86 - 92 || TestBug1191815.java: 122 - 128 || TestBug785429.java: 179 - 185 || TestINPredicateParameterizationAndCorrelation.java: 216 - 222 || TestDatabaseMetaData.java: 289 - 295 || TestLikePredicateOptimizations.java: 307 - 313 |
 CLONE CLASS: 	failures = result.failures(); 
 				while (failures.hasMoreElements()) { 
 				System.out.println(failures.nextElement()); 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| DatabaseManagerSwing.java: 561 - 568 || DatabaseManager.java: 333 - 340 |
 CLONE CLASS: 	defUser, defPassword); 
 				} else if (urlidConnect) { 
 				if (urlid == null) { 
 				throw new IllegalArgumentException( 
 				"You must specify an 'urlid' to use an RC file"); 
 				} 
 				autoConnect = true; 
 				
 
 LINES: 		| RowStoreAVLDisk.java: 235 - 242 || RowStoreAVLMemory.java: 142 - 149 |
 CLONE CLASS: 	break; 
 				case RowAction.ACTION_INSERT : 
 				database.logger.writeInsertStatement(session, row, 
 				(Table) table); 
 				break; 
 				case RowAction.ACTION_INSERT_DELETE : 
 				
 
 LINES: 		| Charset.java: 58 - 63 || Charset.java: 67 - 72 |
 CLONE CLASS: 	{ 
 				'0', '9' 
 				}, { 
 				'A', 'Z' 
 				}, { 
 				'_', '_' 
 				
 
 LINES: 		| ParserRoutine.java: 1925 - 1932 || ParserRoutine.java: 2054 - 2061 || ParserRoutine.java: 2090 - 2097 |
 CLONE CLASS: 	list.add(statement); 
 				readThis(Tokens.THEN); 
 				statements = compileSQLProcedureStatementList(routine, context); 
 				for (int i = 0; i < statements.length; i++) { 
 				list.add(statements[i]); 
 				} 
 				
 
 LINES: 		| StatementSchema.java: 260 - 268 || StatementCommand.java: 209 - 217 || StatementSession.java: 231 - 239 |
 CLONE CLASS: 	} 
 				} 
 				public Result execute(Session session) { 
 				Result result; 
 				try { 
 				result = getResult(session); 
 				
 
 LINES: 		| ParserDQL.java: 5302 - 5310 || ParserDQL.java: 5367 - 5375 || ParserDQL.java: 5443 - 5451 || ParserDQL.java: 5472 - 5480 || ParserDQL.java: 5541 - 5549 || ParserDQL.java: 5572 - 5580 |
 CLONE CLASS: 	int position = getPosition(); 
 				read(); 
 				if (!readIfThis(Tokens.OPENBRACKET)) { 
 				rewind(position); 
 				return null; 
 				} 
 				
 
 LINES: 		| SchemaManager.java: 325 - 331 || SchemaManager.java: 375 - 381 || SchemaManager.java: 401 - 407 |
 CLONE CLASS: 	} 
 				return schema.getName(); 
 				} finally { 
 				readLock.unlock(); 
 				} 
 				} 
 				
 
 LINES: 		| ExpressionLogical.java: 1391 - 1398 || ExpressionLogical.java: 1501 - 1508 |
 CLONE CLASS: 	return result < 0 ? Boolean.TRUE 
 				: Boolean.FALSE; 
 				default : 
 				throw Error.runtimeError(ErrorCode.U_S0500, 
 				"ExpressionLogical"); 
 				} 
 				} 
 				
 
 LINES: 		| Defines.java: 103 - 108 || ExpressionColumn.java: 574 - 579 |
 CLONE CLASS: 	break; 
 				} 
 				default : { 
 				break; 
 				} 
 				} 
 				
 
 LINES: 		| FunctionSQL.java: 1325 - 1335 || FunctionSQL.java: 1338 - 1348 |
 CLONE CLASS: 	throw Error.error(ErrorCode.X_42567); 
 				} 
 				if (!nodes[0].dataType.isArrayType()) { 
 				throw Error.error(ErrorCode.X_42563); 
 				} 
 				dataType = Type.SQL_INTEGER; 
 				break; 
 				} 
 				
 
 LINES: 		| TestBug778213.java: 80 - 86 || TestBug778213.java: 92 - 98 |
 CLONE CLASS: 	} catch (Exception e) { 
 				assertTrue("unable to prepare or execute DDL", false); 
 				} finally { 
 				conn.close(); 
 				} 
 				conn = newConnection(); 
 				
 
 LINES: 		| JDBCBlobFile.java: 206 - 177 || JDBCClobFile.java: 276 - 285 |
 CLONE CLASS: 	: start + matchOffset; 
 				} catch (SQLException ex) { 
 				throw ex; 
 				} catch (Exception ex) { 
 				throw JDBCUtil.sqlException(ex); 
 				} finally { 
 				} catch (SQLException ex) { 
 				throw ex; 
 				} catch (Exception ex) { 
 				throw JDBCUtil.sqlException(ex); 
 				} finally { 
 				if (reader != null) { 
 				try { 
 				reader.close(); 
 				} catch (Exception ex) {} 
 				
 
 LINES: 		| TestBench.java: 93 - 104 || JDBCBench.java: 62 - 73 |
 CLONE CLASS: 	for (int i = 0; i < Args.length; i++) { 
 				if (Args[i].equals("-clients")) { 
 				if (i + 1 < Args.length) { 
 				i++; 
 				n_clients = Integer.parseInt(Args[i]); 
 				} 
 				} else if (Args[i].equals("-driver")) { 
 				if (i + 1 < Args.length) { 
 				i++; 
 				DriverName = Args[i]; 
 				
 
 LINES: 		| IndexAVL.java: 767 - 788 || IndexAVL.java: 812 - 833 |
 CLONE CLASS: 	int i = colTypes[j].compare(session, a[colIndex[j]], 
 				b[colIndex[j]]); 
 				if (i != 0) { 
 				if (isSimpleOrder) { 
 				return i; 
 				} 
 				boolean nulls = a[colIndex[j]] == null 
 				|| b[colIndex[j]] == null; 
 				if (colDesc[j] && !nulls) { 
 				i = -i; 
 				} 
 				if (nullsLast[j] && nulls) { 
 				i = -i; 
 				} 
 				return i; 
 				} 
 				} 
 				
 
 LINES: 		| LockFile.java: 2012 - 2024 || LockFile.java: 2069 - 2081 || LockFile.java: 2188 - 2200 || LockFile.java: 2233 - 2245 || LockFile.java: 2279 - 2291 |
 CLONE CLASS: 	return this.reason; 
 				} 
 				public String getMessage() { 
 				return super.getMessage() + " reason: " + reason; 
 				} 
 				} 
 				
 
 LINES: 		| DoubleIntIndex.java: 200 - 211 || DoubleIntIndex.java: 240 - 251 |
 CLONE CLASS: 	} 
 				} 
 				} 
 				hasChanged    = true; 
 				keys[count]   = key; 
 				values[count] = value; 
 				count++; 
 				return true; 
 				} 
 				
 
 LINES: 		| ParserRoutine.java: 142 - 152 || ParserDQL.java: 2213 - 2223 |
 CLONE CLASS: 	switch (token.tokenType) { 
 				case Tokens.TRUE : 
 				read(); 
 				return Expression.EXPR_TRUE; 
 				case Tokens.FALSE : 
 				read(); 
 				return Expression.EXPR_FALSE; 
 				
 
 LINES: 		| IndexAVLMemory.java: 258 - 269 || IndexAVL.java: 964 - 975 |
 CLONE CLASS: 	} 
 				} 
 				void delete(PersistentStore store, NodeAVL x) { 
 				if (x == null) { 
 				return; 
 				} 
 				NodeAVL n; 
 				writeLock.lock(); 
 				
 
 LINES: 		| Storage.java: 46 - 68 || RandomAccessInterface.java: 43 - 65 |
 CLONE CLASS: 	long length() throws IOException; 
 				void seek(long position) throws IOException; 
 				long getFilePointer() throws IOException; 
 				int read() throws IOException; 
 				void read(byte[] b, int offset, int length) throws IOException; 
 				void write(byte[] b, int offset, int length) throws IOException; 
 				int readInt() throws IOException; 
 				void writeInt(int i) throws IOException; 
 				long readLong() throws IOException; 
 				void writeLong(long i) throws IOException; 
 				void close() throws IOException; 
 				boolean isReadOnly(); 
 				
 
 LINES: 		| DatabaseInformationFull.java: 3629 - 3636 || DatabaseInformationFull.java: 3682 - 3689 || DatabaseInformationFull.java: 3714 - 3721 || DatabaseInformationFull.java: 3745 - 3752 |
 CLONE CLASS: 	row[collection_type_identifier] = type.getDefinition(); 
 				addTypeInfo(row, ((ArrayType) type).collectionBaseType()); 
 				try { 
 				t.insertSys(session, store, row); 
 				} catch (HsqlException e) {} 
 				} 
 				
 
 LINES: 		| SessionData.java: 270 - 277 || SessionData.java: 287 - 294 |
 CLONE CLASS: 	if (resultMap == null) { 
 				return; 
 				} 
 				Iterator it = resultMap.values().iterator(); 
 				while (it.hasNext()) { 
 				Result result = (Result) it.next(); 
 				
 
 LINES: 		| ResultLob.java: 608 - 616 || ResultLob.java: 666 - 674 |
 CLONE CLASS: 	if (byteArrayOS.size() == 0) { 
 				break; 
 				} 
 				dataOut.writeByte(mode); 
 				dataOut.writeInt(databaseID); 
 				dataOut.writeLong(sessionID); 
 				dataOut.writeLong(lobID); 
 				
 
 LINES: 		| LongKeyLongValueHashMap.java: 89 - 97 || IntKeyLongValueHashMap.java: 79 - 87 |
 CLONE CLASS: 	int lookup = getLookup(key); 
 				if (lookup != -1) { 
 				value[0] = longValueTable[lookup]; 
 				return true; 
 				} 
 				return false; 
 				
 
 LINES: 		| ParserRoutine.java: 1942 - 1951 || ParserRoutine.java: 1989 - 1998 |
 CLONE CLASS: 	list.add(statement); 
 				statements = compileSQLProcedureStatementList(routine, context); 
 				for (int i = 0; i < statements.length; i++) { 
 				list.add(statements[i]); 
 				} 
 				} 
 				readThis(Tokens.END); 
 				
 
 LINES: 		| FunctionCustom.java: 1201 - 1210 || FunctionCustom.java: 1544 - 1553 |
 CLONE CLASS: 	int offset = 0; 
 				if (data[0] == null) { 
 				return null; 
 				} 
 				if (nodes.length > 1) { 
 				if (data[1] == null) { 
 				return null; 
 				} 
 				
 
 LINES: 		| TestBug1191815.java: 103 - 113 || TestBug785429.java: 160 - 170 |
 CLONE CLASS: 	} 
 				public static void main(String[] args) throws Exception { 
 				TestResult            result; 
 				TestCase              test; 
 				java.util.Enumeration exceptions; 
 				java.util.Enumeration failures; 
 				int                   count; 
 				result = new TestResult(); 
 				
 
 LINES: 		| ParserDDL.java: 2570 - 2579 || ParserDDL.java: 2676 - 2685 || ParserDDL.java: 4131 - 4140 |
 CLONE CLASS: 	if (token.tokenType == Tokens.BY) { 
 				read(); 
 				readThis(Tokens.DEFAULT); 
 				} else { 
 				readThis(Tokens.ALWAYS); 
 				generatedAlways = true; 
 				} 
 				readThis(Tokens.AS); 
 				
 
 LINES: 		| TestSql.java: 918 - 927 || TestMerge.java: 399 - 408 || TestMultiInsert.java: 144 - 152 |
 CLONE CLASS: 	e.printStackTrace(); 
 				System.out.println("TestSql.tearDown() error: " + e.getMessage()); 
 				} 
 				super.tearDown(); 
 				} 
 				public static void main(String[] argv) { 
 				TestResult result = new TestResult(); 
 				
 
 LINES: 		| TransferTable.java: 149 - 161 || TransferTable.java: 364 - 376 |
 CLONE CLASS: 	String Statement = new String(""); 
 				if (destDb.helper.needTransferTransaction()) { 
 				try { 
 				destDb.setAutoCommit(false); 
 				} catch (Exception e) {} 
 				} 
 				if (Stmts.bTransfer == false) { 
 				tracer.trace("Table " + Stmts.sSourceTable + " not transfered"); 
 				return; 
 				} 
 				
 
 LINES: 		| NumberSequence.java: 597 - 604 || NumberSequence.java: 626 - 633 |
 CLONE CLASS: 	if (value == currValue) { 
 				currValue += increment; 
 				return value; 
 				} 
 				if (increment > 0) { 
 				if (value > currValue) { 
 				
 
 LINES: 		| TransferSQLText.java: 76 - 82 || TransferSQLText.java: 103 - 109 |
 CLONE CLASS: 	WTextWrite = new BufferedWriter(new FileWriter(sFileName)); 
 				} catch (IOException e) { 
 				throw new DataAccessPointException(e.getMessage()); 
 				} 
 				} 
 				try { 
 				
 
 LINES: 		| ArrayUtil.java: 768 - 776 || ArrayUtil.java: 782 - 790 |
 CLONE CLASS: 	boolean[] arrb) { 
 				for (int i = 0; i < arra.length; i++) { 
 				if (arrb[arra[i]]) { 
 				continue; 
 				} 
 				return false; 
 				} 
 				
 
 LINES: 		| JDBCBlob.java: 182 - 188 || JDBCBlob.java: 711 - 717 |
 CLONE CLASS: 	throw JDBCUtil.outOfRangeArgument("pos: " + pos); 
 				} 
 				pos--; 
 				if (length < 0 || length > dlen - pos) { 
 				throw JDBCUtil.outOfRangeArgument("length: " + length); 
 				} 
 				
 
 LINES: 		| NodeAVLDiskLarge.java: 515 - 531 || NodeAVLDisk.java: 526 - 542 |
 CLONE CLASS: 	} 
 				} 
 				return newPointer; 
 				} 
 				public void restore() {} 
 				public void destroy() {} 
 				public void updateAccessCount(int count) {} 
 				public int getAccessCount() { 
 				return 0; 
 				} 
 				public void setStorageSize(int size) {} 
 				
 
 LINES: 		| ParserDQL.java: 2484 - 2490 || ParserDQL.java: 3654 - 3660 |
 CLONE CLASS: 	readThis(Tokens.CLOSEBRACKET); 
 				} catch (HsqlException ex) { 
 				ex.setLevel(compileContext.subqueryDepth); 
 				if (lastError == null 
 				|| lastError.getLevel() < ex.getLevel()) { 
 				lastError = ex; 
 				
 
 LINES: 		| ParserDDL.java: 3661 - 3668 || ParserDDL.java: 3771 - 3778 || ParserDDL.java: 3798 - 3805 || ParserDDL.java: 4009 - 4016 || ParserDDL.java: 4036 - 4043 || ParserDDL.java: 4051 - 4058 || ParserDDL.java: 4112 - 4119 |
 CLONE CLASS: 	}; 
 				HsqlName[] writeLockNames = 
 				database.schemaManager.getCatalogAndBaseTableNames( 
 				table.getName()); 
 				return new StatementSchema(sql, StatementTypes.ALTER_TABLE, args, 
 				null, writeLockNames); 
 				} 
 				
 
 LINES: 		| TestBench.java: 862 - 876 || TestBench.java: 990 - 1004 |
 CLONE CLASS: 	} 
 				} catch (Exception E) { 
 				System.out.println(E.getMessage()); 
 				E.printStackTrace(); 
 				} 
 				connectClose(Conn); 
 				Conn = null; 
 				} 
 				int doOne(int bid, int tid, int aid, int delta) { 
 				
 
 LINES: 		| HSQLDialect.java: 211 - 327 || HSQLDialect.java: 191 - 307 |
 CLONE CLASS: 	getDefaultProperties().setProperty( Environment.STATEMENT_BATCH_SIZE, DEFAULT_BATCH_SIZE ); 
 				} 
 				public String getAddColumnString() { 
 				return "add column"; 
 				} 
 				public boolean supportsIdentityColumns() { 
 				return true; 
 				} 
 				public String getIdentityColumnString() { 
 				return "generated by default as identity (start with 1)"; 
 				} 
 				public String getIdentitySelectString() { 
 				return "call identity()"; 
 				} 
 				public String getIdentityInsertString() { 
 				return hsqldbVersion < 20 ? "null" : "default"; 
 				} 
 				public boolean supportsLockTimeouts() { 
 				return false; 
 				} 
 				public String getForUpdateString() { 
 				return ""; 
 				} 
 				public boolean supportsUnique() { 
 				return false; 
 				} 
 				public boolean supportsLimit() { 
 				return true; 
 				} 
 				public String getLimitString(String sql, boolean hasOffset) { 
 				if ( hsqldbVersion < 20 ) { 
 				return new StringBuffer( sql.length() + 10 ) 
 				.append( sql ) 
 				.insert( 
 				sql.toLowerCase().indexOf( "select" ) + 6, 
 				hasOffset ? " limit ? ?" : " top ?" 
 				) 
 				.toString(); 
 				} 
 				else { 
 				return new StringBuffer( sql.length() + 20 ) 
 				.append( sql ) 
 				.append( hasOffset ? " offset ? limit ?" : " limit ?" ) 
 				.toString(); 
 				} 
 				} 
 				public boolean bindLimitParametersFirst() { 
 				return hsqldbVersion < 20; 
 				} 
 				public boolean supportsIfExistsAfterTableName() { 
 				return true; 
 				} 
 				public boolean supportsColumnCheck() { 
 				return hsqldbVersion >= 20; 
 				} 
 				public boolean supportsSequences() { 
 				return true; 
 				} 
 				public boolean supportsPooledSequences() { 
 				return true; 
 				} 
 				protected String getCreateSequenceString(String sequenceName) { 
 				return "create sequence " + sequenceName; 
 				} 
 				protected String getDropSequenceString(String sequenceName) { 
 				return "drop sequence " + sequenceName; 
 				} 
 				public String getSelectSequenceNextValString(String sequenceName) { 
 				return "next value for " + sequenceName; 
 				} 
 				public String getSequenceNextValString(String sequenceName) { 
 				return "call next value for " + sequenceName; 
 				} 
 				public String getQuerySequencesString() { 
 				return "select sequence_name from information_schema.system_sequences"; 
 				} 
 				public ViolatedConstraintNameExtracter getViolatedConstraintNameExtracter() { 
 				return hsqldbVersion < 20 ? EXTRACTER_18 : EXTRACTER_20; 
 				} 
 				private static ViolatedConstraintNameExtracter EXTRACTER_18 = new TemplatedViolatedConstraintNameExtracter() { 
 				public String extractConstraintName(SQLException sqle) { 
 				String constraintName = null; 
 				int errorCode = JDBCExceptionHelper.extractErrorCode( sqle ); 
 				if ( errorCode == -8 ) { 
 				constraintName = extractUsingTemplate( 
 				
 
 LINES: 		| ResultLob.java: 575 - 591 || ResultLob.java: 631 - 647 |
 CLONE CLASS: 	DataOutputStream dataOut) 
 				throws IOException { 
 				int  bufferLength  = session.getStreamBlockSize(); 
 				long currentOffset = blockOffset; 
 				dataOut.writeByte(mode); 
 				dataOut.writeInt(databaseID); 
 				dataOut.writeLong(sessionID); 
 				dataOut.writeLong(lobID); 
 				dataOut.writeInt(subType); 
 				HsqlByteArrayOutputStream byteArrayOS = 
 				new HsqlByteArrayOutputStream(bufferLength); 
 				byteArrayOS.reset(); 
 				
 
 LINES: 		| RowStoreAVLDiskData.java: 225 - 230 || RowStoreAVLDiskData.java: 257 - 262 |
 CLONE CLASS: 	delete(session, row); 
 				remove(row); 
 				} 
 				break; 
 				} 
 				} 
 				
 
 LINES: 		| Table.java: 368 - 379 || Table.java: 643 - 654 |
 CLONE CLASS: 	for (int j = 0; j < columnCount; j++) { 
 				ColumnSchema column  = getColumn(j); 
 				String       colname = column.getName().statementName; 
 				Type         type    = column.getDataType(); 
 				if (j > 0) { 
 				sb.append(','); 
 				} 
 				sb.append(colname); 
 				sb.append(' '); 
 				sb.append(type.getTypeDefinition()); 
 				
 
 LINES: 		| Expression.java: 321 - 327 || Expression.java: 335 - 341 || Expression.java: 351 - 357 || FunctionCustom.java: 3679 - 3685 |
 CLONE CLASS: 	for (int i = 0; i < nodes.length; i++) { 
 				if (i > 0) { 
 				sb.append(','); 
 				} 
 				sb.append(nodes[i].getSQL()); 
 				} 
 				
 
 LINES: 		| RowType.java: 242 - 249 || ArrayType.java: 329 - 336 |
 CLONE CLASS: 	return sb.toString(); 
 				} 
 				public boolean canConvertFrom(Type otherType) { 
 				if (otherType == null) { 
 				return true; 
 				} 
 				
 
 LINES: 		| ColumnSchema.java: 123 - 131 || Routine.java: 173 - 181 |
 CLONE CLASS: 	} 
 				public OrderedHashSet getReferences() { 
 				return references; 
 				} 
 				public OrderedHashSet getComponents() { 
 				return null; 
 				} 
 				
 
 LINES: 		| Type.java: 558 - 566 || RowType.java: 409 - 417 || ArrayType.java: 473 - 481 |
 CLONE CLASS: 	} 
 				public boolean equals(Object other) { 
 				if (other == this) { 
 				return true; 
 				} 
 				if (other instanceof Type) { 
 				
 
 LINES: 		| TestTextTable.java: 210 - 217 || TestViewAsterisks.java: 92 - 98 |
 CLONE CLASS: 	} catch (SQLException ex) { 
 				fail(ex.toString()); 
 				} 
 				} 
 				public void setUp() { 
 				super.setUp(); 
 				
 
 LINES: 		| DatabaseInformationFull.java: 2331 - 2338 || DatabaseInformationFull.java: 2449 - 2456 || DatabaseInformationFull.java: 2869 - 2876 || DatabaseInformationFull.java: 6790 - 6797 || DatabaseInformationFull.java: 7409 - 7416 || DatabaseInformationFull.java: 8051 - 8058 |
 CLONE CLASS: 	SchemaObject.INDEX); 
 				t.createPrimaryKeyConstraint(name, new int[] { 
 				0, 1, 2, 3, 4, 5, 6 
 				}, false); 
 				return t; 
 				} 
 				
 
 LINES: 		| TestBench.java: 45 - 50 || TestStoredProcedure.java: 35 - 40 || JDBCBench.java: 15 - 20 || TestSqlPersistent.java: 38 - 43 || TestAllTypes.java: 35 - 40 || TestCacheSize.java: 35 - 40 || TestQuotes.java: 34 - 39 || TestDatetimeSimple.java: 34 - 39 || FindFile.java: 74 - 79 |
 CLONE CLASS: 	import java.sql.Connection; 
 				import java.sql.DriverManager; 
 				import java.sql.PreparedStatement; 
 				import java.sql.ResultSet; 
 				import java.sql.SQLException; 
 				import java.sql.Statement; 
 				
 
 LINES: 		| BinaryType.java: 514 - 522 || OtherType.java: 156 - 164 |
 CLONE CLASS: 	} 
 				public String convertToSQLString(Object a) { 
 				if (a == null) { 
 				return Tokens.T_NULL; 
 				} 
 				return StringConverter.byteArrayToSQLHexString( 
 				
 
 LINES: 		| Collation.java: 493 - 501 || Schema.java: 110 - 118 || TriggerDef.java: 226 - 234 || NumberSequence.java: 169 - 177 || Grantee.java: 156 - 164 || IndexAVL.java: 245 - 253 |
 CLONE CLASS: 	} 
 				public OrderedHashSet getReferences() { 
 				return new OrderedHashSet(); 
 				} 
 				public OrderedHashSet getComponents() { 
 				return null; 
 				} 
 				
 
 LINES: 		| LongKeyLongValueHashMap.java: 152 - 162 || LongKeyLongValueHashMap.java: 187 - 197 || IntKeyIntValueHashMap.java: 145 - 155 || IntKeyIntValueHashMap.java: 180 - 190 || OrderedLongKeyHashMap.java: 187 - 197 || OrderedLongKeyHashMap.java: 222 - 232 || OrderedIntKeyHashMap.java: 144 - 154 || OrderedIntKeyHashMap.java: 179 - 189 || MultiValueHashMap.java: 142 - 152 || MultiValueHashMap.java: 182 - 192 || IntKeyHashMapConcurrent.java: 183 - 193 || IntKeyHashMapConcurrent.java: 218 - 228 || LongKeyHashMap.java: 217 - 227 || LongKeyHashMap.java: 252 - 262 || LongKeyIntValueHashMap.java: 156 - 166 || LongKeyIntValueHashMap.java: 191 - 201 || HashMap.java: 161 - 171 || HashMap.java: 201 - 211 || IntValueHashMap.java: 196 - 206 || IntValueHashMap.java: 236 - 246 || LongValueHashMap.java: 182 - 192 || IntKeyHashMap.java: 129 - 139 || IntKeyHashMap.java: 164 - 174 |
 CLONE CLASS: 	} 
 				public boolean add(Object value) { 
 				throw new RuntimeException(); 
 				} 
 				public boolean addAll(Collection c) { 
 				throw new RuntimeException(); 
 				} 
 				public boolean remove(Object o) { 
 				
 
 LINES: 		| RowStoreAVLHybrid.java: 278 - 296 || RowStoreAVLHybridExtended.java: 155 - 173 |
 CLONE CLASS: 	} 
 				public void rollbackRow(Session session, Row row, int changeAction, 
 				int txModel) { 
 				switch (changeAction) { 
 				case RowAction.ACTION_DELETE : 
 				row = (Row) get(row, true); 
 				((RowAVL) row).setNewNodes(this); 
 				row.keepInMemory(false); 
 				indexRow(session, row); 
 				break; 
 				case RowAction.ACTION_INSERT : 
 				delete(session, row); 
 				remove(row); 
 				break; 
 				
 
 LINES: 		| SqlFile.java: 6269 - 6274 || SqlFile.java: 6308 - 6313 |
 CLONE CLASS: 	char[] readBfr = new char[1024]; 
 				int i; 
 				StringWriter sWriter = new StringWriter(); 
 				InputStreamReader isr = null; 
 				String str; 
 				try { 
 				
 
 LINES: 		| NodeAVLDiskLarge.java: 289 - 296 || NodeAVLDiskLarge.java: 321 - 328 || NodeAVLDiskLarge.java: 344 - 351 || NodeAVLDiskLarge.java: 374 - 381 |
 CLONE CLASS: 	RowAVLDisk  row  = this.row; 
 				if (!row.keepInMemory(true)) { 
 				row  = (RowAVLDisk) store.get(this.row, true); 
 				node = (NodeAVLDiskLarge) row.getNode(iId); 
 				} 
 				if (!row.isInMemory()) { 
 				
 
 LINES: 		| ExpressionAccessor.java: 172 - 181 || ExpressionLogical.java: 515 - 524 || ExpressionArrayAggregate.java: 126 - 135 || ExpressionOp.java: 275 - 284 || Expression.java: 375 - 384 || ExpressionAggregate.java: 135 - 144 || ExpressionArithmetic.java: 151 - 160 |
 CLONE CLASS: 	return sb.toString(); 
 				} 
 				protected String describe(Session session, int blanks) { 
 				StringBuffer sb = new StringBuffer(64); 
 				sb.append('\n'); 
 				for (int i = 0; i < blanks; i++) { 
 				
 
 LINES: 		| BooleanType.java: 236 - 243 || IntervalType.java: 623 - 630 |
 CLONE CLASS: 	} 
 				} 
 				public Object convertToDefaultType(SessionInterface session, Object a) { 
 				if (a == null) { 
 				return null; 
 				} 
 				
 
 LINES: 		| DatabaseManager.java: 346 - 353 || DatabaseManager.java: 369 - 376 || DatabaseManager.java: 400 - 407 |
 CLONE CLASS: 	if (type == DatabaseURL.S_FILE) { 
 				databaseMap = fileDatabaseMap; 
 				key         = filePathToKey(path); 
 				} else if (type == DatabaseURL.S_RES) { 
 				databaseMap = resDatabaseMap; 
 				} else if (type == DatabaseURL.S_MEM) { 
 				databaseMap = memDatabaseMap; 
 				} else { 
 				
 
 LINES: 		| DatabaseInformationMain.java: 2989 - 2996 || DatabaseInformationMain.java: 3413 - 3420 |
 CLONE CLASS: 	rights = grants; 
 				} 
 				for (int j = 0; j < rights.size(); j++) { 
 				Right right          = (Right) rights.get(j); 
 				Right grantableRight = right.getGrantableRights(); 
 				for (int k = 0; k < Right.privilegeTypes.length; k++) { 
 				
 
 LINES: 		| TestOdbcTypes.java: 144 - 149 || TestOdbcTypes.java: 173 - 178 || TestOdbcTypes.java: 203 - 208 || TestOdbcTypes.java: 233 - 238 || TestOdbcTypes.java: 297 - 302 || TestOdbcTypes.java: 326 - 331 || TestOdbcTypes.java: 355 - 360 || TestOdbcTypes.java: 384 - 389 || TestOdbcTypes.java: 413 - 418 || TestOdbcTypes.java: 502 - 507 || TestOdbcTypes.java: 533 - 538 || TestOdbcTypes.java: 624 - 629 || TestOdbcTypes.java: 655 - 660 || TestOdbcTypes.java: 683 - 688 || TestOdbcTypes.java: 787 - 792 || TestOdbcTypes.java: 820 - 825 |
 CLONE CLASS: 	ResultSet rs = null; 
 				Statement st = null; 
 				try { 
 				st = netConn.createStatement(); 
 				rs = st.executeQuery("SELECT * FROM alltypes WHERE id in (1, 2)"); 
 				assertTrue("Got no rows with id in (1, 2)", rs.next()); 
 				
 
 LINES: 		| DateTimeType.java: 659 - 667 || DateTimeType.java: 693 - 701 |
 CLONE CLASS: 	TimeData ti = (TimeData) a; 
 				long seconds = session.getCurrentDate().getSeconds() 
 				+ ti.getSeconds() 
 				- session.getZoneSeconds(); 
 				return new TimestampData(seconds, 
 				scaleNanos(ti.getNanos()), 
 				session.getZoneSeconds()); 
 				} 
 				
 
 LINES: 		| NumberType.java: 1437 - 1444 || NumberType.java: 1485 - 1492 |
 CLONE CLASS: 	} 
 				case Types.SQL_NUMERIC : 
 				case Types.SQL_DECIMAL : { 
 				a = convertToDefaultType(null, a); 
 				b = convertToDefaultType(null, b); 
 				BigDecimal abd = (BigDecimal) a; 
 				BigDecimal bbd = (BigDecimal) b; 
 				
 
 LINES: 		| JDBCPreparedStatement.java: 4129 - 4134 || JDBCPreparedStatement.java: 4159 - 4164 || JDBCPreparedStatement.java: 4179 - 4184 |
 CLONE CLASS: 	break; 
 				} 
 				} catch (HsqlException e) { 
 				JDBCUtil.throwError(e); 
 				} 
 				JDBCUtil.throwError(Error.error(ErrorCode.X_42563)); 
 				
 
 LINES: 		| DatabaseManagerSwing.java: 2137 - 2158 || DatabaseManagerSwing.java: 2175 - 2196 |
 CLONE CLASS: 	if (column != null) { 
 				DefaultMutableTreeNode childNode = 
 				(DefaultMutableTreeNode) treePath 
 				.getLastPathComponent(); 
 				String  childName = null; 
 				boolean isChar; 
 				if (childNode.getChildCount() > 0) { 
 				childName = childNode.getFirstChild().toString(); 
 				isChar    = childName.indexOf("CHAR") >= 0; 
 				result    += " WHERE " + quoteObjectName(column); 
 				if (isChar) { 
 				result += " LIKE \'%%\'"; 
 				} else { 
 				result += " = "; 
 				} 
 				} 
 				} 
 				return result; 
 				} 
 				
 
 LINES: 		| RowStoreAVLDisk.java: 255 - 261 || RowStoreAVLHybrid.java: 275 - 281 || RowStoreAVLHybridExtended.java: 152 - 158 |
 CLONE CLASS: 	remove(row); 
 				break; 
 				} 
 				} 
 				public void rollbackRow(Session session, Row row, int changeAction, 
 				int txModel) { 
 				
 
 LINES: 		| RangeVariableResolver.java: 1035 - 1043 || RangeVariableResolver.java: 1051 - 1059 |
 CLONE CLASS: 	continue; 
 				} 
 				int colIndex = e.getLeftNode().getColumnIndex(); 
 				colIndexSetEqual.add(colIndex); 
 				break; 
 				} 
 				
 
 LINES: 		| Constraint.java: 32 - 38 || Table.java: 32 - 38 |
 CLONE CLASS: 	package org.hsqldb; 
 				import org.hsqldb.HsqlNameManager.HsqlName; 
 				import org.hsqldb.RangeVariable.RangeIteratorBase; 
 				import org.hsqldb.error.Error; 
 				import org.hsqldb.error.ErrorCode; 
 				import org.hsqldb.index.Index; 
 				
 
 LINES: 		| NumberType.java: 1911 - 1916 || NumberType.java: 1942 - 1949 |
 CLONE CLASS: 	return value; 
 				} 
 				default : 
 				return a; 
 				} 
 				} 
 				
 
 LINES: 		| SimpleLog.java: 139 - 150 || SimpleLog.java: 162 - 173 || SimpleLog.java: 186 - 197 |
 CLONE CLASS: 	return; 
 				} 
 				if (writer == null) { 
 				return; 
 				} 
 				sb.append(HsqlDateTime.getSystemTimeString()).append(' '); 
 				if (!isSQL) { 
 				sb.append(logTypeNames[atLevel]).append(' '); 
 				} 
 				
 
 LINES: 		| JDBCResultSet.java: 4495 - 4501 || JDBCResultSet.java: 7646 - 7652 |
 CLONE CLASS: 	return (Clob) o; 
 				} else if (o instanceof String) { 
 				return new JDBCClob((String) o); 
 				} 
 				throw JDBCUtil.sqlException(ErrorCode.X_42561); 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 3450 - 3459 || DatabaseInformationFull.java: 3792 - 3801 || DatabaseInformationFull.java: 7942 - 7951 |
 CLONE CLASS: 	row[character_set_name] = 
 				((CharacterType) type).getCharacterSet().getName().name; 
 				row[collation_catalog] = database.getCatalogName().name; 
 				row[collation_schema] = 
 				((CharacterType) type).getCollation().getSchemaName().name; 
 				row[collation_name] = 
 				((CharacterType) type).getCollation().getName().name; 
 				} else if (type.isNumberType()) { 
 				row[numeric_precision] = ValuePool.getLong( 
 				((NumberType) type).getNumericPrecisionInRadix()); 
 				
 
 LINES: 		| Collation.java: 489 - 499 || TriggerDef.java: 222 - 232 || NumberSequence.java: 165 - 175 || IndexAVL.java: 241 - 251 |
 CLONE CLASS: 	} 
 				public Grantee getOwner() { 
 				return name.schema.owner; 
 				} 
 				public OrderedHashSet getReferences() { 
 				return new OrderedHashSet(); 
 				} 
 				public OrderedHashSet getComponents() { 
 				
 
 LINES: 		| ScriptWriterEncode.java: 68 - 74 || ScriptWriterEncode.java: 85 - 91 || ScriptWriterEncode.java: 112 - 118 || ScriptWriterBase.java: 279 - 285 || ScriptWriterText.java: 134 - 140 |
 CLONE CLASS: 	} catch (IOException e) { 
 				throw Error.error(e, ErrorCode.FILE_IO_ERROR, 
 				ErrorCode.M_Message_Pair, new Object[] { 
 				e.toString(), outFile 
 				}); 
 				} 
 				} 
 				
 
 LINES: 		| ParserRoutine.java: 1567 - 1573 || ParserRoutine.java: 1576 - 1582 |
 CLONE CLASS: 	throw Error.error( 
 				ErrorCode.X_42602, 
 				routine.getDataImpactString()); 
 				} 
 				break; 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 1996 - 2004 || DatabaseInformationFull.java: 2029 - 2037 |
 CLONE CLASS: 	row[constraint_name]    = constraint.getName().name; 
 				try { 
 				row[check_clause] = constraint.getCheckSQL(); 
 				} catch (Exception e) {} 
 				t.insertSys(session, store, row); 
 				} 
 				} 
 				
 
 LINES: 		| RAFileInJar.java: 32 - 39 || LobStoreInJar.java: 32 - 39 |
 CLONE CLASS: 	package org.hsqldb.persist; 
 				import java.io.DataInputStream; 
 				import java.io.FileNotFoundException; 
 				import java.io.IOException; 
 				import java.io.InputStream; 
 				import org.hsqldb.Database; 
 				
 
 LINES: 		| TestJDBCGeneratedColumns.java: 47 - 61 || TestJDBCGeneratedColumns.java: 161 - 175 |
 CLONE CLASS: 	boolean successPrepared = false; 
 				boolean successDirect   = false; 
 				try { 
 				Connection c  = newConnection(); 
 				Statement  st = c.createStatement(); 
 				String     s  = "DROP TABLE T IF EXISTS"; 
 				st.execute(s); 
 				s = "CREATE TABLE T (I INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 33), C CHARACTER(10))"; 
 				st.execute(s); 
 				s = "INSERT INTO T (C) VALUES('TEST')"; 
 				
 
 LINES: 		| DatabaseInformationFull.java: 1349 - 1359 || DatabaseInformationMain.java: 3508 - 3518 |
 CLONE CLASS: 	} 
 				row                = t.getEmptyRowData(); 
 				row[table_catalog] = database.getCatalogName().name; 
 				row[table_schema]  = table.getSchemaName().name; 
 				row[table_name]    = table.getName().name; 
 				switch (table.getTableType()) { 
 				case TableBase.INFO_SCHEMA_TABLE : 
 				case TableBase.VIEW_TABLE : 
 				
 
 LINES: 		| JDBCSQLXML.java: 1506 - 1514 || JDBCSQLXML.java: 1589 - 1597 |
 CLONE CLASS: 	} catch (SecurityException ex) { 
 				throw Exceptions.sourceInstantiation(ex); 
 				} catch (InstantiationException ex) { 
 				throw Exceptions.sourceInstantiation(ex); 
 				} catch (IllegalAccessException ex) { 
 				throw Exceptions.sourceInstantiation(ex); 
 				} catch (ClassCastException ex) { 
 				throw Exceptions.sourceInstantiation(ex); 
 				} 
 				
 
 LINES: 		| RowStoreAVLDisk.java: 321 - 337 || RowStoreAVLHybrid.java: 336 - 352 |
 CLONE CLASS: 	} 
 				public CachedObject getAccessor(Index key) { 
 				NodeAVL node = (NodeAVL) accessorList[key.getPosition()]; 
 				if (node == null) { 
 				return null; 
 				} 
 				RowAVL row = (RowAVL) get(node.getRow(this), false); 
 				node                            = row.getNode(key.getPosition()); 
 				accessorList[key.getPosition()] = node; 
 				return node; 
 				} 
 				
 
 LINES: 		| NodeAVLDiskLarge.java: 279 - 286 || NodeAVLDisk.java: 323 - 330 |
 CLONE CLASS: 	} 
 				public NodeAVL child(PersistentStore store, boolean isleft) { 
 				return isleft ? getLeft(store) 
 				: getRight(store); 
 				} 
 				NodeAVL setParent(PersistentStore store, NodeAVL n) { 
 				
 
 LINES: 		| ParserDDL.java: 4861 - 4870 || ParserDDL.java: 4964 - 4973 |
 CLONE CLASS: 	if (token.tokenType == Tokens.CASCADE) { 
 				cascade = true; 
 				read(); 
 				} else { 
 				readThis(Tokens.RESTRICT); 
 				} 
 				} 
 				String   sql  = getLastPart(); 
 				
 
 LINES: 		| TransactionManagerMVCC.java: 184 - 208 || TransactionManagerMV2PL.java: 132 - 156 |
 CLONE CLASS: 	} 
 				adjustLobUsage(session); 
 				persistCommit(session); 
 				int newLimit = session.rowActionList.size(); 
 				if (newLimit > limit) { 
 				Object[] list = session.rowActionList.getArray(); 
 				mergeTransaction(list, limit, newLimit, 
 				session.actionTimestamp); 
 				finaliseRows(session, list, limit, newLimit); 
 				session.rowActionList.setSize(limit); 
 				} 
 				if (session == lobSession 
 				|| getFirstLiveTransactionTimestamp() 
 				> session.actionTimestamp) { 
 				Object[] list = session.rowActionList.getArray(); 
 				mergeTransaction(list, 0, limit, session.actionTimestamp); 
 				finaliseRows(session, list, 0, limit); 
 				} else { 
 				
 
 LINES: 		| TransferSQLText.java: 630 - 636 || TransferSQLText.java: 656 - 662 || TransferSQLText.java: 687 - 693 |
 CLONE CLASS: 	if (WTextRead != null) { 
 				try { 
 				WTextRead.close(); 
 				WTextRead = null; 
 				} catch (IOException e) {} 
 				} 
 				
 
 LINES: 		| ParserDDL.java: 3632 - 3639 || ParserDDL.java: 4328 - 4335 |
 CLONE CLASS: 	name, newName 
 				}; 
 				HsqlName[] writeLockNames = 
 				database.schemaManager.getCatalogNameArray(); 
 				return new StatementSchema(sql, StatementTypes.RENAME_OBJECT, args, 
 				null, writeLockNames); 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 3131 - 3139 || DatabaseInformationFull.java: 6263 - 6270 |
 CLONE CLASS: 	}, false); 
 				return t; 
 				} 
 				Session sys = database.sessionManager.newSysSession( 
 				SqlInvariants.INFORMATION_SCHEMA_HSQLNAME, session.getUser()); 
 				String sql = (String) statementMap.get(""); 
 				
 
 LINES: 		| TestLobs.java: 561 - 567 || TestLobs.java: 655 - 661 |
 CLONE CLASS: 	sw.stop(); 
 				System.out.println(sw.elapsedTimeToMessage("Time for updates")); 
 				} catch (SQLException e) { 
 				e.printStackTrace(); 
 				fail("test failure"); 
 				} 
 				} 
 				
 
 LINES: 		| BaseHashMap.java: 418 - 449 || BaseHashMap.java: 613 - 644 |
 CLONE CLASS: 	} else { 
 				throw new NoSuchElementException("BaseHashMap"); 
 				} 
 				} 
 				lookup = hashIndex.linkNode(index, lastLookup); 
 				if (isObjectKey) { 
 				objectKeyTable[lookup] = objectKey; 
 				} else if (isIntKey) { 
 				intKeyTable[lookup] = (int) longKey; 
 				if (longKey == 0) { 
 				hasZeroKey   = true; 
 				zeroKeyIndex = lookup; 
 				} 
 				} else if (isLongKey) { 
 				longKeyTable[lookup] = longKey; 
 				if (longKey == 0) { 
 				hasZeroKey   = true; 
 				zeroKeyIndex = lookup; 
 				} 
 				} 
 				if (isObjectValue) { 
 				objectValueTable[lookup] = objectValue; 
 				} else if (isIntValue) { 
 				intValueTable[lookup] = (int) longValue; 
 				} else if (isLongValue) { 
 				longValueTable[lookup] = longValue; 
 				
 
 LINES: 		| BitType.java: 125 - 134 || CharacterType.java: 230 - 239 || BinaryType.java: 191 - 200 |
 CLONE CLASS: 	} 
 				if (other == SQL_ALL_TYPES) { 
 				return this; 
 				} 
 				if (typeCode == other.typeCode) { 
 				return precision >= other.precision ? this 
 				: other; 
 				} 
 				
 
 LINES: 		| JaasAuthBean.java: 130 - 198 || LdapAuthBean.java: 238 - 307 |
 CLONE CLASS: 	} 
 				public void setRoleSchemaValuePattern(Pattern roleSchemaValuePattern) { 
 				this.roleSchemaValuePattern = roleSchemaValuePattern; 
 				} 
 				public void setRoleSchemaValuePatternString(String patternString) { 
 				setRoleSchemaValuePattern(Pattern.compile(patternString)); 
 				} 
 				
 
 LINES: 		| SqlFile.java: 3193 - 3198 || DatabaseManagerSwing.java: 2412 - 2417 |
 CLONE CLASS: 	private static final String[] oracleSysSchemas = { 
 				"SYS", "SYSTEM", "OUTLN", "DBSNMP", "OUTLN", "MDSYS", "ORDSYS", 
 				"ORDPLUGINS", "CTXSYS", "DSSYS", "PERFSTAT", "WKPROXY", "WKSYS", 
 				"WMSYS", "XDB", "ANONYMOUS", "ODM", "ODM_MTR", "OLAPSYS", "TRACESVR", 
 				"REPADMIN" 
 				}; 
 				
 
 LINES: 		| JDBCStatement.java: 825 - 857 || JDBCPreparedStatement.java: 3566 - 3598 |
 CLONE CLASS: 	if (rows < 0) { 
 				throw JDBCUtil.outOfRangeArgument(); 
 				} 
 				fetchSize = rows; 
 				} 
 				public synchronized int getFetchSize() throws SQLException { 
 				
 
 LINES: 		| SchemaObjectSet.java: 269 - 279 || SchemaObjectSet.java: 300 - 310 |
 CLONE CLASS: 	int code; 
 				switch (type) { 
 				case SchemaObject.VIEW : 
 				case SchemaObject.TABLE : 
 				case SchemaObject.COLUMN : 
 				case SchemaObject.SEQUENCE : 
 				case SchemaObject.CHARSET : 
 				case SchemaObject.DOMAIN : 
 				case SchemaObject.TYPE : 
 				
 
 LINES: 		| IndexAVL.java: 1270 - 1279 || IndexAVL.java: 1335 - 1344 |
 CLONE CLASS: 	} 
 				while (session != null && x != null) { 
 				Row row = x.getRow(store); 
 				if (session.database.txManager.canRead( 
 				session, store, row, TransactionManager.ACTION_READ, 
 				null)) { 
 				break; 
 				} 
 				
 
 LINES: 		| TransactionManager2PL.java: 102 - 111 || TransactionManagerMV2PL.java: 126 - 135 |
 CLONE CLASS: 	endTransaction(session); 
 				for (int i = 0; i < limit; i++) { 
 				RowAction action = (RowAction) session.rowActionList.get(i); 
 				action.commit(session); 
 				} 
 				adjustLobUsage(session); 
 				persistCommit(session); 
 				
 
 LINES: 		| QuerySpecification.java: 39 - 44 || QueryExpression.java: 36 - 41 |
 CLONE CLASS: 	import org.hsqldb.error.Error; 
 				import org.hsqldb.error.ErrorCode; 
 				import org.hsqldb.index.Index; 
 				import org.hsqldb.lib.ArrayListIdentity; 
 				import org.hsqldb.lib.ArrayUtil; 
 				import org.hsqldb.lib.HashMappedList; 
 				
 
 LINES: 		| DatabaseInformationFull.java: 5368 - 5374 || DatabaseInformationFull.java: 5473 - 5479 || DatabaseInformationFull.java: 5580 - 5586 || DatabaseInformationFull.java: 5697 - 5703 |
 CLONE CLASS: 	continue; 
 				} 
 				row                   = t.getEmptyRowData(); 
 				row[specific_catalog] = database.getCatalogName().name; 
 				row[specific_schema]  = routine.getSchemaName().name; 
 				row[specific_name]    = routine.getSpecificName().name; 
 				
 
 LINES: 		| JDBCPreparedStatement.java: 4156 - 4163 || JDBCPreparedStatement.java: 4176 - 4183 |
 CLONE CLASS: 	if (o instanceof String) { 
 				o = outType.convertToDefaultType(session, o); 
 				break; 
 				} 
 				} catch (HsqlException e) { 
 				JDBCUtil.throwError(e); 
 				} 
 				
 
 LINES: 		| BaseHashMap.java: 310 - 322 || BaseHashMap.java: 469 - 481 |
 CLONE CLASS: 	int hash = (int) longKey; 
 				if (isObjectKey) { 
 				if (objectKey == null) { 
 				return null; 
 				} 
 				if (comparator == null) { 
 				hash = objectKey.hashCode(); 
 				} else { 
 				hash = comparator.hashCode(objectKey); 
 				} 
 				} 
 				
 
 LINES: 		| JDBCResultSet.java: 1682 - 1692 || JDBCCallableStatement.java: 928 - 938 |
 CLONE CLASS: 	if (o == null) { 
 				return null; 
 				} 
 				try { 
 				return ((JavaObjectData) o).getObject(); 
 				} catch (HsqlException e) { 
 				throw JDBCUtil.sqlException(e); 
 				} 
 				} 
 				default : 
 				
 
 LINES: 		| Expression.java: 969 - 975 || ExpressionColumn.java: 1102 - 1108 |
 CLONE CLASS: 	for (int i = 0; i < nodes.length; i++) { 
 				if (nodes[i] != null) { 
 				if (nodes[i].hasReference(range)) { 
 				return true; 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| TestHashStructures.java: 426 - 432 || TestHashStructures.java: 448 - 454 |
 CLONE CLASS: 	if (uMap.size() != hIntMap.size()) { 
 				throw new Exception("HashMap size mismatch"); 
 				} 
 				} 
 				System.out.println(uMap.size()); 
 				} 
 				
 
 LINES: 		| BitType.java: 278 - 283 || IntervalType.java: 528 - 533 |
 CLONE CLASS: 	case Types.SQL_BIGINT : 
 				case Types.SQL_REAL : 
 				case Types.SQL_FLOAT : 
 				case Types.SQL_DOUBLE : 
 				case Types.SQL_NUMERIC : 
 				case Types.SQL_DECIMAL : { 
 				
 
 LINES: 		| ParserDDL.java: 1430 - 1437 || TableWorks.java: 218 - 225 |
 CLONE CLASS: 	c.getName().name, table.getSchemaName(), table.getName(), 
 				SchemaObject.INDEX); 
 				c.core.uniqueName = uniqueConstraint.getName(); 
 				c.core.mainName   = mainName; 
 				c.core.mainIndex  = mainIndex; 
 				c.core.refTable   = table; 
 				c.core.refName    = c.getName(); 
 				
 
 LINES: 		| ExpressionAccessor.java: 72 - 80 || Expression.java: 1152 - 1160 || ExpressionArithmetic.java: 248 - 256 |
 CLONE CLASS: 	} 
 				return unresolvedSet; 
 				} 
 				public void resolveTypes(Session session, Expression parent) { 
 				for (int i = 0; i < nodes.length; i++) { 
 				if (nodes[i] != null) { 
 				
 
 LINES: 		| ConnectionDialog.java: 257 - 263 || ConnectionDialogSwing.java: 256 - 262 |
 CLONE CLASS: 	if (d.width >= 640) { 
 				setLocation((d.width - size.width) / 2, 
 				(d.height - size.height) / 2); 
 				} else { 
 				setLocation(0, 0); 
 				setSize(d); 
 				} 
 				
 
 LINES: 		| TransferSQLText.java: 376 - 382 || TransferSQLText.java: 443 - 449 || TransferSQLText.java: 704 - 710 |
 CLONE CLASS: 	if (WTextRead == null) { 
 				try { 
 				WTextRead = new BufferedReader(new FileReader(sFileName)); 
 				} catch (IOException e) { 
 				throw new DataAccessPointException(e.getMessage()); 
 				} 
 				} 
 				
 
 LINES: 		| IntValueHashMap.java: 62 - 69 || IntValueHashMap.java: 78 - 85 || IntValueHashMap.java: 94 - 101 || LongValueHashMap.java: 61 - 68 || LongValueHashMap.java: 77 - 84 || LongValueHashMap.java: 93 - 100 |
 CLONE CLASS: 	if (key == null) { 
 				throw new NoSuchElementException(); 
 				} 
 				int hash   = key.hashCode(); 
 				int lookup = getLookup(key, hash); 
 				if (lookup != -1) { 
 				
 
 LINES: 		| ValuePoolHashMap.java: 115 - 125 || ValuePoolHashMap.java: 157 - 167 || ValuePoolHashMap.java: 216 - 226 || ValuePoolHashMap.java: 261 - 271 || ValuePoolHashMap.java: 304 - 314 || ValuePoolHashMap.java: 346 - 356 || ValuePoolHashMap.java: 388 - 398 |
 CLONE CLASS: 	resetAccessCount(); 
 				} 
 				accessTable[lookup] = accessCount++; 
 				return testValue; 
 				} 
 				} 
 				if (hashIndex.elementCount >= threshold) { 
 				reset(); 
 				
 
 LINES: 		| RangeVariable.java: 545 - 554 || RangeVariable.java: 589 - 598 |
 CLONE CLASS: 	ColumnSchema column = table.getColumn(i); 
 				String columnName = columnAliases == null ? column.getName().name 
 				: (String) columnAliases 
 				.get(i); 
 				if (exclude != null && exclude.contains(columnName)) { 
 				continue; 
 				} 
 				Expression e = new ExpressionColumn(this, i); 
 				
 
 LINES: 		| BlobDataID.java: 247 - 254 || ClobDataID.java: 127 - 134 |
 CLONE CLASS: 	public void truncate(SessionInterface session, long len) { 
 				ResultLob resultOut = ResultLob.newLobTruncateRequest(id, len); 
 				Result    resultIn  = session.execute(resultOut); 
 				if (resultIn.isError()) { 
 				throw resultIn.getException(); 
 				} 
 				
 
 LINES: 		| Table.java: 2203 - 2218 || Table.java: 2225 - 2240 |
 CLONE CLASS: 	} 
 				TriggerDef[] trigVec = triggerLists[trigVecIndex]; 
 				for (int i = 0, size = trigVec.length; i < size; i++) { 
 				TriggerDef td         = trigVec[i]; 
 				boolean    sqlTrigger = td instanceof TriggerDefSQL; 
 				if (td.hasOldTable()) { 
 				} 
 				td.pushPair(session, null, null); 
 				} 
 				} 
 				
 
 LINES: 		| DataFileCache.java: 341 - 351 || DataFileCache.java: 457 - 467 |
 CLONE CLASS: 	if (isIncremental) { 
 				preexists = restoreBackupIncremental(); 
 				} else { 
 				preexists = restoreBackup(); 
 				} 
 				} 
 				dataFile = RAFile.newScaledRAFile(database, dataFileName, 
 				readonly, fileType); 
 				if (preexists) { 
 				
 
 LINES: 		| StatementDML.java: 1017 - 1024 || StatementDML.java: 1246 - 1253 |
 CLONE CLASS: 	path.clear(); 
 				} 
 				navigator.beforeFirst(); 
 				} 
 				while (navigator.next()) { 
 				Row      row            = navigator.getCurrentRow(); 
 				
 
 LINES: 		| NumberType.java: 756 - 764 || IntervalType.java: 478 - 485 || DateTimeType.java: 446 - 453 |
 CLONE CLASS: 	} 
 				} 
 				public Object convertToTypeLimits(SessionInterface session, Object a) { 
 				if (a == null) { 
 				return null; 
 				} 
 				
 
 LINES: 		| TestLobs.java: 445 - 455 || TestLobs.java: 472 - 482 |
 CLONE CLASS: 	try { 
 				InputStream fis = 
 				getClass().getResourceAsStream(resourceFileName); 
 				fis    = getClass().getResourceAsStream(resourceFileName); 
 				reader = new InputStreamReader(fis, "ISO-8859-1"); 
 				for (int i = 0; i < 100; i++) { 
 				reader.read(); 
 				} 
 				} catch (Exception e) {} 
 				
 
 LINES: 		| IndexAVLMemory.java: 121 - 134 || IndexAVL.java: 635 - 648 |
 CLONE CLASS: 	} 
 				public void checkIndex(PersistentStore store) { 
 				readLock.lock(); 
 				try { 
 				NodeAVL p = getAccessor(store); 
 				NodeAVL f = null; 
 				while (p != null) { 
 				f = p; 
 				checkNodes(store, p); 
 				
 
 LINES: 		| DataFileCacheSession.java: 89 - 96 || DataFileCache.java: 392 - 399 || DataFileCache.java: 497 - 504 |
 CLONE CLASS: 	release(); 
 				throw Error.error(t, ErrorCode.FILE_IO_ERROR, 
 				ErrorCode.M_DataFileCache_open, new Object[] { 
 				t.toString(), dataFileName 
 				}); 
 				} 
 				} 
 				
 
 LINES: 		| Servlet.java: 71 - 345 || Servlet.java: 71 - 345 |
 CLONE CLASS: 	package org.hsqldb.server; 
 				import java.io.DataInputStream; 
 				import java.io.IOException; 
 				import java.io.PrintWriter; 
 				import javax.servlet.ServletConfig; 
 				import javax.servlet.ServletException; 
 				import javax.servlet.http.HttpServletRequest; 
 				import javax.servlet.http.HttpServletResponse; 
 				import org.hsqldb.DatabaseManager; 
 				import org.hsqldb.DatabaseURL; 
 				import org.hsqldb.HsqlException; 
 				import org.hsqldb.Session; 
 				import org.hsqldb.lib.DataOutputStream; 
 				import org.hsqldb.lib.HsqlByteArrayOutputStream; 
 				import org.hsqldb.persist.HsqlProperties; 
 				import org.hsqldb.result.Result; 
 				import org.hsqldb.result.ResultConstants; 
 				import org.hsqldb.rowio.RowInputBinary; 
 				import org.hsqldb.rowio.RowOutputBinary; 
 				public class Servlet extends javax.servlet.http.HttpServlet { 
 				private static final int BUFFER_SIZE = 256; 
 				private String           dbType; 
 				private String           dbPath; 
 				private String           errorStr; 
 				private RowOutputBinary  rowOut; 
 				private RowInputBinary   rowIn; 
 				private int              iQueries; 
 				public void init(ServletConfig config) { 
 				try { 
 				super.init(config); 
 				rowOut = new RowOutputBinary(BUFFER_SIZE, 1); 
 				rowIn  = new RowInputBinary(rowOut); 
 				} catch (ServletException e) { 
 				log(e.toString()); 
 				} 
 				String dbStr = getInitParameter("hsqldb.server.database"); 
 				if (dbStr == null) { 
 				dbStr = "."; 
 				} 
 				String useWebInfStr = 
 				getInitParameter("hsqldb.server.use_web-inf_path"); 
 				if (!dbStr.equals(".") && "true".equalsIgnoreCase(useWebInfStr)) { 
 				dbStr = getServletContext().getRealPath("/") + "WEB-INF/" + dbStr; 
 				} 
 				HsqlProperties dbURL = DatabaseURL.parseURL(dbStr, false, false); 
 				log("Database filename = " + dbStr); 
 				if (dbURL == null) { 
 				errorStr = "Bad Database name"; 
 				} else { 
 				dbPath = dbURL.getProperty("database"); 
 				dbType = dbURL.getProperty("connection_type"); 
 				try { 
 				DatabaseManager.getDatabase(dbType, dbPath, dbURL); 
 				} catch (HsqlException e) { 
 				errorStr = e.getMessage(); 
 				} 
 				} 
 				if (errorStr == null) { 
 				log("Initialization completed."); 
 				} else { 
 				log("Database could not be initialised."); 
 				log(errorStr); 
 				} 
 				} 
 				private static long lModified = 0; 
 				protected long getLastModified(HttpServletRequest req) { 
 				return lModified++; 
 				} 
 				public void doGet(HttpServletRequest request, 
 				HttpServletResponse response) 
 				throws IOException, ServletException { 
 				String query = request.getQueryString(); 
 				if ((query == null) || (query.length() == 0)) { 
 				response.setContentType("text/html"); 
 				response.setHeader("Pragma", "no-cache"); 
 				PrintWriter out = response.getWriter(); 
 				out.println( 
 				"<html><head><title>HSQL Database Engine Servlet</title>"); 
 				out.println("</head><body><h1>HSQL Database Engine Servlet</h1>"); 
 				out.println("The servlet is running.<p>"); 
 				if (errorStr == null) { 
 				out.println("The database is also running.<p>"); 
 				out.println("Database name: " + dbType + dbPath + "<p>"); 
 				out.println("Queries processed: " + iQueries + "<p>"); 
 				} else { 
 				out.println("<h2>The database is not running!</h2>"); 
 				out.println("The error message is:<p>"); 
 				out.println(errorStr); 
 				} 
 				out.println("</body></html>"); 
 				} 
 				} 
 				public void doPost(HttpServletRequest request, 
 				HttpServletResponse response) 
 				throws IOException, ServletException { 
 				synchronized (this) { 
 				DataInputStream  inStream = null; 
 				DataOutputStream dataOut  = null; 
 				try { 
 				inStream = new DataInputStream(request.getInputStream()); 
 				int  databaseID = inStream.readInt(); 
 				long sessionID  = inStream.readLong(); 
 				int  mode       = inStream.readByte(); 
 				Session session = DatabaseManager.getSession(databaseID, 
 				sessionID); 
 				Result resultIn = Result.newResult(session, mode, inStream, 
 				rowIn); 
 				resultIn.setDatabaseId(databaseID); 
 				resultIn.setSessionId(sessionID); 
 				Result resultOut; 
 				int    type = resultIn.getType(); 
 				if (type == ResultConstants.CONNECT) { 
 				try { 
 				session = DatabaseManager.newSession( 
 				dbType, dbPath, resultIn.getMainString(), 
 				resultIn.getSubString(), new HsqlProperties(), 
 				resultIn.getZoneString(), 
 				resultIn.getUpdateCount()); 
 				resultIn.readAdditionalResults(null, inStream, rowIn); 
 				resultOut = Result.newConnectionAcknowledgeResponse( 
 				session.getDatabase(), session.getId(), 
 				session.getDatabase().getDatabaseID()); 
 				} catch (HsqlException e) { 
 				resultOut = Result.newErrorResult(e); 
 				} 
 				} else if (type == ResultConstants.DISCONNECT 
 				|| type == ResultConstants.RESETSESSION) { 
 				response.setHeader("Cache-Control", "no-cache"); 
 				response.setContentType("application/octet-stream"); 
 				response.setContentLength(6); 
 				dataOut = new DataOutputStream(response.getOutputStream()); 
 				dataOut.writeByte(ResultConstants.DISCONNECT); 
 				dataOut.writeInt(4); 
 				dataOut.writeByte(ResultConstants.NONE); 
 				dataOut.close(); 
 				return; 
 				} else { 
 				int  dbId      = resultIn.getDatabaseId(); 
 				long sessionId = resultIn.getSessionId(); 
 				session = DatabaseManager.getSession(dbId, sessionId); 
 				resultIn.readLobResults(session, inStream, rowIn); 
 				resultOut = session.execute(resultIn); 
 				} 
 				HsqlByteArrayOutputStream memStream = 
 				new HsqlByteArrayOutputStream(); 
 				DataOutputStream tempOutput = new DataOutputStream(memStream); 
 				resultOut.write(session, tempOutput, rowOut); 
 				response.setHeader("Cache-Control", "no-cache"); 
 				response.setContentType("application/octet-stream"); 
 				response.setContentLength(memStream.size()); 
 				dataOut = new DataOutputStream(response.getOutputStream()); 
 				memStream.writeTo(dataOut); 
 				iQueries++; 
 				} catch (HsqlException e) {} 
 				finally { 
 				if (dataOut != null) { 
 				dataOut.close(); 
 				} 
 				if (inStream != null) { 
 				inStream.close(); 
 				} 
 				} 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| ConnectionDialog.java: 48 - 55 || Transfer.java: 92 - 99 |
 CLONE CLASS: 	import java.awt.Panel; 
 				import java.awt.SystemColor; 
 				import java.awt.TextField; 
 				import java.awt.Toolkit; 
 				import java.awt.event.ActionEvent; 
 				import java.awt.event.ActionListener; 
 				import java.awt.event.ItemEvent; 
 				import java.awt.event.ItemListener; 
 				
 
 LINES: 		| RowAction.java: 194 - 201 || RowAction.java: 253 - 260 |
 CLONE CLASS: 	} 
 				} 
 				if (action.next == null) { 
 				break; 
 				} 
 				action = action.next; 
 				
 
 LINES: 		| Calculator.java: 206 - 224 || Calculator.java: 241 - 259 |
 CLONE CLASS: 	i = startAtomIndex; 
 				atom = atoms.get(i); 
 				if (atom.op != null) 
 				throw new IllegalStateException( 
 				"Expected initial value expected but got operation " 
 				+ atom.op); 
 				while (startAtomIndex + remaining > i + 1) { 
 				if (startAtomIndex + remaining < i + 3) 
 				throw new IllegalStateException( 
 				"No operator/operand pairing remaining"); 
 				nextAtom = atoms.get(i + 1); 
 				if (nextAtom.op == null) 
 				throw new IllegalStateException( 
 				"Operator expected but got value " + nextAtom.val); 
 				op = nextAtom.op; 
 				nextAtom = atoms.get(i + 2); 
 				if (nextAtom.op != null) 
 				throw new IllegalStateException( 
 				"Value expected but got operator " + nextAtom.op); 
 				
 
 LINES: 		| IntervalType.java: 824 - 831 || IntervalType.java: 863 - 870 |
 CLONE CLASS: 	if (a == null || b == null) { 
 				return null; 
 				} 
 				switch (typeCode) { 
 				case Types.SQL_INTERVAL_YEAR : 
 				case Types.SQL_INTERVAL_YEAR_TO_MONTH : 
 				
 
 LINES: 		| ClobDataID.java: 101 - 110 || ClobDataID.java: 116 - 125 |
 CLONE CLASS: 	Result    resultIn  = session.execute(resultOut); 
 				if (resultIn.isError()) { 
 				throw resultIn.getException(); 
 				} 
 				long lobID = ((ResultLob) resultIn).getLobID(); 
 				return new ClobDataID(lobID); 
 				} 
 				
 
 LINES: 		| IntKeyHashMapConcurrent.java: 125 - 132 || LongKeyHashMap.java: 159 - 166 |
 CLONE CLASS: 	} finally { 
 				readLock.unlock(); 
 				} 
 				} 
 				public int getOrderedMatchCount(int[] array) { 
 				int i = 0; 
 				
 
 LINES: 		| LongKeyLongValueHashMap.java: 148 - 156 || IntKeyIntValueHashMap.java: 141 - 149 || OrderedLongKeyHashMap.java: 183 - 191 || OrderedIntKeyHashMap.java: 140 - 148 || MultiValueHashMap.java: 138 - 146 || IntKeyHashMapConcurrent.java: 179 - 187 || LongKeyHashMap.java: 213 - 221 || LongKeyIntValueHashMap.java: 152 - 160 || IntKeyHashMap.java: 125 - 133 |
 CLONE CLASS: 	} 
 				public Object get(Object key) { 
 				throw new RuntimeException(); 
 				} 
 				public boolean add(Object value) { 
 				throw new RuntimeException(); 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 4727 - 4735 || DatabaseInformationFull.java: 5185 - 5194 |
 CLONE CLASS: 	addColumn(t, "SPECIFIC_SCHEMA", SQL_IDENTIFIER); 
 				addColumn(t, "SPECIFIC_NAME", SQL_IDENTIFIER); 
 				addColumn(t, "ROUTINE_CATALOG", SQL_IDENTIFIER); 
 				addColumn(t, "ROUTINE_SCHEMA", SQL_IDENTIFIER); 
 				addColumn(t, "ROUTINE_NAME", SQL_IDENTIFIER); 
 				addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA); 
 				addColumn(t, "IS_GRANTABLE", YES_OR_NO); 
 				HsqlName name = HsqlNameManager.newInfoSchemaObjectName( 
 				
 
 LINES: 		| TransferTable.java: 299 - 306 || TransferTable.java: 335 - 342 || TransferTable.java: 353 - 360 || TransferTable.java: 454 - 461 |
 CLONE CLASS: 	if (!destDb.getAutoCommit()) { 
 				destDb.commit(); 
 				try { 
 				destDb.setAutoCommit(true); 
 				} catch (Exception e) {} 
 				} 
 				} 
 				
 
 LINES: 		| RAFileInJar.java: 84 - 91 || RAFile.java: 204 - 211 |
 CLONE CLASS: 	seekPosition = position; 
 				} 
 				public long getFilePointer() throws IOException { 
 				return seekPosition; 
 				} 
 				private void readIntoBuffer() throws IOException { 
 				
 
 LINES: 		| Result.java: 349 - 356 || Result.java: 1081 - 1088 |
 CLONE CLASS: 	break; 
 				case ResultConstants.DISCONNECT : 
 				case ResultConstants.RESETSESSION : 
 				case ResultConstants.STARTTRAN : 
 				break; 
 				case ResultConstants.PREPARE : 
 				
 
 LINES: 		| FunctionSQL.java: 1288 - 1298 || FunctionSQL.java: 1312 - 1322 |
 CLONE CLASS: 	} 
 				if (!nodes[0].dataType.isCharacterType() 
 				&& !nodes[0].dataType.isBinaryType()) { 
 				throw Error.error(ErrorCode.X_42563); 
 				} 
 				dataType = Type.SQL_BIGINT; 
 				break; 
 				} 
 				
 
 LINES: 		| RowStoreAVLHybrid.java: 40 - 45 || SimpleStore.java: 36 - 41 |
 CLONE CLASS: 	import org.hsqldb.RowAction; 
 				import org.hsqldb.Session; 
 				import org.hsqldb.TableBase; 
 				import org.hsqldb.error.Error; 
 				import org.hsqldb.error.ErrorCode; 
 				import org.hsqldb.index.Index; 
 				
 
 LINES: 		| DateTimeType.java: 1109 - 1116 || DateTimeType.java: 1158 - 1165 |
 CLONE CLASS: 	} 
 				break; 
 				default : 
 				} 
 				throw Error.runtimeError(ErrorCode.U_S0500, "DateTimeType"); 
 				} 
 				
 
 LINES: 		| DatabaseManagerSwing.java: 1294 - 1301 || DatabaseManager.java: 750 - 757 |
 CLONE CLASS: 	} else if (s.equals("CREATE TABLE")) { 
 				showHelp(DatabaseManagerCommon.createTableHelp); 
 				} else if (s.equals("DROP TABLE")) { 
 				showHelp(DatabaseManagerCommon.dropTableHelp); 
 				} else if (s.equals("CREATE INDEX")) { 
 				showHelp(DatabaseManagerCommon.createIndexHelp); 
 				} else if (s.equals("DROP INDEX")) { 
 				showHelp(DatabaseManagerCommon.dropIndexHelp); 
 				
 
 LINES: 		| StringUtil.java: 225 - 233 || StringUtil.java: 259 - 267 || StringUtil.java: 277 - 285 || StringUtil.java: 315 - 323 |
 CLONE CLASS: 	sb.append(quote); 
 				if (i + 1 < len) { 
 				sb.append(separator); 
 				} 
 				} 
 				return sb.toString(); 
 				} 
 				
 
 LINES: 		| TestBatchExecution.java: 368 - 376 || TestBatchExecution.java: 435 - 443 |
 CLONE CLASS: 	} 
 				System.out.println("bye."); 
 				} catch (SQLException e) { 
 				e.printStackTrace(); 
 				} catch (ClassNotFoundException e) { 
 				e.printStackTrace(); 
 				} 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 5057 - 5064 || DatabaseInformationFull.java: 5646 - 5653 |
 CLONE CLASS: 	addColumn(t, "SPECIFIC_SCHEMA", SQL_IDENTIFIER); 
 				addColumn(t, "SPECIFIC_NAME", SQL_IDENTIFIER); 
 				addColumn(t, "ROUTINE_CATALOG", SQL_IDENTIFIER); 
 				addColumn(t, "ROUTINE_SCHEMA", SQL_IDENTIFIER); 
 				addColumn(t, "ROUTINE_NAME", SQL_IDENTIFIER); 
 				addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER); 
 				addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER); 
 				addColumn(t, "TABLE_NAME", SQL_IDENTIFIER); 
 				
 
 LINES: 		| ParserDML.java: 770 - 777 || ParserDML.java: 848 - 855 || ParserDQL.java: 666 - 673 |
 CLONE CLASS: 	Expression target = XreadTargetSpecification(rangeVars, 
 				colIndexList); 
 				if (!targets.add(target)) { 
 				ColumnSchema col = target.getColumn(); 
 				throw Error.error(ErrorCode.X_42579, col.getName().name); 
 				} 
 				
 
 LINES: 		| DatabaseManagerSwing.java: 247 - 252 || DatabaseManager.java: 132 - 137 |
 CLONE CLASS: 	+ "http: 
 				+ "You may use and redistribute according to the HSQLDB\n" 
 				+ "license documented in the source code and at the web\n" 
 				+ "site above." 
 				+ (TT_AVAILABLE ? "\n\nTransferTool options are available." 
 				: ""); 
 				
 
 LINES: 		| NumberType.java: 1449 - 1454 || NumberType.java: 1497 - 1502 || NumberType.java: 1549 - 1554 || NumberType.java: 1611 - 1616 |
 CLONE CLASS: 	} 
 				case Types.TINYINT : 
 				case Types.SQL_SMALLINT : 
 				case Types.SQL_INTEGER : { 
 				int ai = ((Number) a).intValue(); 
 				int bi = ((Number) b).intValue(); 
 				
 
 LINES: 		| RowSetNavigatorClient.java: 106 - 126 || RowSetNavigatorData.java: 245 - 262 |
 CLONE CLASS: 	} 
 				public Object[] getCurrent() { 
 				if (currentPos < 0 || currentPos >= size) { 
 				return null; 
 				} 
 				if (currentPos == currentOffset + table.length) { 
 				getBlock(currentOffset + table.length); 
 				} 
 				return table[currentPos - currentOffset]; 
 				} 
 				public Row getCurrentRow() { 
 				throw Error.runtimeError(ErrorCode.U_S0500, "RowSetNavigatorClient"); 
 				} 
 				
 
 LINES: 		| TestLobs.java: 682 - 735 || TestLobs.java: 759 - 812 |
 CLONE CLASS: 	ps.executeUpdate(); 
 				String dq1   = "select CHARACTER_LENGTH(clobfield) from clobtest;"; 
 				ResultSet rs = statement.executeQuery(dq1); 
 				rs.next(); 
 				int length = rs.getInt(1); 
 				assertTrue(value.length() == length); 
 				rs.close(); 
 				String dq3 = "delete from clobtest;"; 
 				statement.execute(dq3); 
 				char[] testChars = new char[11111]; 
 				for (int i = 0, j = 32; i < testChars.length; i++, j++) { 
 				if (j > 255) { 
 				j = 32; 
 				} 
 				testChars[i] = (char) j; 
 				} 
 				ps.setCharacterStream(1, new CharArrayReader(testChars), 
 				testChars.length); 
 				ps.executeUpdate(); 
 				String dq2 = "select clobfield from clobtest;"; 
 				rs = statement.executeQuery(dq2); 
 				rs.next(); 
 				Reader reader   = rs.getCharacterStream(1); 
 				char[] newChars = new char[testChars.length]; 
 				try { 
 				reader.read(newChars); 
 				} catch (IOException e) { 
 				fail("test failure"); 
 				} 
 				for (int i = 0; i < testChars.length; i++) { 
 				if (testChars[i] != newChars[i]) { 
 				fail("test failure"); 
 				} 
 				} 
 				} catch (SQLException e) { 
 				e.printStackTrace(); 
 				fail("test failure"); 
 				} 
 				
 
 LINES: 		| ParserDQL.java: 5445 - 5455 || ParserDQL.java: 5474 - 5484 |
 CLONE CLASS: 	read(); 
 				if (!readIfThis(Tokens.OPENBRACKET)) { 
 				rewind(position); 
 				return null; 
 				} 
 				Expression casewhen = null; 
 				do { 
 				
 
 LINES: 		| ParserDQL.java: 3205 - 3214 || ParserDQL.java: 3247 - 3256 |
 CLONE CLASS: 	Expression e = readSQLFunction(function); 
 				if (e != null) { 
 				return e; 
 				} 
 				default : 
 				} 
 				return XreadValueExpressionPrimary(); 
 				} 
 				
 
 LINES: 		| RowType.java: 306 - 325 || RowType.java: 334 - 353 |
 CLONE CLASS: 	return this; 
 				} 
 				if (!other.isRowType()) { 
 				throw Error.error(ErrorCode.X_42562); 
 				} 
 				Type[] newTypes   = new Type[dataTypes.length]; 
 				Type[] otherTypes = ((RowType) other).getTypesArray(); 
 				if (dataTypes.length != otherTypes.length) { 
 				throw Error.error(ErrorCode.X_42564); 
 				} 
 				for (int i = 0; i < dataTypes.length; i++) { 
 				newTypes[i] = dataTypes[i].getAggregateType(otherTypes[i]); 
 				} 
 				return new RowType(newTypes); 
 				} 
 				
 
 LINES: 		| TransactionManagerMVCC.java: 539 - 565 || TransactionManagerMV2PL.java: 324 - 350 |
 CLONE CLASS: 	} 
 				public boolean canRead(Session session, PersistentStore store, long id, 
 				int mode) { 
 				if (store.getTable().tableType == TableBase.TEMP_TABLE) { 
 				return true; 
 				} 
 				RowAction action = (RowAction) rowActionMap.get(id); 
 				if (action == null) { 
 				return true; 
 				} 
 				return action.canRead(session, mode); 
 				} 
 				public void addTransactionInfo(CachedObject object) { 
 				if (object.isMemory()) { 
 				return; 
 				} 
 				Row row = (Row) object; 
 				if (row.getTable().tableType == TableBase.CACHED_TABLE) { 
 				
 
 LINES: 		| ExpressionLogical.java: 612 - 627 || ExpressionOp.java: 326 - 341 || ExpressionArithmetic.java: 215 - 230 |
 CLONE CLASS: 	} 
 				if (getLeftNode() != null) { 
 				sb.append(" arg_left=["); 
 				sb.append(nodes[LEFT].describe(session, blanks + 1)); 
 				sb.append(']'); 
 				} 
 				if (getRightNode() != null) { 
 				sb.append(" arg_right=["); 
 				sb.append(nodes[RIGHT].describe(session, blanks + 1)); 
 				sb.append(']'); 
 				} 
 				return sb.toString(); 
 				} 
 				
 
 LINES: 		| NodeAVLDiskLarge.java: 95 - 137 || NodeAVLDisk.java: 139 - 181 |
 CLONE CLASS: 	row = r; 
 				iId = id; 
 				} 
 				public void delete() { 
 				iLeft    = NO_POS; 
 				iRight   = NO_POS; 
 				iParent  = NO_POS; 
 				nLeft    = null; 
 				nRight   = null; 
 				nParent  = null; 
 				iBalance = 0; 
 				row.setNodesChanged(); 
 				} 
 				public boolean isInMemory() { 
 				return row.isInMemory(); 
 				} 
 				public boolean isMemory() { 
 				return false; 
 				} 
 				public long getPos() { 
 				return row.getPos(); 
 				} 
 				public RowAVL getRow(PersistentStore store) { 
 				if (!row.isInMemory()) { 
 				return (RowAVLDisk) store.get(this.row, false); 
 				} else { 
 				row.updateAccessCount(store.getAccessCount()); 
 				} 
 				return row; 
 				} 
 				public Object[] getData(PersistentStore store) { 
 				return row.getData(); 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 5470 - 5478 || DatabaseInformationFull.java: 5577 - 5585 || DatabaseInformationFull.java: 5694 - 5702 |
 CLONE CLASS: 	} 
 				if (!session.getGrantee().isFullyAccessibleByRole(refName)) { 
 				continue; 
 				} 
 				row                   = t.getEmptyRowData(); 
 				row[specific_catalog] = database.getCatalogName().name; 
 				row[specific_schema]  = routine.getSchemaName().name; 
 				
 
 LINES: 		| NodeAVLDisk.java: 362 - 371 || NodeAVLDisk.java: 385 - 394 || NodeAVLDisk.java: 410 - 419 |
 CLONE CLASS: 	if (!row.keepInMemory(true)) { 
 				row  = (RowAVLDisk) store.get(this.row, true); 
 				node = (NodeAVLDisk) row.getNode(iId); 
 				} 
 				if (!row.isInMemory()) { 
 				throw Error.runtimeError(ErrorCode.U_S0500, "NodeAVLDisk"); 
 				} 
 				row.setNodesChanged(); 
 				
 
 LINES: 		| WebServer.java: 130 - 149 || Server.java: 2456 - 2475 || WebServer.java: 130 - 149 |
 CLONE CLASS: 	} 
 				public static void main(String[] args) { 
 				HsqlProperties argProps = null; 
 				argProps = HsqlProperties.argArrayToProps(args, 
 				ServerProperties.sc_key_prefix); 
 				String[] errors = argProps.getErrorKeys(); 
 				if (errors.length != 0) { 
 				System.out.println("no value for argument:" + errors[0]); 
 				
 
 LINES: 		| ArrayUtil.java: 88 - 95 || ArrayUtil.java: 97 - 104 |
 CLONE CLASS: 	byte[] array = (byte[]) data; 
 				while (--to >= from) { 
 				array[to] = 0; 
 				} 
 				return; 
 				} 
 				
 
 LINES: 		| SchemaManager.java: 562 - 570 || SchemaManager.java: 653 - 661 |
 CLONE CLASS: 	HsqlName[] array = new HsqlName[names.size()]; 
 				names.toArray(array); 
 				return array; 
 				} finally { 
 				readLock.unlock(); 
 				} 
 				} 
 				
 
 LINES: 		| RowStoreAVLDiskData.java: 179 - 190 || RowStoreAVL.java: 169 - 180 |
 CLONE CLASS: 	} 
 				public CachedObject getAccessor(Index key) { 
 				int position = key.getPosition(); 
 				if (position >= accessorList.length) { 
 				throw Error.runtimeError(ErrorCode.U_S0500, "RowStoreAVL"); 
 				} 
 				return accessorList[position]; 
 				} 
 				
 
 LINES: 		| IntKeyHashMap.java: 117 - 125 || IntKeyHashMap.java: 156 - 164 |
 CLONE CLASS: 	} 
 				public int size() { 
 				return IntKeyHashMap.this.size(); 
 				} 
 				public boolean contains(Object o) { 
 				throw new RuntimeException(); 
 				} 
 				
 
 LINES: 		| JDBCPreparedStatement.java: 1566 - 1577 || JDBCPreparedStatement.java: 1640 - 1651 || JDBCPreparedStatement.java: 1715 - 1726 |
 CLONE CLASS: 	Calendar cal) throws SQLException { 
 				checkSetParameterIndex(parameterIndex); 
 				int i = parameterIndex - 1; 
 				if (x == null) { 
 				parameterValues[i] = null; 
 				parameterSet[i]    = Boolean.TRUE; 
 				return; 
 				} 
 				
 
 LINES: 		| TestOdbcService.java: 238 - 243 || TestOdbcService.java: 342 - 347 |
 CLONE CLASS: 	rs.close(); 
 				} catch (SQLException se) { 
 				junit.framework.AssertionFailedError ase 
 				= new junit.framework.AssertionFailedError(se.getMessage()); 
 				ase.initCause(se); 
 				throw ase; 
 				
 
 LINES: 		| HsqldbTransferHelper.java: 63 - 70 || PostgresTransferHelper.java: 72 - 79 |
 CLONE CLASS: 	} 
 				return (type); 
 				} 
 				String fixupColumnDefRead(TransferTable t, ResultSetMetaData meta, 
 				String columnType, ResultSet columnDesc, 
 				int columnIndex) throws SQLException { 
 				
 
 LINES: 		| DatabaseInformationFull.java: 2559 - 2566 || DatabaseInformationFull.java: 3550 - 3557 || DatabaseInformationFull.java: 4277 - 4284 |
 CLONE CLASS: 	addColumn(t, "UDT_CATALOG", SQL_IDENTIFIER); 
 				addColumn(t, "UDT_SCHEMA", SQL_IDENTIFIER); 
 				addColumn(t, "UDT_NAME", SQL_IDENTIFIER); 
 				addColumn(t, "SCOPE_CATALOG", SQL_IDENTIFIER); 
 				addColumn(t, "SCOPE_SCHEMA", SQL_IDENTIFIER); 
 				addColumn(t, "SCOPE_NAME", SQL_IDENTIFIER); 
 				addColumn(t, "MAXIMUM_CARDINALITY", CARDINAL_NUMBER); 
 				addColumn(t, "DTD_IDENTIFIER", SQL_IDENTIFIER); 
 				
 
 LINES: 		| DatabaseManagerSwing.java: 673 - 684 || DatabaseManager.java: 366 - 377 |
 CLONE CLASS: 	+ "where options include:\n" 
 				+ "    --help                show this message\n" 
 				+ "    --driver <classname>  jdbc driver class\n" 
 				+ "    --url <name>          jdbc url\n" 
 				+ "    --user <name>         username used for connection\n" 
 				+ "    --password <password> password for this user\n" 
 				+ "    --urlid <urlid>       use url/user/password/driver in rc file\n" 
 				+ "    --rcfile <file>       (defaults to 'dbmanager.rc' in home dir)\n" 
 				+ "    --dir <path>          default directory\n" 
 				+ "    --script <file>       reads from script file\n" 
 				+ "    --noexit              do not call system.exit()"); 
 				} 
 				
 
 LINES: 		| BaseHashMap.java: 560 - 570 || BaseHashMap.java: 590 - 600 |
 CLONE CLASS: 	return null; 
 				} 
 				} 
 				} else { 
 				if (intValueTable[lookup] == longValue) { 
 				return null; 
 				} 
 				} 
 				multiValue = true; 
 				} 
 				
 
 LINES: 		| StatementCompound.java: 384 - 390 || StatementCompound.java: 508 - 514 || StatementCompound.java: 539 - 545 || StatementCompound.java: 576 - 582 |
 CLONE CLASS: 	break; 
 				} 
 				if (result.getType() == ResultConstants.DATA) { 
 				break; 
 				} 
 				} 
 				
 
 LINES: 		| TestOdbcService.java: 102 - 109 || TestOdbcService.java: 279 - 286 || TestOdbcService.java: 314 - 321 |
 CLONE CLASS: 	assertTrue("Not enough rows fetched", rs.next()); 
 				assertEquals(3, rs.getInt(2)); 
 				assertEquals(40, rs.getInt(1)); 
 				assertEquals("forty", rs.getString(3)); 
 				assertEquals("str", rs.getString(4)); 
 				assertFalse("Too many rows fetched", rs.next()); 
 				rs.close(); 
 				
 
 LINES: 		| IndexAVL.java: 1377 - 1393 || IndexAVL.java: 1409 - 1425 |
 CLONE CLASS: 	if (x == null) { 
 				return x; 
 				} 
 				if (session == null) { 
 				return x; 
 				} 
 				Row row = x.getRow(store); 
 				if (session.database.txManager.canRead( 
 				session, store, row, TransactionManager.ACTION_READ, 
 				null)) { 
 				return x; 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| HsqlNameManager.java: 418 - 426 || HsqlNameManager.java: 437 - 445 |
 CLONE CLASS: 	return statementName; 
 				} 
 				StringBuffer sb = new StringBuffer(); 
 				if (schema != null) { 
 				sb.append(schema.getStatementName()); 
 				sb.append('.'); 
 				} 
 				
 
 LINES: 		| IntValueHashMap.java: 213 - 222 || IntValueHashMap.java: 248 - 257 |
 CLONE CLASS: 	} 
 				public boolean isEmpty() { 
 				return size() == 0; 
 				} 
 				public void clear() { 
 				IntValueHashMap.this.clear(); 
 				} 
 				} 
 				
 
 LINES: 		| BitType.java: 535 - 542 || BinaryType.java: 744 - 751 |
 CLONE CLASS: 	} 
 				} 
 				public Object concat(Session session, Object a, Object b) { 
 				if (a == null || b == null) { 
 				return null; 
 				} 
 				
 
 LINES: 		| JDBCBlobFile.java: 457 - 497 || JDBCClobFile.java: 583 - 611 |
 CLONE CLASS: 	} 
 				public void truncate(long len) throws SQLException { 
 				if (len < 0) { 
 				throw JDBCUtil.invalidArgument("len: " + len); 
 				} 
 				checkClosed(); 
 				
 
 LINES: 		| LongKeyLongValueHashMap.java: 102 - 118 || LongKeyIntValueHashMap.java: 106 - 122 |
 CLONE CLASS: 	int oldSize = size(); 
 				super.addOrRemove(key, value, null, null, false); 
 				return oldSize != size(); 
 				} 
 				public boolean remove(long key) { 
 				int oldSize = size(); 
 				super.addOrRemove(key, 0, null, null, true); 
 				return oldSize != size(); 
 				} 
 				public Set keySet() { 
 				
 
 LINES: 		| IntervalType.java: 721 - 732 || DateTimeType.java: 1053 - 1064 |
 CLONE CLASS: 	} 
 				public int canMoveFrom(Type otherType) { 
 				if (otherType == this) { 
 				return 0; 
 				} 
 				if (typeCode == otherType.typeCode) { 
 				return scale >= otherType.scale ? 0 
 				: -1; 
 				} 
 				
 
 LINES: 		| JdbcAppClass.java: 98 - 107 || SpringExtAuth.java: 130 - 139 || SpringExtAuth.java: 165 - 174 |
 CLONE CLASS: 	} 
 				if (c != null) try { 
 				c.close(); 
 				} catch (SQLException se) { 
 				log.error("Failed to close emulation database setup Connection", 
 				se); 
 				} finally { 
 				c = null; 
 				} 
 				} 
 				
 
 LINES: 		| BinaryData.java: 262 - 269 || BlobDataID.java: 116 - 123 |
 CLONE CLASS: 	return id; 
 				} 
 				public void setId(long id) { 
 				this.id = id; 
 				} 
 				public int getStreamBlockSize() { 
 				
 
 LINES: 		| RowInputText.java: 98 - 111 || RowOutputText.java: 88 - 101 |
 CLONE CLASS: 	if (fieldSep.endsWith("\n")) { 
 				fieldSepEnd = true; 
 				fieldSep    = fieldSep.substring(0, fieldSep.length() - 1); 
 				} 
 				if (varSep.endsWith("\n")) { 
 				varSepEnd = true; 
 				varSep    = varSep.substring(0, varSep.length() - 1); 
 				} 
 				if (longvarSep.endsWith("\n")) { 
 				longvarSepEnd = true; 
 				longvarSep    = longvarSep.substring(0, longvarSep.length() - 1); 
 				} 
 				
 
 LINES: 		| TestAllTypes.java: 83 - 90 || TestCacheSize.java: 158 - 165 |
 CLONE CLASS: 	user     = "sa"; 
 				password = ""; 
 				try { 
 				sStatement  = null; 
 				cConnection = null; 
 				Class.forName("org.hsqldb.jdbc.JDBCDriver"); 
 				
 
 LINES: 		| JDBCBench.java: 616 - 626 || JDBCBench.java: 649 - 659 |
 CLONE CLASS: 	Stmt.executeUpdate(Query); 
 				} 
 				if ((i % 100 == 0) && (transactions)) { 
 				Conn.commit(); 
 				} 
 				} 
 				if (prepared_stmt) { 
 				pstmt.close(); 
 				} 
 				
 
 LINES: 		| LobManager.java: 2050 - 2059 || LobManager.java: 2084 - 2093 |
 CLONE CLASS: 	} 
 				} 
 				if (aParts.length == bParts.length) { 
 				return 0; 
 				} 
 				return aParts.length > bParts.length ? 1 
 				: -1; 
 				} 
 				
 
 LINES: 		| TestOdbcTypes.java: 1522 - 1528 || TestOdbcTypes.java: 1574 - 1580 |
 CLONE CLASS: 	ps.setInt(1, 3); 
 				ps.setBytes(2, expectedBytes); 
 				assertEquals(1, ps.executeUpdate()); 
 				ps.setInt(1, 4); 
 				assertEquals(1, ps.executeUpdate()); 
 				ps.close(); 
 				netConn.commit(); 
 				
 
 LINES: 		| ExpressionLogical.java: 582 - 588 || ExpressionLogical.java: 818 - 824 |
 CLONE CLASS: 	break; 
 				case OpTypes.MATCH_SIMPLE : 
 				case OpTypes.MATCH_PARTIAL : 
 				case OpTypes.MATCH_FULL : 
 				case OpTypes.MATCH_UNIQUE_SIMPLE : 
 				case OpTypes.MATCH_UNIQUE_PARTIAL : 
 				
 
 LINES: 		| ServerConnection.java: 845 - 858 || ServerConnection.java: 1361 - 1374 |
 CLONE CLASS: 	if (rowData[i] == null) { 
 				outPacket.writeInt(-1); 
 				} else { 
 				dataString = 
 				pgTypes[i].valueString(rowData[i]); 
 				outPacket.writeSized(dataString); 
 				if (server.isTrace()) { 
 				server.printWithThread( 
 				
 
 LINES: 		| Scanner.java: 1134 - 1141 || Scanner.java: 1149 - 1156 |
 CLONE CLASS: 	} catch (Exception e2) { 
 				token.tokenType   = Tokens.X_MALFORMED_NUMERIC; 
 				token.isMalformed = true; 
 				return; 
 				} 
 				return; 
 				
 
 LINES: 		| ExpressionLogical.java: 1083 - 1090 || HsqlProperties.java: 545 - 552 |
 CLONE CLASS: 	} 
 				} 
 				return true; 
 				} 
 				return false; 
 				} 
 				
 
 LINES: 		| TestHashStructures.java: 63 - 72 || TestHashStructures.java: 143 - 148 || TestHashStructures.java: 149 - 154 |
 CLONE CLASS: 	compareByUIterator(uMap, hMap); 
 				compareByHIterator(uMap, hMap); 
 				populateByRandomIntKeys(uMap, hMap, testSize); 
 				compareByUIterator(uMap, hMap); 
 				compareByHIterator(uMap, hMap); 
 				depopulateRandomly(uMap, hMap, 20); 
 				
 
 LINES: 		| ExpressionLogical.java: 158 - 164 || ExpressionLogical.java: 831 - 837 |
 CLONE CLASS: 	break; 
 				default : 
 				throw Error.runtimeError(ErrorCode.U_S0500, 
 				"ExpressionLogical"); 
 				} 
 				} 
 				
 
 LINES: 		| TestLobs.java: 183 - 195 || TestLobs.java: 238 - 250 |
 CLONE CLASS: 	if (baOut.length != baR1.length) { 
 				assertTrue("Expected array len " + baR1.length + ", got len " 
 				+ baOut.length, false); 
 				} 
 				for (int i = 0; i < baOut.length; i++) { 
 				if (baOut[i] != baR1[i]) { 
 				assertTrue("Expected array len " + baR1.length 
 				+ ", got len " + baOut.length, false); 
 				} 
 				} 
 				rs.close(); 
 				
 
 LINES: 		| Log.java: 615 - 621 || Log.java: 628 - 634 |
 CLONE CLASS: 	throw Error.error(ErrorCode.FILE_IO_ERROR, logFileName); 
 				} 
 				if (maxLogSize > 0 && dbLogWriter.size() > maxLogSize) { 
 				database.logger.setCheckpointRequired(); 
 				} 
 				} 
 				
 
 LINES: 		| TestBench.java: 727 - 741 || JDBCBench.java: 816 - 830 |
 CLONE CLASS: 	rs.close(); 
 				rs = st1.executeQuery("select sum(delta) from history"); 
 				rs.next(); 
 				deltasum = rs.getInt(1); 
 				rs.close(); 
 				rs = null; 
 				st1.close(); 
 				st1 = null; 
 				
 
 LINES: 		| TransactionManagerMVCC.java: 702 - 712 || TransactionManagerMV2PL.java: 472 - 482 |
 CLONE CLASS: 	} 
 				} finally { 
 				writeLock.unlock(); 
 				} 
 				} 
 				public void beginAction(Session session, Statement cs) { 
 				
 
 LINES: 		| TestUtil.java: 1048 - 1061 || TestUtil.java: 1134 - 1147 || TestUtil.java: 1356 - 1369 |
 CLONE CLASS: 	} 
 				for (int i = 0; i < lines.length; i++) { 
 				if (i > 0) { 
 				sb.append(LS); 
 				} 
 				sb.append("+ " + lines[i]); 
 				} 
 				TestUtil.expandStamps(sb); 
 				return sb.toString().trim(); 
 				} 
 				
 
 LINES: 		| DataFileCache.java: 975 - 983 || DataFileCache.java: 1003 - 1011 || DataFileCache.java: 1030 - 1038 |
 CLONE CLASS: 	if (keep) { 
 				object.keepInMemory(true); 
 				} 
 				return object; 
 				} 
 				} finally { 
 				readLock.unlock(); 
 				} 
 				
 
 LINES: 		| ParserCommand.java: 431 - 454 || ParserCommand.java: 726 - 749 |
 CLONE CLASS: 	readThis(Tokens.TYPE); 
 				int type = TableBase.MEMORY_TABLE; 
 				switch (token.tokenType) { 
 				case Tokens.MEMORY : 
 				break; 
 				case Tokens.CACHED : 
 				type = TableBase.CACHED_TABLE; 
 				break; 
 				default : 
 				throw unexpectedToken(); 
 				} 
 				read(); 
 				Object[] args = new Object[]{ ValuePool.getInt(type) }; 
 				return new StatementCommand( 
 				StatementTypes.SET_DATABASE_DEFAULT_TABLE_TYPE, args); 
 				} 
 				
 
 LINES: 		| DatabaseManagerSwing.java: 2650 - 2657 || DatabaseManagerSwing.java: 2859 - 2866 |
 CLONE CLASS: 	CommonSwing.errorMessage(se); 
 				} finally { 
 				if (result != null) { 
 				try { 
 				result.close(); 
 				} catch (SQLException se) {} 
 				} 
 				} 
 				
 
 LINES: 		| OrderedIntKeyHashMap.java: 96 - 107 || HashMap.java: 94 - 105 || IntKeyHashMap.java: 81 - 92 |
 CLONE CLASS: 	} 
 				public void valuesToArray(Object[] array) { 
 				Iterator it = values().iterator(); 
 				int      i  = 0; 
 				while (it.hasNext()) { 
 				array[i] = it.next(); 
 				i++; 
 				} 
 				
 
 LINES: 		| SchemaObjectSet.java: 92 - 100 || SchemaObjectSet.java: 123 - 131 |
 CLONE CLASS: 	case SchemaObject.CHARSET : 
 				case SchemaObject.DOMAIN : 
 				case SchemaObject.TYPE : 
 				case SchemaObject.COLLATION : 
 				case SchemaObject.PROCEDURE : 
 				case SchemaObject.SPECIFIC_ROUTINE : 
 				case SchemaObject.FUNCTION : 
 				case SchemaObject.ASSERTION : 
 				case SchemaObject.TRIGGER : 
 				
 
 LINES: 		| TestCacheSize.java: 776 - 786 || TestCacheSize.java: 822 - 832 |
 CLONE CLASS: 	System.out.println("error : " + random); 
 				e.printStackTrace(); 
 				} 
 				long time = sw.elapsedTime(); 
 				long rate = (i * 1000) / (time + 1); 
 				storeResult("update with random id", i, time, rate); 
 				System.out.println("update time with random id " + i + " rows  -- " 
 				+ time + " ms -- " + rate + " tps"); 
 				} 
 				
 
 LINES: 		| Constraint.java: 264 - 271 || TriggerDef.java: 217 - 224 || NumberSequence.java: 160 - 167 || Charset.java: 173 - 180 || IndexAVL.java: 236 - 243 |
 CLONE CLASS: 	return name.schema.schema; 
 				} 
 				public HsqlName getSchemaName() { 
 				return name.schema; 
 				} 
 				public Grantee getOwner() { 
 				
 
 LINES: 		| ParserRoutine.java: 1369 - 1379 || ParserRoutine.java: 1749 - 1759 || ParserRoutine.java: 1791 - 1801 || ParserRoutine.java: 1823 - 1833 || ParserRoutine.java: 1875 - 1885 |
 CLONE CLASS: 	if (isSimpleName() && !isReservedKey()) { 
 				if (label == null) { 
 				throw unexpectedToken(); 
 				} 
 				if (!label.name.equals(token.tokenString)) { 
 				throw Error.error(ErrorCode.X_42508, token.tokenString); 
 				} 
 				read(); 
 				} 
 				
 
 LINES: 		| ParserDML.java: 683 - 693 || ParserDML.java: 726 - 736 |
 CLONE CLASS: 	if (enforcedDefaultIndex == columnMap[i]) { 
 				if (e.getType() != OpTypes.DEFAULT) { 
 				throw Error.error(ErrorCode.X_42541); 
 				} 
 				} 
 				if (e.isUnresolvedParam()) { 
 				e.setAttributesAsColumn( 
 				targetTable.getColumn(columnMap[i]), true); 
 				} else if (e.getType() == OpTypes.DEFAULT) { 
 				if (targetTable.colDefaults[columnMap[i]] == null 
 				
 
 LINES: 		| DatabaseInformationFull.java: 5691 - 5698 || DatabaseInformationFull.java: 8341 - 8348 |
 CLONE CLASS: 	if (refName.type != SchemaObject.TABLE 
 				&& refName.type != SchemaObject.VIEW) { 
 				continue; 
 				} 
 				if (!session.getGrantee().isFullyAccessibleByRole(refName)) { 
 				continue; 
 				} 
 				
 
 LINES: 		| DatabaseManager.java: 604 - 612 || DatabaseManager.java: 631 - 639 || DatabaseManager.java: 670 - 678 |
 CLONE CLASS: 	if (defDirectory != null) { 
 				f.setDirectory(defDirectory); 
 				} 
 				f.show(); 
 				String file = f.getFile(); 
 				if (file != null) { 
 				
 
 LINES: 		| ParserRoutine.java: 32 - 38 || RoutineSchema.java: 32 - 38 |
 CLONE CLASS: 	package org.hsqldb; 
 				import org.hsqldb.HsqlNameManager.HsqlName; 
 				import org.hsqldb.error.Error; 
 				import org.hsqldb.error.ErrorCode; 
 				import org.hsqldb.lib.ArrayUtil; 
 				import org.hsqldb.lib.HsqlArrayList; 
 				
 
 LINES: 		| TimestampData.java: 101 - 114 || TimeData.java: 95 - 108 |
 CLONE CLASS: 	long diff = seconds - b.seconds; 
 				if (diff == 0) { 
 				diff = nanos - b.nanos; 
 				if (diff == 0) { 
 				return 0; 
 				} 
 				} 
 				return diff > 0 ? 1 
 				: -1; 
 				} 
 				} 
 				
 
 LINES: 		| DataFileCache.java: 1054 - 1062 || DataFileCache.java: 1125 - 1133 |
 CLONE CLASS: 	if (keep) { 
 				object.keepInMemory(true); 
 				} 
 				return object; 
 				} 
 				for (int j = 0; j < 2; j++) { 
 				try { 
 				
 
 LINES: 		| BooleanType.java: 146 - 155 || BooleanType.java: 211 - 220 |
 CLONE CLASS: 	Type otherType) { 
 				if (a == null) { 
 				return a; 
 				} 
 				switch (otherType.typeCode) { 
 				case Types.SQL_BOOLEAN : 
 				return a; 
 				
 
 LINES: 		| ParserDDL.java: 2568 - 2574 || ParserDDL.java: 2674 - 2680 |
 CLONE CLASS: 	read(); 
 				if (token.tokenType == Tokens.BY) { 
 				read(); 
 				readThis(Tokens.DEFAULT); 
 				} else { 
 				readThis(Tokens.ALWAYS); 
 				
 
 LINES: 		| RAFileInJar.java: 121 - 127 || RAFileInJar.java: 146 - 152 || RAFileInJar.java: 163 - 169 |
 CLONE CLASS: 	if (bufferDirty || seekPosition < bufferOffset 
 				|| seekPosition >= bufferOffset + buffer.length) { 
 				readIntoBuffer(); 
 				} 
 				ba.reset(); 
 				ba.skip(seekPosition - bufferOffset); 
 				
 
 LINES: 		| RowSetNavigatorData.java: 575 - 601 || RowSetNavigatorDataTable.java: 573 - 599 |
 CLONE CLASS: 	} 
 				boolean hasNull(Object[] data) { 
 				for (int i = 0; i < visibleColumnCount; i++) { 
 				if (data[i] == null) { 
 				return true; 
 				} 
 				} 
 				return false; 
 				} 
 				public Object[] getGroupData(Object[] data) { 
 				if (isSimpleAggregate) { 
 				if (simpleAggregateData == null) { 
 				simpleAggregateData = data; 
 				return null; 
 				} 
 				return simpleAggregateData; 
 				} 
 				
 
 LINES: 		| JDBCStatement.java: 1094 - 1119 || JDBCPreparedStatement.java: 1921 - 1946 |
 CLONE CLASS: 	throw JDBCUtil.sqlException(resultIn); 
 				} 
 				RowSetNavigator navigator    = resultIn.getNavigator(); 
 				int[]           updateCounts = new int[navigator.getSize()]; 
 				for (int i = 0; i < updateCounts.length; i++) { 
 				Object[] data = (Object[]) navigator.getNext(); 
 				updateCounts[i] = ((Integer) data[0]).intValue(); 
 				} 
 				if (updateCounts.length != batchCount) { 
 				if (errorResult == null) { 
 				throw new BatchUpdateException(updateCounts); 
 				} else { 
 				errorResult.getMainString(); 
 				throw new BatchUpdateException(errorResult.getMainString(), 
 				errorResult.getSubString(), 
 				errorResult.getErrorCode(), updateCounts); 
 				} 
 				} 
 				return updateCounts; 
 				} 
 				
 
 LINES: 		| DatabaseInformationMain.java: 2976 - 2992 || DatabaseInformationMain.java: 3400 - 3416 |
 CLONE CLASS: 	tableSchema  = table.getSchemaName().name; 
 				for (int i = 0; i < grantees.size(); i++) { 
 				granteeObject = (Grantee) grantees.get(i); 
 				OrderedHashSet rights = 
 				granteeObject.getAllDirectPrivileges(table); 
 				OrderedHashSet grants = 
 				granteeObject.getAllGrantedPrivileges(table); 
 				if (!grants.isEmpty()) { 
 				grants.addAll(rights); 
 				rights = grants; 
 				} 
 				for (int j = 0; j < rights.size(); j++) { 
 				
 
 LINES: 		| TestCacheSize.java: 710 - 716 || TestCacheSize.java: 750 - 756 || TestCacheSize.java: 792 - 798 || TestCacheSize.java: 838 - 844 |
 CLONE CLASS: 	int              i         = 0; 
 				boolean          slow      = false; 
 				int              count     = 0; 
 				int              random    = 0; 
 				try { 
 				PreparedStatement ps = cConnection.prepareStatement( 
 				
 
 LINES: 		| RAFileNIO.java: 208 - 214 || RAFileNIO.java: 274 - 280 |
 CLONE CLASS: 	while (true) { 
 				long transferLength = bufferPosition + bufferLength 
 				- currentPosition; 
 				if (transferLength > length) { 
 				transferLength = length; 
 				} 
 				
 
 LINES: 		| NumberSequence.java: 686 - 692 || NumberSequence.java: 697 - 703 |
 CLONE CLASS: 	} else { 
 				limitReached = true; 
 				nextValue    = minValue; 
 				} 
 				} else { 
 				nextValue = currValue + increment; 
 				} 
 				
 
 LINES: 		| ArrayUtil.java: 882 - 889 || ArrayUtil.java: 916 - 923 |
 CLONE CLASS: 	byte[] arrb) { 
 				int k = 0; 
 				mainloop: 
 				for (int i = start; i < arra.length; i++) { 
 				for (int j = 0; j < arrb.length; j++) { 
 				if (arra[i] == arrb[j]) { 
 				
 
 LINES: 		| DatabaseInformationFull.java: 5587 - 5595 || DatabaseInformationFull.java: 7062 - 7070 |
 CLONE CLASS: 	row[sequence_catalog] = database.getCatalogName().name; 
 				row[sequence_schema]  = refName.schema.name; 
 				row[sequence_name]    = refName.name; 
 				try { 
 				t.insertSys(session, store, row); 
 				} catch (HsqlException e) {} 
 				} 
 				} 
 				
 
 LINES: 		| StatementExpression.java: 92 - 100 || StatementSet.java: 126 - 134 || StatementProcedure.java: 287 - 295 |
 CLONE CLASS: 	} 
 				TableDerived[] getSubqueries(Session session) { 
 				OrderedHashSet subQueries = null; 
 				if (expression != null) { 
 				subQueries = expression.collectAllSubqueries(subQueries); 
 				} 
 				
 
 LINES: 		| DatabaseInformationMain.java: 930 - 938 || DatabaseInformationMain.java: 2347 - 2354 |
 CLONE CLASS: 	while (tables.hasNext()) { 
 				table = (Table) tables.next(); 
 				if (!isAccessibleTable(session, table)) { 
 				continue; 
 				} 
 				ti.setTable(table); 
 				
 
 LINES: 		| ExpressionLogical.java: 2045 - 2051 || ArrayUtil.java: 431 - 437 || ArrayUtil.java: 1529 - 1535 || BaseHashMap.java: 1418 - 1424 || Expression.java: 1909 - 1915 || ExpressionColumn.java: 1105 - 1111 || RangeVariable.java: 1772 - 1778 || RangeVariable.java: 1802 - 1808 |
 CLONE CLASS: 	return true; 
 				} 
 				} 
 				} 
 				return false; 
 				} 
 				
 
 LINES: 		| OrderedIntHashSet.java: 153 - 161 || OrderedLongHashSet.java: 153 - 161 || OrderedHashSet.java: 195 - 203 || HashMappedList.java: 231 - 239 |
 CLONE CLASS: 	} 
 				private void checkRange(int i) { 
 				if (i < 0 || i >= size()) { 
 				throw new IndexOutOfBoundsException(); 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| StatementCompound.java: 383 - 389 || StatementCompound.java: 507 - 513 || StatementCompound.java: 575 - 581 |
 CLONE CLASS: 	if (result.getType() == ResultConstants.VALUE) { 
 				break; 
 				} 
 				if (result.getType() == ResultConstants.DATA) { 
 				break; 
 				} 
 				
 
 LINES: 		| TestDbBackup.java: 36 - 41 || TestSubselect.java: 34 - 39 |
 CLONE CLASS: 	import java.io.IOException; 
 				import java.sql.Connection; 
 				import java.sql.DriverManager; 
 				import java.sql.ResultSet; 
 				import java.sql.SQLException; 
 				import java.sql.Statement; 
 				
 
 LINES: 		| HSQLDialect.java: 358 - 385 || HSQLDialect.java: 338 - 365 |
 CLONE CLASS: 	public String extractConstraintName(SQLException sqle) { 
 				String constraintName = null; 
 				int errorCode = JDBCExceptionHelper.extractErrorCode( sqle ); 
 				if ( errorCode == -8 ) { 
 				constraintName = extractUsingTemplate( 
 				"; ", " table: ", sqle.getMessage() 
 				); 
 				} 
 				else if ( errorCode == -9 ) { 
 				constraintName = extractUsingTemplate( 
 				"; ", " table: ", sqle.getMessage() 
 				); 
 				} 
 				else if ( errorCode == -104 ) { 
 				constraintName = extractUsingTemplate( 
 				"; ", " table: ", sqle.getMessage() 
 				); 
 				} 
 				else if ( errorCode == -177 ) { 
 				constraintName = extractUsingTemplate( 
 				"; ", " table: ", sqle.getMessage() 
 				); 
 				} 
 				return constraintName; 
 				} 
 				}; 
 				
 
 LINES: 		| Row.java: 160 - 168 || NodeAVL.java: 231 - 239 |
 CLONE CLASS: 	public int getDefaultCapacity() { 
 				return 0; 
 				} 
 				public void read(RowInputInterface in) {} 
 				public void write(RowOutputInterface out) {} 
 				public void write(RowOutputInterface out, LongLookup lookup) {} 
 				
 
 LINES: 		| LongKeyLongValueHashMap.java: 140 - 148 || LongKeyLongValueHashMap.java: 179 - 187 |
 CLONE CLASS: 	} 
 				public int size() { 
 				return LongKeyLongValueHashMap.this.size(); 
 				} 
 				public boolean contains(Object o) { 
 				throw new RuntimeException(); 
 				} 
 				
 
 LINES: 		| BinaryType.java: 129 - 136 || BlobType.java: 109 - 116 |
 CLONE CLASS: 	sb.append(')'); 
 				return sb.toString(); 
 				} 
 				public boolean isBinaryType() { 
 				return true; 
 				} 
 				
 
 LINES: 		| TransactionManagerCommon.java: 581 - 587 || TransactionManagerMVCC.java: 921 - 927 |
 CLONE CLASS: 	if (cs == null) { 
 				return true; 
 				} 
 				if (session.abortTransaction) { 
 				return false; 
 				} 
 				
 
 LINES: 		| JDBCBench.java: 625 - 632 || JDBCBench.java: 658 - 665 |
 CLONE CLASS: 	pstmt.close(); 
 				} 
 				if (transactions) { 
 				Conn.commit(); 
 				} 
 				if (prepared_stmt) { 
 				
 
 LINES: 		| DatabaseInformationFull.java: 8207 - 8216 || DatabaseInformationFull.java: 8325 - 8334 |
 CLONE CLASS: 	tables = 
 				database.schemaManager.databaseObjectIterator(SchemaObject.TABLE); 
 				while (tables.hasNext()) { 
 				table = (Table) tables.next(); 
 				if (!table.isView()) { 
 				continue; 
 				} 
 				
 
 LINES: 		| TestBench.java: 778 - 796 || TestBench.java: 949 - 967 |
 CLONE CLASS: 	Conn   = connect(url, user, password); 
 				if (Conn == null) { 
 				return; 
 				} 
 				try { 
 				Conn.setAutoCommit(false); 
 				Conn.setTransactionIsolation(transactionMode); 
 				prepareStatements(); 
 				} catch (Exception E) { 
 				System.out.println(E.getMessage()); 
 				E.printStackTrace(); 
 				} 
 				} 
 				void prepareStatements() throws SQLException { 
 				String Query; 
 				
 
 LINES: 		| TestBench.java: 393 - 407 || JDBCBench.java: 415 - 429 |
 CLONE CLASS: 	Stmt.close(); 
 				if (accountsnb == (naccounts * tps)) { 
 				System.out.println("Already initialized"); 
 				connectClose(Conn); 
 				return; 
 				} 
 				} catch (Exception E) {} 
 				System.out.println("Drop old tables if they exist"); 
 				try { 
 				Statement Stmt = Conn.createStatement(); 
 				String    Query; 
 				
 
 LINES: 		| TestLobs.java: 260 - 271 || TestLobs.java: 665 - 676 || TestLobs.java: 740 - 751 |
 CLONE CLASS: 	System.out.println("Starting (sub-)test: " + getName()); 
 				try { 
 				String ddl0 = "DROP TABLE CLOBTEST IF EXISTS"; 
 				String ddl1 = 
 				"CREATE TABLE CLOBTEST(ID IDENTITY, CLOBFIELD CLOB(100000))"; 
 				statement.execute(ddl0); 
 				statement.execute(ddl1); 
 				} catch (SQLException e) {} 
 				try { 
 				
 
 LINES: 		| TestBench.java: 699 - 717 || JDBCBench.java: 790 - 808 |
 CLONE CLASS: 	int       deltasum; 
 				try { 
 				st1 = conn.createStatement(); 
 				rs  = st1.executeQuery("select sum(bbalance) from branches"); 
 				rs.next(); 
 				bbalancesum = rs.getInt(1); 
 				rs.close(); 
 				rs = st1.executeQuery("select sum(tbalance) from tellers"); 
 				rs.next(); 
 				tbalancesum = rs.getInt(1); 
 				rs.close(); 
 				
 
 LINES: 		| NumberType.java: 148 - 160 || NumberType.java: 1735 - 1747 |
 CLONE CLASS: 	case Types.SQL_REAL : 
 				case Types.SQL_FLOAT : 
 				case Types.SQL_DOUBLE : 
 				return 64; 
 				case Types.SQL_NUMERIC : 
 				case Types.SQL_DECIMAL : 
 				return (int) precision; 
 				default : 
 				throw Error.runtimeError(ErrorCode.U_S0500, "NumberType"); 
 				} 
 				} 
 				
 
 LINES: 		| NumberType.java: 1423 - 1430 || NumberType.java: 1473 - 1480 || NumberType.java: 1521 - 1528 || NumberType.java: 1572 - 1579 || NumberType.java: 1662 - 1669 || NumberType.java: 1890 - 1897 || NumberType.java: 1921 - 1928 |
 CLONE CLASS: 	return null; 
 				} 
 				switch (typeCode) { 
 				case Types.SQL_REAL : 
 				case Types.SQL_FLOAT : 
 				case Types.SQL_DOUBLE : { 
 				
 
 LINES: 		| RowAVLDisk.java: 285 - 295 || CachedObjectBase.java: 93 - 103 |
 CLONE CLASS: 	if (!isInMemory) { 
 				return false; 
 				} 
 				if (keep) { 
 				keepCount++; 
 				} else { 
 				keepCount--; 
 				if (keepCount < 0) { 
 				throw Error.runtimeError(ErrorCode.U_S0500, 
 				
 
 LINES: 		| FunctionCustom.java: 1568 - 1573 || FunctionCustom.java: 2825 - 2830 |
 CLONE CLASS: 	} 
 				case FUNC_BITAND : 
 				case FUNC_BITANDNOT : 
 				case FUNC_BITNOT : 
 				case FUNC_BITOR : 
 				case FUNC_BITXOR : { 
 				
 
 LINES: 		| ConnectionDialog.java: 159 - 165 || ConnectionDialogSwing.java: 359 - 365 |
 CLONE CLASS: 	if (setting != null) { 
 				mName.setText(setting.getName()); 
 				mDriver.setText(setting.getDriver()); 
 				mURL.setText(setting.getUrl()); 
 				mUser.setText(setting.getUser()); 
 				mPassword.setText(setting.getPassword()); 
 				} 
 				
 
 LINES: 		| Collation.java: 533 - 540 || Constraint.java: 378 - 385 || NumberSequence.java: 266 - 273 || Charset.java: 219 - 226 |
 CLONE CLASS: 	} 
 				return sb.toString(); 
 				} 
 				public long getChangeTimestamp() { 
 				return 0; 
 				} 
 				
 
 LINES: 		| ParserDQL.java: 3394 - 3400 || ParserDQL.java: 3425 - 3431 |
 CLONE CLASS: 	switch (token.tokenType) { 
 				case Tokens.CURRENT_DATE : 
 				case Tokens.CURRENT_TIME : 
 				case Tokens.CURRENT_TIMESTAMP : 
 				case Tokens.LOCALTIME : 
 				case Tokens.LOCALTIMESTAMP : 
 				
 
 LINES: 		| IntKeyIntValueHashMap.java: 133 - 141 || IntKeyIntValueHashMap.java: 172 - 180 |
 CLONE CLASS: 	} 
 				public int size() { 
 				return IntKeyIntValueHashMap.this.size(); 
 				} 
 				public boolean contains(Object o) { 
 				throw new RuntimeException(); 
 				} 
 				
 
 LINES: 		| Table.java: 1341 - 1347 || Table.java: 1471 - 1477 |
 CLONE CLASS: 	HsqlName name = c.getName(); 
 				throw Error.error(ErrorCode.X_42533, 
 				name.getSchemaQualifiedStatementName()); 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| StatementDMQL.java: 639 - 645 || StatementDMQL.java: 679 - 685 |
 CLONE CLASS: 	appendColumns(sb, updateColumnMap).append('\n'); 
 				appendTable(sb).append('\n'); 
 				appendCondition(session, sb); 
 				for (int i = 0; i < targetRangeVariables.length; i++) { 
 				sb.append(targetRangeVariables[i].describe(session, 
 				blanks)).append('\n'); 
 				
 
 LINES: 		| SqlFile.java: 3331 - 3339 || SqlFile.java: 3433 - 3441 |
 CLONE CLASS: 	+ ((matcher.group(1).length() > 0) 
 				? matcher.group(1) 
 				: getCurrentSchema()) + "'"; 
 				} 
 				} 
 				statement = shared.jdbcConn.createStatement(); 
 				statement.execute( 
 				
 
 LINES: 		| TestBug785429.java: 32 - 40 || TestINPredicateParameterizationAndCorrelation.java: 32 - 40 || TestLikePredicateOptimizations.java: 32 - 40 |
 CLONE CLASS: 	package org.hsqldb.test; 
 				import java.sql.Connection; 
 				import java.sql.PreparedStatement; 
 				import java.sql.ResultSet; 
 				import java.sql.Statement; 
 				import junit.framework.TestCase; 
 				import junit.framework.TestResult; 
 				
 
 LINES: 		| ValuePoolHashMap.java: 132 - 140 || ValuePoolHashMap.java: 174 - 182 || ValuePoolHashMap.java: 233 - 241 || ValuePoolHashMap.java: 278 - 286 || ValuePoolHashMap.java: 321 - 329 || ValuePoolHashMap.java: 363 - 371 |
 CLONE CLASS: 	objectKeyTable[lookup] = testValue; 
 				if (accessCount > ACCESS_MAX) { 
 				resetAccessCount(); 
 				} 
 				accessTable[lookup] = accessCount++; 
 				return testValue; 
 				
 
 LINES: 		| IndexAVL.java: 709 - 716 || IndexAVL.java: 724 - 734 |
 CLONE CLASS: 	return i; 
 				} 
 				} 
 				return 0; 
 				} 
 				public int compareRowNonUnique(Session session, Object[] a, Object[] b, 
 				
 
 LINES: 		| ServerConnection.java: 1038 - 1045 || ServerConnection.java: 1400 - 1407 |
 CLONE CLASS: 	c      = inPacket.readByteChar(); 
 				handle = inPacket.readString(); 
 				odbcPs = null; 
 				portal = null; 
 				if (c == 'S') { 
 				odbcPs = (OdbcPreparedStatement) sessionOdbcPsMap.get( 
 				handle); 
 				
 
 LINES: 		| IndexAVLMemory.java: 462 - 469 || IndexAVL.java: 1506 - 1513 |
 CLONE CLASS: 	return x; 
 				} 
 				NodeAVL last(PersistentStore store, NodeAVL x) { 
 				if (x == null) { 
 				return null; 
 				} 
 				
 
 LINES: 		| RowSetNavigatorData.java: 420 - 428 || RowSetNavigatorDataTable.java: 433 - 441 |
 CLONE CLASS: 	} 
 				public void except(Session session, RowSetNavigatorData other) { 
 				removeDuplicates(session); 
 				other.sortFull(session); 
 				while (hasNext()) { 
 				Object[] currentData = getNext(); 
 				
 
 LINES: 		| HsqlDeque.java: 168 - 174 || LongDeque.java: 125 - 131 |
 CLONE CLASS: 	elementCount--; 
 				if (elementCount == 0) { 
 				firstindex = endindex = 0; 
 				} else if (endindex == 0) { 
 				endindex = list.length; 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 1347 - 1354 || DatabaseInformationFull.java: 8450 - 8457 || DatabaseInformationMain.java: 3506 - 3513 |
 CLONE CLASS: 	if (!isAccessibleTable(session, table)) { 
 				continue; 
 				} 
 				row                = t.getEmptyRowData(); 
 				row[table_catalog] = database.getCatalogName().name; 
 				row[table_schema]  = table.getSchemaName().name; 
 				row[table_name]    = table.getName().name; 
 				
 
 LINES: 		| HashMap.java: 178 - 187 || HashMap.java: 213 - 222 |
 CLONE CLASS: 	} 
 				public boolean isEmpty() { 
 				return size() == 0; 
 				} 
 				public void clear() { 
 				HashMap.this.clear(); 
 				} 
 				} 
 				
 
 LINES: 		| CharacterType.java: 862 - 868 || CharacterType.java: 884 - 890 |
 CLONE CLASS: 	if (data == null) { 
 				return null; 
 				} 
 				if (typeCode == Types.SQL_CLOB) { 
 				String result = ((ClobData) data).getSubString(session, 0, 
 				(int) ((ClobData) data).length(session)); 
 				
 
 LINES: 		| ParserDDL.java: 2891 - 2898 || ParserDDL.java: 4265 - 4272 |
 CLONE CLASS: 	} 
 				if (end) { 
 				break; 
 				} 
 				} 
 				sequence.checkValues(); 
 				
 
 LINES: 		| NumberType.java: 897 - 905 || NumberType.java: 999 - 1007 |
 CLONE CLASS: 	case Types.SQL_BIGINT : 
 				return convertToLong(session, a); 
 				case Types.SQL_REAL : 
 				case Types.SQL_FLOAT : 
 				case Types.SQL_DOUBLE : 
 				return convertToDouble(a); 
 				case Types.SQL_NUMERIC : 
 				
 
 LINES: 		| IntValueHashMap.java: 127 - 149 || LongValueHashMap.java: 126 - 148 |
 CLONE CLASS: 	if (key == null) { 
 				throw new NoSuchElementException(); 
 				} 
 				int oldSize = size(); 
 				super.addOrRemove(0, value, key, null, false); 
 				return oldSize != size(); 
 				} 
 				public boolean remove(Object key) { 
 				int oldSize = size(); 
 				super.addOrRemove(0, 0, key, null, true); 
 				return oldSize != size(); 
 				} 
 				public boolean containsKey(Object key) { 
 				return super.containsKey(key); 
 				} 
 				
 
 LINES: 		| TestBench.java: 812 - 846 || TestBench.java: 971 - 990 |
 CLONE CLASS: 	} 
 				public void run() { 
 				int count = ntrans; 
 				while (count-- > 0) { 
 				int account = TestBench.getRandomID(ACCOUNT); 
 				int branch  = TestBench.getRandomID(BRANCH); 
 				int teller  = TestBench.getRandomID(TELLER); 
 				int delta   = TestBench.getRandomInt(-1000, 1000); 
 				doOne(branch, teller, account, delta); 
 				incrementTransactionCount(); 
 				} 
 				try { 
 				if (pstmt1 != null) { 
 				pstmt1.close(); 
 				} 
 				
 
 LINES: 		| FunctionCustom.java: 2644 - 2649 || FunctionCustom.java: 2694 - 2699 |
 CLONE CLASS: 	|| argType.typeCode 
 				== Types.SQL_TIMESTAMP_WITH_TIME_ZONE) {} 
 				else if (argType.isNumberType()) {} 
 				else { 
 				throw Error.error(ErrorCode.X_42561); 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 4339 - 4344 || DatabaseInformationMain.java: 1676 - 1681 |
 CLONE CLASS: 	int           columnCount; 
 				Iterator      routines; 
 				RoutineSchema routineSchema; 
 				Routine       routine; 
 				Object[]      row; 
 				Type          type; 
 				
 
 LINES: 		| ParserRoutine.java: 949 - 956 || ParserRoutine.java: 962 - 969 |
 CLONE CLASS: 	if (routine.getType() == SchemaObject.FUNCTION 
 				|| !set.add(Tokens.SAVEPOINT)) { 
 				throw unexpectedToken(); 
 				} 
 				read(); 
 				readThis(Tokens.SAVEPOINT); 
 				readThis(Tokens.LEVEL); 
 				
 
 LINES: 		| CharacterType.java: 739 - 744 || BinaryType.java: 573 - 578 |
 CLONE CLASS: 	: -1; 
 				} 
 				default : 
 				return -1; 
 				} 
 				} 
 				
 
 LINES: 		| TestINPredicateParameterizationAndCorrelation.java: 52 - 61 || TestLikePredicateOptimizations.java: 52 - 61 |
 CLONE CLASS: 	super(name); 
 				} 
 				public void test() throws Exception { 
 				Connection        conn = newConnection(); 
 				Statement         stmt = conn.createStatement(); 
 				PreparedStatement pstmt; 
 				ResultSet         rs; 
 				
 
 LINES: 		| DatabaseInformationFull.java: 5688 - 5694 || DatabaseInformationFull.java: 7161 - 7167 |
 CLONE CLASS: 	for (int i = 0; i < set.size(); i++) { 
 				HsqlName refName = (HsqlName) set.get(i); 
 				if (refName.type != SchemaObject.TABLE 
 				&& refName.type != SchemaObject.VIEW) { 
 				continue; 
 				} 
 				
 
 LINES: 		| ParserDML.java: 1157 - 1166 || ParserDQL.java: 5240 - 5249 |
 CLONE CLASS: 	Expression e = XreadValueExpression(); 
 				list.add(e); 
 				if (token.tokenType == Tokens.COMMA) { 
 				read(); 
 				} else { 
 				readThis(Tokens.CLOSEBRACKET); 
 				break; 
 				
 
 LINES: 		| RowAction.java: 403 - 410 || RowAction.java: 566 - 573 || RowAction.java: 598 - 605 |
 CLONE CLASS: 	} 
 				} 
 				action = action.next; 
 				} while (action != null); 
 				return actionType; 
 				} 
 				
 
 LINES: 		| ArrayType.java: 106 - 113 || ArrayType.java: 120 - 127 || ArrayType.java: 134 - 141 |
 CLONE CLASS: 	sb.append(Tokens.T_ARRAY); 
 				if (maxCardinality != defaultArrayCardinality) { 
 				sb.append('[').append(maxCardinality).append(']'); 
 				} 
 				return sb.toString(); 
 				} 
 				
 
 LINES: 		| Expression.java: 1581 - 1592 || ExpressionTable.java: 189 - 200 |
 CLONE CLASS: 	Object[] value = table.getValues(session); 
 				if (value.length == 1) { 
 				return ((Object[]) value)[0]; 
 				} 
 				return value; 
 				} 
 				default : 
 				throw Error.runtimeError(ErrorCode.U_S0500, "Expression"); 
 				} 
 				} 
 				
 
 LINES: 		| BaseHashMap.java: 544 - 549 || BaseHashMap.java: 573 - 578 |
 CLONE CLASS: 	if (removeKey) { 
 				while (true) { 
 				if (longKey == 0) { 
 				hasZeroKey   = false; 
 				zeroKeyIndex = -1; 
 				} 
 				
 
 LINES: 		| TestDbBackup.java: 304 - 314 || TestDbBackup.java: 339 - 349 |
 CLONE CLASS: 	if (!destDir.mkdir()) { 
 				throw new IOException("Failed to make new dir. to restore to: " 
 				+ destDir.getAbsolutePath()); 
 				} 
 				DbBackup.main(new String[] { 
 				"--extract", baseDir.getAbsolutePath() + '/' + baseTarName, 
 				destDir.getAbsolutePath() 
 				}); 
 				try { 
 				
 
 LINES: 		| DatabaseInformationFull.java: 2752 - 2758 || DatabaseInformationFull.java: 4448 - 4454 |
 CLONE CLASS: 	} 
 				if (type.isDistinctType()) { 
 				row[udt_catalog] = database.getCatalogName().name; 
 				row[udt_schema]  = type.getSchemaName().name; 
 				row[udt_name]    = type.getName().name; 
 				} 
 				
 
 LINES: 		| DatabaseManagerSwing.java: 606 - 612 || DatabaseManager.java: 169 - 175 |
 CLONE CLASS: 	if (c == null) { 
 				return; 
 				} 
 				if (cConn != null) { 
 				try { 
 				cConn.close(); 
 				
 
 LINES: 		| HsqlDeque.java: 295 - 307 || LongDeque.java: 256 - 268 |
 CLONE CLASS: 	if (endindex == 0) { 
 				endindex = list.length; 
 				} 
 				} 
 				elementCount--; 
 				if (elementCount == 0) { 
 				firstindex = endindex = 0; 
 				} 
 				return value; 
 				} 
 				
 
 LINES: 		| TarGenerator.java: 555 - 562 || TarReader.java: 361 - 368 |
 CLONE CLASS: 	throw ioe; 
 				} finally { 
 				try { 
 				outPipe.close(); 
 				} finally { 
 				outPipe = null; 
 				} 
 				} 
 				
 
 LINES: 		| RAFileInJar.java: 251 - 259 || LobStoreInJar.java: 155 - 163 |
 CLONE CLASS: 	long skipPosition = realPosition; 
 				if (position < skipPosition) { 
 				resetStream(); 
 				skipPosition = 0; 
 				} 
 				while (position > skipPosition) { 
 				
 
 LINES: 		| JDBCDatabaseMetaData.java: 3771 - 3777 || JDBCDatabaseMetaData.java: 3840 - 3846 || JDBCDatabaseMetaData.java: 3956 - 3962 || JDBCDatabaseMetaData.java: 4072 - 4078 |
 CLONE CLASS: 	String table) throws SQLException { 
 				if (table == null) { 
 				throw JDBCUtil.nullArgument("table"); 
 				} 
 				catalog = translateCatalog(catalog); 
 				schema  = translateSchema(schema); 
 				
 
 LINES: 		| DateTimeType.java: 1183 - 1196 || DateTimeType.java: 1215 - 1228 |
 CLONE CLASS: 	return new TimeData((int) (millis / 1000), 0, 
 				((TimeData) a).getZone()); 
 				} 
 				case Types.SQL_DATE : 
 				case Types.SQL_TIMESTAMP_WITH_TIME_ZONE : 
 				case Types.SQL_TIMESTAMP : { 
 				return new TimestampData(millis / 1000, 0, 
 				((TimestampData) a).getZone()); 
 				} 
 				default : 
 				} 
 				throw Error.runtimeError(ErrorCode.U_S0500, "DateTimeType"); 
 				} 
 				
 
 LINES: 		| Row.java: 92 - 100 || NodeAVL.java: 259 - 267 |
 CLONE CLASS: 	public void setStorageSize(int size) {} 
 				public int getStorageSize() { 
 				return 0; 
 				} 
 				final public boolean isBlock() { 
 				return false; 
 				} 
 				
 
 LINES: 		| StatementSet.java: 265 - 276 || StatementSimple.java: 101 - 112 |
 CLONE CLASS: 	} 
 				return sb.toString(); 
 				} 
 				protected String describe(Session session, int blanks) { 
 				StringBuffer sb = new StringBuffer(); 
 				sb.append('\n'); 
 				for (int i = 0; i < blanks; i++) { 
 				
 
 LINES: 		| JDBCParameterMetaData.java: 368 - 375 || JDBCResultSetMetaData.java: 955 - 962 |
 CLONE CLASS: 	type = ((IntervalType) type).getCharacterType(); 
 				} else if (type.isDateTimeTypeWithZone()) { 
 				type = ((DateTimeType) type).getDateTimeTypeWithoutZone(); 
 				} 
 				} 
 				return type; 
 				} 
 				
 
 LINES: 		| Scanner.java: 1173 - 1181 || Scanner.java: 1242 - 1249 |
 CLONE CLASS: 	continue; 
 				} 
 				break; 
 				} 
 				return result; 
 				} 
 				
 
 LINES: 		| TransactionManagerMVCC.java: 275 - 287 || TransactionManagerMV2PL.java: 215 - 231 |
 CLONE CLASS: 	public void rollbackPartial(Session session, int start, long timestamp) { 
 				int limit = session.rowActionList.size(); 
 				if (start == limit) { 
 				return; 
 				} 
 				for (int i = start; i < limit; i++) { 
 				RowAction action = (RowAction) session.rowActionList.get(i); 
 				if (action == null) { 
 				throw Error.runtimeError(ErrorCode.GENERAL_ERROR, 
 				
 
 LINES: 		| TransactionManagerMVCC.java: 363 - 369 || TransactionManagerMVCC.java: 447 - 453 |
 CLONE CLASS: 	actionSession.waitingSessions.add(session); 
 				session.waitedSessions.add(actionSession); 
 				session.latch.countUp(); 
 				} 
 				redoCount++; 
 				} else { 
 				
 
 LINES: 		| Grid.java: 285 - 332 || Tree.java: 271 - 316 |
 CLONE CLASS: 	int v = iY / iRowHeight, 
 				h = iHeight / iRowHeight; 
 				sbVert.setValues(v, h, 0, iRowCount + 1); 
 				iX = sbHoriz.getValue(); 
 				iY = iRowHeight * sbVert.getValue(); 
 				} 
 				public boolean handleEvent(Event e) { 
 				switch (e.id) { 
 				case Event.SCROLL_LINE_UP : 
 				case Event.SCROLL_LINE_DOWN : 
 				case Event.SCROLL_PAGE_UP : 
 				case Event.SCROLL_PAGE_DOWN : 
 				case Event.SCROLL_ABSOLUTE : 
 				iX = sbHoriz.getValue(); 
 				iY = iRowHeight * sbVert.getValue(); 
 				repaint(); 
 				return true; 
 				} 
 				return super.handleEvent(e); 
 				} 
 				public void paint(Graphics g) { 
 				
 
 LINES: 		| JDBCParameterMetaData.java: 468 - 476 || JDBCResultSetMetaData.java: 998 - 1006 |
 CLONE CLASS: 	sb.append(','); 
 				sb.append(' '); 
 				} 
 				} 
 				sb.append('\n'); 
 				sb.append(']'); 
 				return sb.toString(); 
 				} 
 				
 
 LINES: 		| DatabaseInformationMain.java: 3007 - 3012 || DatabaseInformationMain.java: 3426 - 3431 |
 CLONE CLASS: 	row                 = t.getEmptyRowData(); 
 				row[grantor] = right.getGrantor().getName().name; 
 				row[grantee] = right.getGrantee().getName().name; 
 				row[table_catalog]  = tableCatalog; 
 				row[table_schema]   = tableSchema; 
 				row[table_name]     = tableName; 
 				
 
 LINES: 		| StatementDML.java: 1038 - 1045 || StatementDML.java: 1269 - 1276 |
 CLONE CLASS: 	} 
 				} 
 				if (table.isView) { 
 				return rowCount; 
 				} 
 				navigator.beforeFirst(); 
 				
 
 LINES: 		| ParserDDL.java: 2113 - 2119 || ParserDDL.java: 2185 - 2191 |
 CLONE CLASS: 	|| beforeOrAfterType == TriggerDef.BEFORE) { 
 				throw unexpectedToken(); 
 				} 
 				read(); 
 				readIfThis(Tokens.AS); 
 				checkIsSimpleName(); 
 				
 
 LINES: 		| BaseHashMap.java: 396 - 406 || BaseHashMap.java: 446 - 457 |
 CLONE CLASS: 	} else if (isIntValue) { 
 				intValueTable[lookup] = (int) longValue; 
 				} else if (isLongValue) { 
 				longValueTable[lookup] = longValue; 
 				} 
 				if (accessTable != null) { 
 				accessTable[lookup] = ++accessCount; 
 				} 
 				return returnValue; 
 				
 
 LINES: 		| TestBench.java: 417 - 435 || JDBCBench.java: 431 - 449 |
 CLONE CLASS: 	Query = "DROP TABLE history"; 
 				Stmt.execute(Query); 
 				Stmt.clearWarnings(); 
 				Query = "DROP TABLE accounts"; 
 				Stmt.execute(Query); 
 				Stmt.clearWarnings(); 
 				Query = "DROP TABLE tellers"; 
 				Stmt.execute(Query); 
 				Stmt.clearWarnings(); 
 				Query = "DROP TABLE branches"; 
 				Stmt.execute(Query); 
 				Stmt.clearWarnings(); 
 				
 
 LINES: 		| Grid.java: 533 - 561 || Tree.java: 421 - 449 |
 CLONE CLASS: 	} 
 				public Dimension preferredSize() { 
 				return dMinimum; 
 				} 
 				public Dimension getPreferredSize() { 
 				return dMinimum; 
 				} 
 				public Dimension getMinimumSize() { 
 				return dMinimum; 
 				} 
 				public Dimension minimumSize() { 
 				return dMinimum; 
 				} 
 				
 
 LINES: 		| LobManager.java: 1286 - 1291 || LobManager.java: 1320 - 1325 |
 CLONE CLASS: 	if (blockAddresses[i][LOBS.BLOCK_COUNT] 
 				+ blockAddresses[i][LOBS.BLOCK_OFFSET] > blockLimit) { 
 				blockCount -= (blockAddresses[i][LOBS.BLOCK_COUNT] 
 				+ blockAddresses[i][LOBS.BLOCK_OFFSET] 
 				- blockLimit); 
 				} 
 				
 
 LINES: 		| Scanner.java: 411 - 421 || Scanner.java: 511 - 521 |
 CLONE CLASS: 	if (c == ' ') { 
 				continue; 
 				} 
 				if (c == '\'') { 
 				complete = true; 
 				currentPosition++; 
 				break; 
 				} 
 				
 
 LINES: 		| HSQLDialect.java: 46 - 121 || HSQLDialect.java: 46 - 121 |
 CLONE CLASS: 	import org.hibernate.util.ReflectHelper; 
 				import org.slf4j.Logger; 
 				import org.slf4j.LoggerFactory; 
 				public class HSQLDialect extends Dialect { 
 				private static final Logger log = LoggerFactory.getLogger( HSQLDialect.class ); 
 				private int hsqldbVersion = 18; 
 				public HSQLDialect() { 
 				super(); 
 				try { 
 				Class props = ReflectHelper.classForName( "org.hsqldb.persist.HsqlDatabaseProperties" ); 
 				String versionString = (String) props.getDeclaredField( "THIS_VERSION" ).get( null ); 
 				hsqldbVersion = Integer.parseInt( versionString.substring( 0, 1 ) ) * 10; 
 				hsqldbVersion += Integer.parseInt( versionString.substring( 2, 3 ) ); 
 				} 
 				catch ( Throwable e ) { 
 				} 
 				registerColumnType( Types.BIGINT, "bigint" ); 
 				registerColumnType( Types.BINARY, "binary($l)" ); 
 				registerColumnType( Types.BIT, "bit" ); 
 				registerColumnType( Types.BOOLEAN, "boolean" ); 
 				registerColumnType( Types.CHAR, "char($l)" ); 
 				registerColumnType( Types.DATE, "date" ); 
 				registerColumnType( Types.DECIMAL, "decimal($p,$s)" ); 
 				registerColumnType( Types.DOUBLE, "double" ); 
 				registerColumnType( Types.FLOAT, "float" ); 
 				registerColumnType( Types.INTEGER, "integer" ); 
 				registerColumnType( Types.LONGVARBINARY, "longvarbinary" ); 
 				registerColumnType( Types.LONGVARCHAR, "longvarchar" ); 
 				registerColumnType( Types.SMALLINT, "smallint" ); 
 				registerColumnType( Types.TINYINT, "tinyint" ); 
 				registerColumnType( Types.TIME, "time" ); 
 				registerColumnType( Types.TIMESTAMP, "timestamp" ); 
 				registerColumnType( Types.VARCHAR, "varchar($l)" ); 
 				registerColumnType( Types.VARBINARY, "varbinary($l)" ); 
 				if ( hsqldbVersion < 20 ) { 
 				registerColumnType( Types.NUMERIC, "numeric" ); 
 				} 
 				else { 
 				registerColumnType( Types.NUMERIC, "numeric($p,$s)" ); 
 				} 
 				if ( hsqldbVersion < 20 ) { 
 				registerColumnType( Types.BLOB, "longvarbinary" ); 
 				registerColumnType( Types.CLOB, "longvarchar" ); 
 				} 
 				else { 
 				registerColumnType( Types.BLOB, "blob" ); 
 				registerColumnType( Types.CLOB, "clob" ); 
 				} 
 				
 
 LINES: 		| TransferCommon.java: 110 - 115 || TransferCommon.java: 135 - 140 |
 CLONE CLASS: 	for (int i = 0; i < tTable.size(); i++) { 
 				t          = (TransferTable) tTable.elementAt(i); 
 				t.tracer   = tracer; 
 				t.sourceDb = (TransferDb) sourceDb; 
 				t.destDb   = targetDb; 
 				} 
 				
 
 LINES: 		| CharacterType.java: 123 - 131 || DateTimeType.java: 154 - 162 |
 CLONE CLASS: 	} 
 				public String getNameString() { 
 				return nameString; 
 				} 
 				private String getNameStringPrivate() { 
 				switch (typeCode) { 
 				
 
 LINES: 		| ParserDDL.java: 1517 - 1525 || ParserDDL.java: 1553 - 1561 |
 CLONE CLASS: 	read(); 
 				if (token.tokenType == Tokens.SET) { 
 				read(); 
 				switch (token.tokenType) { 
 				case Tokens.DEFAULT : { 
 				read(); 
 				
 
 LINES: 		| ExpressionColumn.java: 1024 - 1030 || ExpressionColumn.java: 1054 - 1060 |
 CLONE CLASS: 	} else if (session.database.sqlEnforceRefs) { 
 				String message = getColumnName(); 
 				throw Error.error(ErrorCode.X_42580, message); 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| NodeAVLDiskLarge.java: 323 - 332 || NodeAVLDiskLarge.java: 346 - 355 || NodeAVLDiskLarge.java: 376 - 385 |
 CLONE CLASS: 	if (!row.keepInMemory(true)) { 
 				row  = (RowAVLDisk) store.get(this.row, true); 
 				node = (NodeAVLDiskLarge) row.getNode(iId); 
 				} 
 				if (!row.isInMemory()) { 
 				throw Error.runtimeError(ErrorCode.U_S0500, "NodeAVLDisk"); 
 				} 
 				row.setNodesChanged(); 
 				
 
 LINES: 		| IntKeyHashMapConcurrent.java: 74 - 83 || LongKeyHashMap.java: 74 - 83 |
 CLONE CLASS: 	int lookup = getLookup(key); 
 				if (lookup != -1) { 
 				return objectValueTable[lookup]; 
 				} 
 				return null; 
 				} finally { 
 				readLock.unlock(); 
 				} 
 				
 
 LINES: 		| ParserDDL.java: 1782 - 1788 || ParserDDL.java: 2889 - 2895 || ParserDDL.java: 3195 - 3201 || ParserDDL.java: 4263 - 4269 || ParserDQL.java: 1409 - 1415 || ParserDQL.java: 3021 - 3027 || ParserDQL.java: 3069 - 3075 || Scanner.java: 1088 - 1094 |
 CLONE CLASS: 	end = true; 
 				break; 
 				} 
 				if (end) { 
 				break; 
 				} 
 				
 
 LINES: 		| RangeVariableResolver.java: 177 - 184 || RangeVariableResolver.java: 189 - 196 |
 CLONE CLASS: 	&& range != null) { 
 				int index = rangeVarSet.getIndex(range); 
 				if (index > 0) { 
 				rangeVariables[index].isLeftJoin      = false; 
 				rangeVariables[index - 1].isRightJoin = false; 
 				} 
 				} 
 				
 
 LINES: 		| LongKeyHashMap.java: 205 - 213 || LongKeyHashMap.java: 244 - 252 |
 CLONE CLASS: 	} 
 				public int size() { 
 				return LongKeyHashMap.this.size(); 
 				} 
 				public boolean contains(Object o) { 
 				throw new RuntimeException(); 
 				} 
 				
 
 LINES: 		| RAFileInJar.java: 224 - 244 || FileUtil.java: 353 - 373 || LobStoreInJar.java: 123 - 143 |
 CLONE CLASS: 	InputStream fis = null; 
 				try { 
 				fis = getClass().getResourceAsStream(fileName); 
 				if (fis == null) { 
 				ClassLoader cl = 
 				Thread.currentThread().getContextClassLoader(); 
 				if (cl != null) { 
 				fis = cl.getResourceAsStream(fileName); 
 				} 
 				} 
 				} catch (Throwable t) { 
 				} finally { 
 				if (fis == null) { 
 				throw new FileNotFoundException(fileName); 
 				} 
 				} 
 				
 
 LINES: 		| FunctionSQL.java: 913 - 931 || FunctionSQL.java: 1043 - 1061 |
 CLONE CLASS: 	if (data[0] == null || data[1] == null) { 
 				return null; 
 				} 
 				Object value; 
 				value = Type.SQL_BIGINT.convertToType(session, data[1], 
 				nodes[1].dataType); 
 				long offset = ((Number) value).longValue() - 1; 
 				long length = 0; 
 				if (nodes[2] != null) { 
 				if (data[2] == null) { 
 				return null; 
 				} 
 				value = Type.SQL_BIGINT.convertToType(session, data[2], 
 				nodes[2].dataType); 
 				
 
 LINES: 		| StatementSchema.java: 1109 - 1114 || StatementCommand.java: 1082 - 1087 |
 CLONE CLASS: 	return Result.updateZeroResult; 
 				} else { 
 				return Result.newErrorResult(e, sql); 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| ExpressionLogical.java: 676 - 682 || ExpressionLogical.java: 699 - 705 |
 CLONE CLASS: 	resolveTypesForLogicalOp(); 
 				if (nodes[LEFT].opType == OpTypes.VALUE) { 
 				if (nodes[RIGHT].opType == OpTypes.VALUE) { 
 				setAsConstantValue(session, parent); 
 				} else { 
 				Object value = nodes[LEFT].getValue(session); 
 				
 
 LINES: 		| TestBug778213.java: 82 - 89 || TestBug778213.java: 152 - 159 |
 CLONE CLASS: 	} finally { 
 				conn.close(); 
 				} 
 				conn = newConnection(); 
 				try { 
 				pstmt = conn.prepareStatement("create table test(id int)"); 
 				
 
 LINES: 		| TestTypeConversion.java: 75 - 82 || TestTypeConversion.java: 124 - 131 |
 CLONE CLASS: 	statement.execute(ddl0); 
 				statement.execute(ddl1); 
 				} catch (SQLException e) { 
 				e.printStackTrace(); 
 				fail("ddl failure"); 
 				} 
 				try { 
 				
 
 LINES: 		| StatementResultUpdate.java: 99 - 111 || StatementResultUpdate.java: 135 - 142 |
 CLONE CLASS: 	row = getRow(session, args); 
 				if (row == null || row.isDeleted(session, store)) { 
 				throw Error.error(ErrorCode.X_24521); 
 				} 
 				RowSetNavigatorDataChange list = 
 				session.sessionContext.getRowSetDataChange(); 
 				
 
 LINES: 		| SchemaManager.java: 1096 - 1101 || SchemaManager.java: 1144 - 1149 || SchemaManager.java: 1560 - 1565 || DataFileCache.java: 1256 - 1261 || TransactionManager2PL.java: 306 - 311 |
 CLONE CLASS: 	} 
 				} 
 				} finally { 
 				writeLock.unlock(); 
 				} 
 				} 
 				
 
 LINES: 		| QuerySpecification.java: 1149 - 1155 || RangeVariable.java: 1750 - 1756 |
 CLONE CLASS: 	} 
 				break; 
 				} 
 				default : 
 				} 
 				} 
 				
 
 LINES: 		| SchemaManager.java: 2633 - 2641 || SchemaManager.java: 2663 - 2671 || SchemaManager.java: 2694 - 2702 |
 CLONE CLASS: 	} 
 				} 
 				String[] array = new String[list.size()]; 
 				list.toArray(array); 
 				return array; 
 				} finally { 
 				
 
 LINES: 		| FunctionCustom.java: 3221 - 3230 || FunctionCustom.java: 3250 - 3259 |
 CLONE CLASS: 	if (nodes[0].dataType == null) { 
 				nodes[0].dataType = Type.SQL_TIMESTAMP_NO_FRACTION; 
 				} 
 				if (!nodes[0].dataType.isDateOrTimestampType()) { 
 				throw Error.error(ErrorCode.X_42563); 
 				} 
 				dataType = Type.SQL_TIMESTAMP_NO_FRACTION; 
 				break; 
 				
 
 LINES: 		| NumberType.java: 1467 - 1474 || IntervalType.java: 858 - 865 || DateTimeType.java: 1116 - 1123 |
 CLONE CLASS: 	} 
 				public Object subtract(Session session, Object a, Object b, 
 				Type otherType) { 
 				if (a == null || b == null) { 
 				return null; 
 				} 
 				
 
 LINES: 		| TestCacheSize.java: 573 - 588 || TestCacheSize.java: 608 - 623 |
 CLONE CLASS: 	ps.execute(); 
 				if (reportProgress && (i + 1) % 10000 == 0 
 				|| (slow && (i + 1) % 100 == 0)) { 
 				System.out.println("Select " + (i + 1) + " : " 
 				+ (sw.elapsedTime() + 1)); 
 				} 
 				} 
 				ps.close(); 
 				} catch (SQLException e) { 
 				e.printStackTrace(); 
 				} 
 				long time = sw.elapsedTime(); 
 				long rate = ((long) i * 1000) / (time + 1); 
 				
 
 LINES: 		| JDBCPreparedStatement.java: 4330 - 4339 || JDBCPreparedStatement.java: 4398 - 4409 |
 CLONE CLASS: 	parameterValues[i - 1] = is; 
 				streamLengths[i - 1]   = streamLength; 
 				parameterSet[i - 1]    = Boolean.FALSE; 
 				return; 
 				} 
 				parameterValues[i - 1] = o; 
 				parameterSet[i - 1]    = Boolean.TRUE; 
 				return; 
 				
 
 LINES: 		| JDBCConnection.java: 2159 - 2166 || JDBCConnection.java: 2248 - 2255 |
 CLONE CLASS: 	if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4) { 
 				sp.connection = null; 
 				sp.name       = null; 
 				} 
 				} catch (HsqlException e) { 
 				throw JDBCUtil.sqlException(e); 
 				} 
 				} 
 				
 
 LINES: 		| StatementSchema.java: 281 - 292 || StatementCommand.java: 228 - 239 || StatementSession.java: 250 - 261 |
 CLONE CLASS: 	try { 
 				if (isLogged) { 
 				session.database.logger.writeOtherStatement(session, sql); 
 				} 
 				} catch (Throwable e) { 
 				return Result.newErrorResult(e, sql); 
 				} 
 				return result; 
 				} 
 				Result getResult(Session session) { 
 				
 
 LINES: 		| WebServer.java: 32 - 144 || WebServer.java: 32 - 144 |
 CLONE CLASS: 	package org.hsqldb.server; 
 				import org.hsqldb.lib.FileUtil; 
 				import org.hsqldb.persist.HsqlProperties; 
 				import org.hsqldb.resources.ResourceBundleHandler; 
 				public class WebServer extends Server { 
 				static int webBundleHandle = 
 				ResourceBundleHandler.getBundleHandle("webserver-pages", null); 
 				public WebServer() { 
 				super(ServerConstants.SC_PROTOCOL_HTTP); 
 				} 
 				public static void main(String[] args) { 
 				HsqlProperties argProps = null; 
 				argProps = HsqlProperties.argArrayToProps(args, 
 				ServerProperties.sc_key_prefix); 
 				
 
 LINES: 		| TestJDBCGeneratedColumns.java: 198 - 205 || TestJDBCGeneratedColumns.java: 215 - 222 || TestJDBCGeneratedColumns.java: 233 - 240 |
 CLONE CLASS: 	ps.addBatch(); 
 				ps.addBatch(); 
 				ps.executeBatch(); 
 				rs = ps.getGeneratedKeys(); 
 				while (rs.next()) { 
 				System.out.println("" + rs.getInt(1)); 
 				
 
 LINES: 		| DbBackup.java: 145 - 155 || TarReader.java: 100 - 110 |
 CLONE CLASS: 	} 
 				String[] patternStrings = null; 
 				if (sa.length > firstPatInd) { 
 				patternStrings = new String[sa.length - firstPatInd]; 
 				for (int i = firstPatInd; i < sa.length; i++) { 
 				patternStrings[i - firstPatInd] = sa[i]; 
 				} 
 				} 
 				
 
 LINES: 		| ParserDQL.java: 4700 - 4707 || ParserDQL.java: 4945 - 4952 |
 CLONE CLASS: 	} 
 				if (token.tokenType != Tokens.COMMA) { 
 				break; 
 				} 
 				read(); 
 				} 
 				
 
 LINES: 		| TestBench.java: 146 - 152 || JDBCBench.java: 138 - 144 |
 CLONE CLASS: 	} else if (Args[i].equals("-v")) { 
 				verbose = true; 
 				} 
 				} 
 				if (DriverName.length() == 0 || DBUrl.length() == 0) { 
 				System.out.println( 
 				
 
 LINES: 		| Type.java: 37 - 42 || RowType.java: 35 - 40 || ArrayType.java: 37 - 42 |
 CLONE CLASS: 	import org.hsqldb.Session; 
 				import org.hsqldb.SessionInterface; 
 				import org.hsqldb.SortAndSlice; 
 				import org.hsqldb.Tokens; 
 				import org.hsqldb.error.Error; 
 				import org.hsqldb.error.ErrorCode; 
 				
 
 LINES: 		| RowSetNavigatorData.java: 364 - 373 || RowSetNavigatorDataTable.java: 374 - 383 |
 CLONE CLASS: 	} 
 				public void intersect(Session session, RowSetNavigatorData other) { 
 				removeDuplicates(session); 
 				other.sortFull(session); 
 				while (hasNext()) { 
 				Object[] currentData = getNext(); 
 				boolean  hasRow      = other.containsRow(currentData); 
 				
 
 LINES: 		| TransactionManagerMVCC.java: 819 - 824 || TransactionManagerMV2PL.java: 278 - 283 |
 CLONE CLASS: 	case TableBase.MEMORY_TABLE : 
 				default : 
 				action = RowAction.addDeleteAction(session, table, row, 
 				colMap); 
 				} 
 				} 
 				
 
 LINES: 		| TestQuotes.java: 32 - 38 || TestDatetimeSimple.java: 32 - 38 |
 CLONE CLASS: 	package org.hsqldb.test; 
 				import java.sql.Connection; 
 				import java.sql.DriverManager; 
 				import java.sql.PreparedStatement; 
 				import java.sql.ResultSet; 
 				import java.sql.SQLException; 
 				
 
 LINES: 		| JDBCPreparedStatement.java: 3101 - 3107 || JDBCPreparedStatement.java: 3152 - 3158 |
 CLONE CLASS: 	if (isClosed || connection.isClosed) { 
 				checkClosed(); 
 				} 
 				if (max < 0) { 
 				throw JDBCUtil.outOfRangeArgument(); 
 				} 
 				
 
 LINES: 		| ExpressionColumnAccessor.java: 129 - 139 || ExpressionColumn.java: 1110 - 1120 |
 CLONE CLASS: 	return false; 
 				} 
 				public boolean equals(Expression other) { 
 				if (other == this) { 
 				return true; 
 				} 
 				
 
 LINES: 		| ParserDQL.java: 2883 - 2888 || ParserDQL.java: 2904 - 2909 |
 CLONE CLASS: 	case Tokens.YEAR : 
 				case Tokens.MONTH : 
 				case Tokens.DAY : 
 				case Tokens.HOUR : 
 				case Tokens.MINUTE : 
 				case Tokens.SECOND : { 
 				
 
 LINES: 		| InputStreamWrapper.java: 80 - 90 || RAShadowFile.java: 282 - 292 |
 CLONE CLASS: 	if (fetchedSize == limitSize) { 
 				return -1; 
 				} 
 				if (limitSize >= 0 && limitSize - fetchedSize < length) { 
 				length = (int) (limitSize - fetchedSize); 
 				} 
 				int count = is.read(bytes, offset, length); 
 				if (count < 0) { 
 				
 
 LINES: 		| RowType.java: 172 - 181 || ArrayType.java: 203 - 212 |
 CLONE CLASS: 	public Object convertToType(SessionInterface session, Object a, 
 				Type otherType) { 
 				if (a == null) { 
 				return null; 
 				} 
 				if (otherType == null) { 
 				return a; 
 				} 
 				
 
 LINES: 		| QuerySpecification.java: 1955 - 1967 || QueryExpression.java: 758 - 771 |
 CLONE CLASS: 	} 
 				public String describe(Session session, int blanks) { 
 				StringBuffer sb; 
 				String       temp; 
 				StringBuffer b = new StringBuffer(blanks); 
 				for (int i = 0; i < blanks; i++) { 
 				b.append(' '); 
 				} 
 				sb = new StringBuffer(); 
 				
 
 LINES: 		| TestUtil.java: 1040 - 1053 || TestUtil.java: 1348 - 1361 |
 CLONE CLASS: 	} 
 				protected String getResultString() { 
 				StringBuffer sb = new StringBuffer(); 
 				if (lines.length == 1 && lines[0].trim().length() < 1) { 
 				return null; 
 				} 
 				for (int i = 0; i < lines.length; i++) { 
 				if (i > 0) { 
 				sb.append(LS); 
 				} 
 				
 
 LINES: 		| KMPSearchAlgorithm.java: 266 - 283 || KMPSearchAlgorithm.java: 336 - 353 |
 CLONE CLASS: 	return sourceIndex; 
 				} 
 				} 
 				return -1; 
 				} 
 				int matchStart   = start; 
 				int patternIndex = 0; 
 				if (table == null) { 
 				table = computeTable(pattern); 
 				} 
 				while ((sourceIndex < sourceLength) 
 				
 
 LINES: 		| Defines.java: 154 - 161 || Defines.java: 187 - 194 |
 CLONE CLASS: 	if (!tokenizer.isToken(Token.EOI)) { 
 				throw new PreprocessorException("Illegal trailing " 
 				+ "characters at position: " 
 				+ tokenizer.getStartIndex() 
 				+ " in [" 
 				+ expression 
 				+ "]"); 
 				} 
 				
 
 LINES: 		| RowInputBinary.java: 48 - 53 || JDBCResultSet.java: 80 - 85 || RowInputText.java: 49 - 54 |
 CLONE CLASS: 	import org.hsqldb.types.IntervalType; 
 				import org.hsqldb.types.JavaObjectData; 
 				import org.hsqldb.types.TimeData; 
 				import org.hsqldb.types.TimestampData; 
 				import org.hsqldb.types.Type; 
 				import org.hsqldb.types.Types; 
 				
 
 LINES: 		| TableWorks.java: 845 - 850 || TableWorks.java: 953 - 958 |
 CLONE CLASS: 	setNewTableInSchema(tn); 
 				setNewTablesInSchema(tableSet); 
 				updateConstraints(tn, emptySet); 
 				updateConstraints(tableSet, constraintNameSet); 
 				database.schemaManager.recompileDependentObjects(tableSet); 
 				database.schemaManager.recompileDependentObjects(tn); 
 				
 
 LINES: 		| DatabaseInformationMain.java: 845 - 850 || DatabaseInformationMain.java: 1627 - 1636 |
 CLONE CLASS: 	addColumn(t, "REMARKS", CHARACTER_DATA); 
 				addColumn(t, "COLUMN_DEF", CHARACTER_DATA); 
 				addColumn(t, "SQL_DATA_TYPE", Type.SQL_INTEGER); 
 				addColumn(t, "SQL_DATETIME_SUB", Type.SQL_INTEGER); 
 				addColumn(t, "CHAR_OCTET_LENGTH", Type.SQL_INTEGER); 
 				addColumn(t, "ORDINAL_POSITION", Type.SQL_INTEGER); 
 				
 
 LINES: 		| TestUtil.java: 730 - 738 || TestUtil.java: 892 - 900 || TestUtil.java: 1214 - 1222 |
 CLONE CLASS: 	+ s.getMessage()); 
 				} 
 				if (aStatement.getUpdateCount() != -1) { 
 				throw new Exception( 
 				"Expected a ResultSet, but got an update count of " 
 				+ aStatement.getUpdateCount()); 
 				} 
 				
 
 LINES: 		| BaseHashMap.java: 380 - 388 || BaseHashMap.java: 838 - 846 |
 CLONE CLASS: 	hashIndex.unlinkNode(index, lastLookup, lookup); 
 				if (accessTable != null) { 
 				accessTable[lookup] = 0; 
 				} 
 				if (minimizeOnEmpty && hashIndex.elementCount == 0) { 
 				rehash(initialCapacity); 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 2725 - 2730 || DatabaseInformationFull.java: 4426 - 4431 || DatabaseInformationFull.java: 6005 - 6010 |
 CLONE CLASS: 	} else if (type.isIntervalType()) { 
 				row[data_type] = "INTERVAL"; 
 				row[interval_type] = 
 				((IntervalType) type).getQualifier(type.typeCode); 
 				row[interval_precision] = 
 				ValuePool.getLong(type.precision); 
 				
 
 LINES: 		| Expression.java: 924 - 936 || ExpressionColumn.java: 966 - 978 |
 CLONE CLASS: 	} 
 				return set; 
 				} 
 				OrderedHashSet collectRangeVariables(RangeVariable[] rangeVariables, 
 				OrderedHashSet set) { 
 				for (int i = 0; i < nodes.length; i++) { 
 				if (nodes[i] != null) { 
 				set = nodes[i].collectRangeVariables(rangeVariables, set); 
 				} 
 				} 
 				
 
 LINES: 		| CharacterType.java: 353 - 359 || BooleanType.java: 125 - 131 || NumberType.java: 676 - 682 || IntervalType.java: 447 - 453 || BinaryType.java: 303 - 309 || StringComparator.java: 50 - 56 || BlobType.java: 140 - 146 || ClobType.java: 132 - 138 || RowType.java: 123 - 129 || RowType.java: 367 - 373 || ArrayType.java: 149 - 155 || DateTimeType.java: 405 - 411 || OtherType.java: 118 - 124 |
 CLONE CLASS: 	if (a == null) { 
 				return -1; 
 				} 
 				if (b == null) { 
 				return 1; 
 				} 
 				
 
 LINES: 		| StatementQuery.java: 94 - 103 || StatementExpression.java: 185 - 194 || StatementDML.java: 294 - 303 || StatementSet.java: 344 - 353 || StatementProcedure.java: 378 - 387 |
 CLONE CLASS: 	for (int i = 0; i < subqueries.length; i++) { 
 				if (subqueries[i].queryExpression != null) { 
 				subqueries[i].queryExpression.getBaseTableNames(set); 
 				} 
 				} 
 				for (int i = 0; i < routines.length; i++) { 
 				set.addAll(routines[i].getTableNamesForRead()); 
 				} 
 				} 
 				
 
 LINES: 		| SchemaManager.java: 1200 - 1208 || SchemaManager.java: 1276 - 1284 |
 CLONE CLASS: 	boolean raise) { 
 				readLock.lock(); 
 				try { 
 				Schema schema = (Schema) schemaMap.get(schemaName); 
 				if (schema != null) { 
 				SchemaObject object = schema.typeLookup.getObject(name); 
 				
 
 LINES: 		| NodeAVLDiskLarge.java: 146 - 169 || NodeAVLDisk.java: 190 - 213 |
 CLONE CLASS: 	} 
 				return ret; 
 				} 
 				boolean isLeft(NodeAVL n) { 
 				if (n == null) { 
 				return iLeft == NO_POS; 
 				} 
 				return iLeft == n.getPos(); 
 				} 
 				boolean isRight(NodeAVL n) { 
 				if (n == null) { 
 				return iRight == NO_POS; 
 				} 
 				return iRight == n.getPos(); 
 				} 
 				NodeAVL getLeft(PersistentStore store) { 
 				
 
 LINES: 		| ExpressionOp.java: 340 - 347 || ExpressionArithmetic.java: 229 - 236 |
 CLONE CLASS: 	return sb.toString(); 
 				} 
 				public HsqlList resolveColumnReferences(Session session, 
 				RangeGroup rangeGroup, int rangeCount, RangeGroup[] rangeGroups, 
 				HsqlList unresolvedSet, boolean acceptsSequences) { 
 				if (opType == OpTypes.VALUE) { 
 				
 
 LINES: 		| JDBCBench.java: 490 - 497 || JDBCBench.java: 508 - 515 |
 CLONE CLASS: 	Query += "filler      CHAR(84))"; 
 				if (createExtension.length() > 0) { 
 				Query += createExtension; 
 				} 
 				Stmt.execute(Query); 
 				Stmt.clearWarnings(); 
 				
 
 LINES: 		| ExpressionLogical.java: 924 - 932 || ExpressionLogical.java: 944 - 952 |
 CLONE CLASS: 	if (session.database.sqlEnforceTypes) { 
 				throw Error.error(ErrorCode.X_42562); 
 				} 
 				if (nodes[RIGHT].dataType.canConvertFrom( 
 				nodes[LEFT].dataType)) { 
 				nodes[LEFT] = ExpressionOp.getCastExpression(session, 
 				nodes[LEFT], nodes[RIGHT].dataType); 
 				} 
 				
 
 LINES: 		| DatabaseManagerSwing.java: 553 - 559 || DatabaseManager.java: 325 - 331 |
 CLONE CLASS: 	try { 
 				if (autoConnect && urlidConnect) { 
 				throw new IllegalArgumentException( 
 				"You may not specify both (urlid) AND (url/user/password)."); 
 				} 
 				if (autoConnect) { 
 				
 
 LINES: 		| RowSetNavigatorData.java: 493 - 504 || RowSetNavigatorDataTable.java: 508 - 519 |
 CLONE CLASS: 	return false; 
 				} else { 
 				lastRowData = currentData; 
 				} 
 				} 
 				return true; 
 				} 
 				public void removeDuplicates(Session session) { 
 				sortFull(session); 
 				
 
 LINES: 		| BitType.java: 124 - 131 || CharacterType.java: 229 - 236 || BooleanType.java: 88 - 95 || IntervalType.java: 355 - 362 || BinaryType.java: 190 - 197 || DateTimeType.java: 265 - 273 || OtherType.java: 98 - 105 |
 CLONE CLASS: 	return this; 
 				} 
 				if (other == SQL_ALL_TYPES) { 
 				return this; 
 				} 
 				if (typeCode == other.typeCode) { 
 				
 
 LINES: 		| ParserDDL.java: 327 - 332 || ParserDDL.java: 784 - 789 || ParserDDL.java: 4411 - 4416 || ParserCommand.java: 1368 - 1373 || ParserDQL.java: 1130 - 1135 |
 CLONE CLASS: 	} 
 				default : { 
 				throw unexpectedToken(); 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| FileArchiver.java: 155 - 164 || FileArchiver.java: 232 - 241 |
 CLONE CLASS: 	} 
 				if (!completed && storage.isStreamElement(outfilename)) { 
 				storage.removeElement(outfilename); 
 				} 
 				} catch (Throwable e) { 
 				throw JavaSystem.toIOException(e); 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| FunctionSQL.java: 2057 - 2064 || FunctionSQL.java: 2075 - 2082 |
 CLONE CLASS: 	return name; 
 				} 
 				sb.append(name).append(Tokens.T_OPENBRACKET).append(precision); 
 				sb.append(Tokens.T_CLOSEBRACKET); 
 				return sb.toString(); 
 				} 
 				
 
 LINES: 		| HashMap.java: 160 - 167 || IntValueHashMap.java: 195 - 202 || LongValueHashMap.java: 181 - 188 |
 CLONE CLASS: 	} 
 				} 
 				public boolean add(Object value) { 
 				throw new RuntimeException(); 
 				} 
 				public boolean addAll(Collection c) { 
 				
 
 LINES: 		| SchemaManager.java: 716 - 722 || SchemaManager.java: 1729 - 1735 || SchemaManager.java: 1753 - 1759 |
 CLONE CLASS: 	} 
 				return set; 
 				} finally { 
 				readLock.unlock(); 
 				} 
 				} 
 				
 
 LINES: 		| HSQLDialect.java: 539 - 606 || HSQLDialect.java: 503 - 570 |
 CLONE CLASS: 	} 
 				else { 
 				return Boolean.FALSE; 
 				} 
 				} 
 				public boolean supportsCurrentTimestampSelection() { 
 				return true; 
 				} 
 				public boolean isCurrentTimestampSelectStringCallable() { 
 				return false; 
 				} 
 				public String getCurrentTimestampSelectString() { 
 				return "call current_timestamp"; 
 				} 
 				public String getCurrentTimestampSQLFunctionName() { 
 				return "current_timestamp"; 
 				} 
 				public LockingStrategy getLockingStrategy(Lockable lockable, LockMode lockMode) { 
 				
 
 LINES: 		| TestUpdatableResultSets.java: 71 - 84 || TestUpdatableResultSets.java: 128 - 141 || TestUpdatableResultSets.java: 223 - 236 |
 CLONE CLASS: 	String            insert = "insert into t1 values(?,?,?)"; 
 				String            select = "select i, c, t from t1"; 
 				PreparedStatement ps     = connection.prepareStatement(insert); 
 				for (int i = 0; i < 10; i++) { 
 				ps.setInt(1, i); 
 				ps.setString(2, String.valueOf(i) + " s"); 
 				ps.setBytes(3, new byte[] { 
 				(byte) i, ' ', (byte) i 
 				}); 
 				ps.execute(); 
 				} 
 				connection.setAutoCommit(false); 
 				
 
 LINES: 		| Expression.java: 1517 - 1524 || ExpressionTable.java: 175 - 202 |
 CLONE CLASS: 	return table.queryExpression.getValues(session); 
 				} 
 				default : 
 				throw Error.runtimeError(ErrorCode.U_S0500, "Expression"); 
 				} 
 				} 
 				public Object getValue(Session session) { 
 				
 
 LINES: 		| Routine.java: 1133 - 1141 || Routine.java: 1269 - 1277 |
 CLONE CLASS: 	if (param.isArray()) { 
 				if (!byte[].class.equals(param)) { 
 				param = param.getComponentType(); 
 				if (param.isPrimitive()) { 
 				method = null; 
 				break; 
 				} 
 				
 
 LINES: 		| ServerConfiguration.java: 146 - 161 || ServerConfiguration.java: 163 - 178 |
 CLONE CLASS: 	addrs = InetAddress.getAllByName(addr.getHostAddress()); 
 				for (int i = 0; i < addrs.length; i++) { 
 				set.add(addrs[i].getHostAddress()); 
 				set.add(addrs[i].getHostName()); 
 				} 
 				addrs = InetAddress.getAllByName(addr.getHostName()); 
 				for (int i = 0; i < addrs.length; i++) { 
 				set.add(addrs[i].getHostAddress()); 
 				set.add(addrs[i].getHostName()); 
 				} 
 				} catch (Exception e) {} 
 				try { 
 				
 
 LINES: 		| JDBCClobClient.java: 370 - 379 || JDBCClobClient.java: 492 - 501 || JDBCClobClient.java: 573 - 582 |
 CLONE CLASS: 	checkClosed(); 
 				if (pos < 1) { 
 				throw JDBCUtil.outOfRangeArgument("pos: " + pos); 
 				} 
 				if (!isWritable) { 
 				throw JDBCUtil.notUpdatableColumn(); 
 				} 
 				startUpdate(); 
 				
 
 LINES: 		| TestUtil.java: 719 - 728 || TestUtil.java: 881 - 890 || TestUtil.java: 952 - 961 || TestUtil.java: 1201 - 1210 |
 CLONE CLASS: 	} 
 				protected boolean test(Statement aStatement) { 
 				try { 
 				try { 
 				aStatement.execute(getSql()); 
 				} catch (SQLException s) { 
 				
 
 LINES: 		| ParserRoutine.java: 1754 - 1761 || ParserRoutine.java: 1796 - 1803 |
 CLONE CLASS: 	if (!label.name.equals(token.tokenString)) { 
 				throw Error.error(ErrorCode.X_42508, token.tokenString); 
 				} 
 				read(); 
 				} 
 				StatementCompound statement = 
 				
 
 LINES: 		| TestBench.java: 166 - 175 || JDBCBench.java: 158 - 167 |
 CLONE CLASS: 	System.out.println( 
 				"*********************************************************"); 
 				System.out.println(); 
 				System.out.println("Driver: " + DriverName); 
 				System.out.println("URL:" + DBUrl); 
 				System.out.println(); 
 				System.out.println("Scale factor value: " + tps); 
 				System.out.println("Number of clients: " + n_clients); 
 				System.out.println("Number of transactions per client: " 
 				+ n_txn_per_client); 
 				
 
 LINES: 		| OracleTransferHelper.java: 92 - 120 || PostgresTransferHelper.java: 114 - 142 |
 CLONE CLASS: 	} 
 				String fixupColumnDefWrite(TransferTable t, ResultSetMetaData meta, 
 				String columnType, ResultSet columnDesc, 
 				int columnIndex) throws SQLException { 
 				if (columnType.equals("SERIAL")) { 
 				String SeqName = new String("_" + columnDesc.getString(4) 
 				+ "_seq"); 
 				int spaceleft = 31 - SeqName.length(); 
 				if (t.Stmts.sDestTable.length() > spaceleft) { 
 				SeqName = t.Stmts.sDestTable.substring(0, spaceleft) 
 				+ SeqName; 
 				} else { 
 				SeqName = t.Stmts.sDestTable + SeqName; 
 				} 
 				String DropSequence = "DROP SEQUENCE " + SeqName + ";"; 
 				t.Stmts.sDestDrop += DropSequence; 
 				} 
 				for (int Idx = 0; Idx < Funcs.length; Idx++) { 
 				String HSQLDB_func = Funcs[Idx][HSQLDB]; 
 				int    iStartPos   = columnType.indexOf(HSQLDB_func); 
 				if (iStartPos >= 0) { 
 				String NewColumnType = columnType.substring(0, iStartPos); 
 				
 
 LINES: 		| BitType.java: 419 - 427 || BinaryType.java: 578 - 585 |
 CLONE CLASS: 	} 
 				public long position(SessionInterface session, BlobData data, 
 				BlobData otherData, Type otherType, long offset) { 
 				if (data == null || otherData == null) { 
 				return -1L; 
 				} 
 				
 
 LINES: 		| JDBCBench.java: 621 - 630 || JDBCBench.java: 654 - 663 || JDBCBench.java: 692 - 701 |
 CLONE CLASS: 	} 
 				} 
 				if (prepared_stmt) { 
 				pstmt.close(); 
 				} 
 				if (transactions) { 
 				Conn.commit(); 
 				} 
 				
 
 LINES: 		| RangeVariable.java: 1369 - 1378 || RangeVariable.java: 1486 - 1495 |
 CLONE CLASS: 	boolean result = false; 
 				while (true) { 
 				currentRow = it.getNextRow(); 
 				if (currentRow == null) { 
 				break; 
 				} 
 				currentData = currentRow.getData(); 
 				
 
 LINES: 		| ParserDDL.java: 2809 - 2817 || ParserDDL.java: 4193 - 4201 |
 CLONE CLASS: 	read(); 
 				readThis(Tokens.BY); 
 				long value = readBigint(); 
 				sequence.setIncrement(value); 
 				break; 
 				} 
 				
 
 LINES: 		| TestGroupByHaving.java: 199 - 206 || TestGroupByHaving.java: 226 - 233 |
 CLONE CLASS: 	+ "order by superior_id " + ""; 
 				Object[][] expected = new Object[][] { 
 				{ 
 				new Double(42500), new Integer(13) 
 				}, { 
 				new Double(45000), new Integer(23) 
 				}, 
 				}; 
 				
 
 LINES: 		| TestINPredicateParameterizationAndCorrelation.java: 214 - 221 || TestLikePredicateOptimizations.java: 305 - 312 |
 CLONE CLASS: 	+ count); 
 				failures = result.failures(); 
 				while (failures.hasMoreElements()) { 
 				System.out.println(failures.nextElement()); 
 				} 
 				} 
 				
 
 LINES: 		| NodeAVLDiskLarge.java: 268 - 276 || NodeAVLDisk.java: 312 - 320 |
 CLONE CLASS: 	} 
 				if (node.iParent == NO_POS) { 
 				return true; 
 				} 
 				if (node.nParent == null || !node.nParent.isInMemory()) { 
 				node.nParent = findNode(store, iParent); 
 				} 
 				
 
 LINES: 		| JDBCArrayBasic.java: 506 - 529 || JDBCArray.java: 549 - 572 |
 CLONE CLASS: 	return data; 
 				} 
 				private Result newColumnResult(long position, 
 				int count) throws SQLException { 
 				if (!JDBCClobClient.isInLimits(data.length, position, count)) { 
 				throw JDBCUtil.outOfRangeArgument(); 
 				} 
 				Type[] types = new Type[2]; 
 				types[0] = Type.SQL_INTEGER; 
 				types[1] = elementType; 
 				ResultMetaData meta = ResultMetaData.newSimpleResultMetaData(types); 
 				meta.columnLabels = new String[] { 
 				"C1", "C2" 
 				}; 
 				meta.colIndexes   = new int[] { 
 				-1, -1 
 				}; 
 				meta.columns      = new ColumnBase[2]; 
 				
 
 LINES: 		| NumberType.java: 867 - 872 || PgType.java: 364 - 369 || JDBCPreparedStatement.java: 4241 - 4246 |
 CLONE CLASS: 	case Types.SQL_BIGINT : 
 				case Types.SQL_REAL : 
 				case Types.SQL_FLOAT : 
 				case Types.SQL_DOUBLE : 
 				case Types.SQL_NUMERIC : 
 				case Types.SQL_DECIMAL : 
 				
 
 LINES: 		| DataFileCache.java: 991 - 1004 || DataFileCache.java: 1018 - 1031 |
 CLONE CLASS: 	CachedObject object; 
 				if (pos < 0) { 
 				return null; 
 				} 
 				readLock.lock(); 
 				try { 
 				object = cache.get(pos); 
 				if (object != null) { 
 				if (keep) { 
 				object.keepInMemory(true); 
 				
 
 LINES: 		| FunctionSQLInvoked.java: 247 - 255 || FunctionCustom.java: 3682 - 3690 |
 CLONE CLASS: 	} 
 				sb.append(nodes[i].getSQL()); 
 				} 
 				sb.append(')'); 
 				return sb.toString(); 
 				} 
 				
 
 LINES: 		| SessionData.java: 623 - 628 || SessionData.java: 647 - 652 |
 CLONE CLASS: 	} finally { 
 				try { 
 				is.close(); 
 				} catch (Exception e) {} 
 				} 
 				} 
 				
 
 LINES: 		| Scanner.java: 2066 - 2072 || Scanner.java: 2218 - 2224 |
 CLONE CLASS: 	for (; currentPart <= lastPart; ) { 
 				boolean endOfPart = false; 
 				if (i == intervalString.length()) { 
 				if (currentPart == lastPart) { 
 				endOfPart = true; 
 				} else { 
 				
 
 LINES: 		| RowType.java: 247 - 261 || RowType.java: 272 - 286 |
 CLONE CLASS: 	if (otherType == null) { 
 				return true; 
 				} 
 				if (!otherType.isRowType()) { 
 				return false; 
 				} 
 				Type[] otherTypes = ((RowType) otherType).getTypesArray(); 
 				if (dataTypes.length != otherTypes.length) { 
 				return false; 
 				} 
 				for (int i = 0; i < dataTypes.length; i++) { 
 				
 
 LINES: 		| RowStoreAVLHybrid.java: 154 - 168 || RowStoreAVLHybridExtended.java: 75 - 89 |
 CLONE CLASS: 	} 
 				public void add(Session session, CachedObject object, boolean tx) { 
 				if (isCached) { 
 				int size = object.getRealSize(cache.rowOut); 
 				size += indexList.length * NodeAVLDisk.SIZE_IN_BYTE; 
 				size = cache.rowOut.getStorageSize(size); 
 				object.setStorageSize(size); 
 				long pos = tableSpace.getFilePosition(size, false); 
 				object.setPos(pos); 
 				
 
 LINES: 		| IndexAVLMemory.java: 156 - 171 || IndexAVL.java: 670 - 685 |
 CLONE CLASS: 	if (l != null && l.getBalance(store) == -2) { 
 				System.out.print("broken index - deleted"); 
 				} 
 				if (r != null && r.getBalance(store) == -2) { 
 				System.out.print("broken index -deleted"); 
 				} 
 				if (l != null && !p.equals(l.getParent(store))) { 
 				System.out.print("broken index - no parent"); 
 				} 
 				if (r != null && !p.equals(r.getParent(store))) { 
 				System.out.print("broken index - no parent"); 
 				} 
 				} 
 				
 
 LINES: 		| TransactionManagerMVCC.java: 695 - 702 || TransactionManagerMVCC.java: 759 - 766 || TransactionManagerMV2PL.java: 531 - 538 |
 CLONE CLASS: 	session.transactionTimestamp = session.actionTimestamp; 
 				session.isTransaction        = true; 
 				liveTransactionTimestamps.addLast( 
 				session.transactionTimestamp); 
 				transactionCount++; 
 				} 
 				
 
 LINES: 		| BitType.java: 452 - 470 || CharacterType.java: 815 - 833 || BinaryType.java: 610 - 628 |
 CLONE CLASS: 	throw Error.error(ErrorCode.X_22011); 
 				} 
 				if (offset > end || end < 0) { 
 				offset = 0; 
 				end    = 0; 
 				} 
 				if (offset < 0) { 
 				offset = 0; 
 				} 
 				if (end > dataLength) { 
 				end = dataLength; 
 				} 
 				length = end - offset; 
 				
 
 LINES: 		| TransferDb.java: 298 - 315 || TransferDb.java: 330 - 347 |
 CLONE CLASS: 	} catch (SQLException e) { 
 				result = null; 
 				} 
 				try { 
 				if (result != null) { 
 				while (result.next()) { 
 				ret.addElement(result.getString(1)); 
 				} 
 				result.close(); 
 				} 
 				} catch (SQLException e) { 
 				throw new DataAccessPointException(e.toString()); 
 				} 
 				return (ret); 
 				} 
 				
 
 LINES: 		| TriggerSample.java: 270 - 275 || TriggerSample.java: 295 - 300 || TriggerSample.java: 270 - 275 || TriggerSample.java: 295 - 300 |
 CLONE CLASS: 	} 
 				default : { 
 				return ""; 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| BitMap.java: 612 - 626 || BitMap.java: 635 - 649 |
 CLONE CLASS: 	int    length      = a.length > b.length ? a.length 
 				: b.length; 
 				int    shortLength = a.length > b.length ? b.length 
 				: a.length; 
 				byte[] map         = new byte[length]; 
 				if (length != shortLength) { 
 				byte[] source = a.length > b.length ? a 
 				: b; 
 				System.arraycopy(source, shortLength, map, shortLength, 
 				length - shortLength); 
 				} 
 				for (int i = 0; i < shortLength; i++) { 
 				
 
 LINES: 		| LockFile.java: 1577 - 1582 || LockFile.java: 1665 - 1670 |
 CLONE CLASS: 	throws LockFile.FileSecurityException, 
 				LockFile.LockHeldExternallyException, 
 				LockFile.UnexpectedFileNotFoundException, 
 				LockFile.UnexpectedEndOfFileException, 
 				LockFile.UnexpectedFileIOException, LockFile.WrongLengthException, 
 				LockFile.WrongMagicException { 
 				
 
 LINES: 		| FunctionCustom.java: 1235 - 1241 || FunctionCustom.java: 1706 - 1712 |
 CLONE CLASS: 	if (data[0] == null) { 
 				return null; 
 				} 
 				return dataType.convertToType(session, data[0], 
 				nodes[0].dataType); 
 				} 
 				
 
 LINES: 		| SchemaManager.java: 1068 - 1100 || SchemaManager.java: 1116 - 1148 |
 CLONE CLASS: 	Session session = database.sessionManager.getSysSession(); 
 				for (int i = 0; i < set.size(); i++) { 
 				HsqlName name = (HsqlName) set.get(i); 
 				switch (name.type) { 
 				case SchemaObject.VIEW : 
 				case SchemaObject.CONSTRAINT : 
 				case SchemaObject.ASSERTION : 
 				case SchemaObject.ROUTINE : 
 				case SchemaObject.PROCEDURE : 
 				case SchemaObject.FUNCTION : 
 				case SchemaObject.SPECIFIC_ROUTINE : 
 				SchemaObject object = getSchemaObject(name); 
 				object.compile(session, null); 
 				break; 
 				} 
 				} 
 				if (Error.TRACE) { 
 				HsqlArrayList list = getAllTables(false); 
 				for (int i = 0; i < list.size(); i++) { 
 				Table t = (Table) list.get(i); 
 				t.verifyConstraintsIntegrity(); 
 				} 
 				} 
 				} finally { 
 				writeLock.unlock(); 
 				} 
 				
 
 LINES: 		| JDBCBlobClient.java: 353 - 362 || JDBCClobClient.java: 700 - 709 |
 CLONE CLASS: 	} 
 				public synchronized void setWritable(JDBCResultSet result, int index) { 
 				isWritable = true; 
 				resultSet  = result; 
 				colIndex   = index; 
 				} 
 				public synchronized void clearUpdates() { 
 				
 
 LINES: 		| DatabaseInformationFull.java: 2988 - 2993 || DatabaseInformationFull.java: 5275 - 5280 || DatabaseInformationFull.java: 7580 - 7585 || DatabaseInformationFull.java: 7775 - 7780 || DatabaseInformationMain.java: 3020 - 3025 || DatabaseInformationMain.java: 3440 - 3445 |
 CLONE CLASS: 	try { 
 				t.insertSys(session, store, row); 
 				} catch (HsqlException e) {} 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| IndexAVL.java: 1786 - 1792 || IndexAVL.java: 1853 - 1859 |
 CLONE CLASS: 	} 
 				return result; 
 				} finally { 
 				readLock.unlock(); 
 				} 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 4642 - 4654 || DatabaseInformationMain.java: 2923 - 2932 |
 CLONE CLASS: 	addColumn(t, "GRANTOR", SQL_IDENTIFIER); 
 				addColumn(t, "GRANTEE", SQL_IDENTIFIER); 
 				addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER); 
 				addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER); 
 				addColumn(t, "TABLE_NAME", SQL_IDENTIFIER); 
 				addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER); 
 				addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA); 
 				addColumn(t, "IS_GRANTABLE", YES_OR_NO); 
 				HsqlName name = HsqlNameManager.newInfoSchemaObjectName( 
 				
 
 LINES: 		| IntValueHashMap.java: 117 - 123 || LongValueHashMap.java: 116 - 122 |
 CLONE CLASS: 	if (i == value) { 
 				return objectKeyTable[it.getLookup()]; 
 				} 
 				} 
 				return null; 
 				} 
 				
 
 LINES: 		| CharacterType.java: 610 - 622 || NumberType.java: 953 - 965 |
 CLONE CLASS: 	} 
 				return convertToType(session, a, otherType); 
 				} 
 				public Object convertToDefaultType(SessionInterface session, Object a) { 
 				if (a == null) { 
 				return a; 
 				} 
 				
 
 LINES: 		| StatementSchema.java: 261 - 273 || StatementCommand.java: 210 - 222 || StatementSchemaDefinition.java: 57 - 69 || StatementSimple.java: 119 - 131 || StatementSession.java: 232 - 244 |
 CLONE CLASS: 	} 
 				public Result execute(Session session) { 
 				Result result; 
 				try { 
 				result = getResult(session); 
 				} catch (Throwable t) { 
 				result = Result.newErrorResult(t, null); 
 				} 
 				if (result.isError()) { 
 				
 
 LINES: 		| DatabaseInformationFull.java: 4347 - 4364 || DatabaseInformationMain.java: 1686 - 1703 |
 CLONE CLASS: 	routines = database.schemaManager.databaseObjectIterator( 
 				SchemaObject.ROUTINE); 
 				while (routines.hasNext()) { 
 				routineSchema = (RoutineSchema) routines.next(); 
 				if (!session.getGrantee().isAccessible(routineSchema)) { 
 				continue; 
 				} 
 				Routine[] specifics = routineSchema.getSpecificRoutines(); 
 				for (int i = 0; i < specifics.length; i++) { 
 				routine     = specifics[i]; 
 				columnCount = routine.getParameterCount(); 
 				for (int j = 0; j < columnCount; j++) { 
 				ColumnSchema column = routine.getParameter(j); 
 				
 
 LINES: 		| TestOdbcTypes.java: 1141 - 1147 || TestOdbcTypes.java: 1181 - 1187 |
 CLONE CLASS: 	ps.setInt(1, 3); 
 				ps.setString(2, "xy"); 
 				assertEquals(1, ps.executeUpdate()); 
 				ps.setInt(1, 4); 
 				assertEquals(1, ps.executeUpdate()); 
 				ps.close(); 
 				netConn.commit(); 
 				
 
 LINES: 		| ParserRoutine.java: 388 - 407 || ParserRoutine.java: 449 - 468 |
 CLONE CLASS: 	if (exprList.size() > 1) { 
 				throw Error.parseError(ErrorCode.X_42602, null, 
 				scanner.getLineNumber()); 
 				} 
 				Expression expression = (Expression) exprList.get(0); 
 				if (expression.getDegree() != targetSet.size()) { 
 				throw Error.error(ErrorCode.X_42546, Tokens.T_SET); 
 				} 
 				int[] columnMap = new int[colIndexList.size()]; 
 				colIndexList.toArray(columnMap); 
 				Expression[] targets = new Expression[targetSet.size()]; 
 				targetSet.toArray(targets); 
 				for (int i = 0; i < targets.length; i++) { 
 				
 
 LINES: 		| Grantee.java: 530 - 537 || Grantee.java: 549 - 556 || Grantee.java: 568 - 575 || Grantee.java: 587 - 594 || Grantee.java: 606 - 613 || Grantee.java: 625 - 632 |
 CLONE CLASS: 	if (object instanceof Table) { 
 				Table table = (Table) object; 
 				if (isFullyAccessibleByRole(table.getName())) { 
 				return; 
 				} 
 				Right right = (Right) fullRightsMap.get(table.getName()); 
 				
 
 LINES: 		| LongKeyIntValueHashMap.java: 144 - 152 || LongKeyIntValueHashMap.java: 183 - 191 |
 CLONE CLASS: 	} 
 				public int size() { 
 				return LongKeyIntValueHashMap.this.size(); 
 				} 
 				public boolean contains(Object o) { 
 				throw new RuntimeException(); 
 				} 
 				
 
 LINES: 		| StatementCompound.java: 509 - 534 || StatementCompound.java: 577 - 602 |
 CLONE CLASS: 	} 
 				if (result.getType() == ResultConstants.DATA) { 
 				break; 
 				} 
 				} 
 				if (result.isError()) { 
 				break; 
 				} 
 				if (result.getType() == ResultConstants.VALUE) { 
 				if (result.getErrorCode() == StatementTypes.ITERATE) { 
 				if (result.getMainString() == null) { 
 				continue; 
 				} 
 				if (label != null 
 				&& label.name.equals(result.getMainString())) { 
 				continue; 
 				} 
 				break; 
 				} 
 				if (result.getErrorCode() == StatementTypes.LEAVE) { 
 				
 
 LINES: 		| Table.java: 492 - 500 || Database.java: 724 - 732 || GranteeManager.java: 771 - 779 || Logger.java: 2135 - 2143 |
 CLONE CLASS: 	} 
 				} 
 				String[] array = new String[list.size()]; 
 				list.toArray(array); 
 				return array; 
 				} 
 				
 
 LINES: 		| HsqlDeque.java: 144 - 151 || LongDeque.java: 101 - 108 |
 CLONE CLASS: 	firstindex++; 
 				elementCount--; 
 				if (elementCount == 0) { 
 				firstindex = endindex = 0; 
 				} else if (firstindex == list.length) { 
 				firstindex = 0; 
 				} 
 				
 
 LINES: 		| MultiValueHashMap.java: 80 - 88 || HashMap.java: 75 - 83 |
 CLONE CLASS: 	} 
 				public boolean containsKey(Object key) { 
 				return super.containsKey(key); 
 				} 
 				public boolean containsValue(Object value) { 
 				return super.containsValue(value); 
 				} 
 				
 
 LINES: 		| NodeAVLDiskLarge.java: 379 - 387 || NodeAVLDisk.java: 413 - 421 |
 CLONE CLASS: 	} 
 				if (!row.isInMemory()) { 
 				throw Error.runtimeError(ErrorCode.U_S0500, "NodeAVLDisk"); 
 				} 
 				row.setNodesChanged(); 
 				node.iRight = n == null ? NO_POS 
 				
 
 LINES: 		| BitType.java: 445 - 459 || CharacterType.java: 808 - 822 |
 CLONE CLASS: 	end = offset + length; 
 				} else { 
 				end = dataLength > offset ? dataLength 
 				: offset; 
 				} 
 				if (end < offset) { 
 				throw Error.error(ErrorCode.X_22011); 
 				} 
 				if (offset > end || end < 0) { 
 				offset = 0; 
 				end    = 0; 
 				
 
 LINES: 		| DatabaseInformationFull.java: 5075 - 5084 || DatabaseInformationFull.java: 5443 - 5452 || DatabaseInformationFull.java: 5663 - 5672 |
 CLONE CLASS: 	return t; 
 				} 
 				final int specific_catalog = 0; 
 				final int specific_schema  = 1; 
 				final int specific_name    = 2; 
 				final int routine_catalog  = 3; 
 				final int routine_schema   = 4; 
 				final int routine_name     = 5; 
 				
 
 LINES: 		| ExpressionAccessor.java: 75 - 83 || Expression.java: 1155 - 1163 || ExpressionAggregate.java: 222 - 230 || FunctionCustom.java: 2176 - 2184 || FunctionSQL.java: 1198 - 1206 || ExpressionTable.java: 95 - 103 || ExpressionArithmetic.java: 251 - 259 |
 CLONE CLASS: 	} 
 				public void resolveTypes(Session session, Expression parent) { 
 				for (int i = 0; i < nodes.length; i++) { 
 				if (nodes[i] != null) { 
 				nodes[i].resolveTypes(session, this); 
 				} 
 				} 
 				
 
 LINES: 		| ArrayUtil.java: 632 - 638 || ArrayUtil.java: 674 - 680 |
 CLONE CLASS: 	return k; 
 				} 
 				} 
 				} 
 				return -1; 
 				} 
 				
 
 LINES: 		| TestKarl.java: 234 - 247 || TestKarl.java: 269 - 282 |
 CLONE CLASS: 	for (int i = 1; i <= col_count; i++) { 
 				System.out.print(rs.getMetaData().getColumnLabel(i) + "\t"); 
 				} 
 				System.out.println(""); 
 				while (rs.next()) { 
 				for (int i = 1; i <= col_count; i++) { 
 				System.out.print(rs.getObject(i)); 
 				System.out.print("\t"); 
 				} 
 				System.out.println(""); 
 				} 
 				
 
 LINES: 		| StatementSchemaDefinition.java: 32 - 38 || StatementSession.java: 32 - 38 |
 CLONE CLASS: 	package org.hsqldb; 
 				import org.hsqldb.HsqlNameManager.HsqlName; 
 				import org.hsqldb.error.Error; 
 				import org.hsqldb.error.ErrorCode; 
 				import org.hsqldb.lib.HsqlArrayList; 
 				import org.hsqldb.result.Result; 
 				
 
 LINES: 		| JDBCStatement.java: 1737 - 1763 || JDBCResultSet.java: 6979 - 7005 || JDBCParameterMetaData.java: 289 - 315 || JDBCDatabaseMetaData.java: 5806 - 5832 || JDBCResultSetMetaData.java: 845 - 871 || JDBCPreparedStatement.java: 3810 - 3836 || JDBCDataSource.java: 221 - 247 |
 CLONE CLASS: 	} 
 				throw JDBCUtil.invalidArgument("iface: " + iface); 
 				} 
 				public boolean isWrapperFor( 
 				java.lang.Class<?> iface) throws java.sql.SQLException { 
 				return (iface != null && iface.isAssignableFrom(this.getClass())); 
 				} 
 				
 
 LINES: 		| ResultLob.java: 139 - 145 || ResultLob.java: 178 - 184 |
 CLONE CLASS: 	result.lobID       = id; 
 				result.blockOffset = offset; 
 				result.byteBlock   = block; 
 				result.blockLength = block.length; 
 				return result; 
 				} 
 				
 
 LINES: 		| DatabaseManagerSwing.java: 482 - 539 || DatabaseManager.java: 260 - 317 |
 CLONE CLASS: 	if (lowerArg.startsWith("--")) { 
 				lowerArg = lowerArg.substring(1); 
 				} 
 				if (lowerArg.equals("-noexit") || lowerArg.equals("-help")) { 
 				} else if (i == arg.length - 1) { 
 				throw new IllegalArgumentException("No value for argument " 
 				+ currentArg); 
 				} 
 				i++; 
 				if (lowerArg.equals("-driver")) { 
 				defDriver   = arg[i]; 
 				autoConnect = true; 
 				} else if (lowerArg.equals("-url")) { 
 				defURL      = arg[i]; 
 				autoConnect = true; 
 				} else if (lowerArg.equals("-user")) { 
 				defUser     = arg[i]; 
 				autoConnect = true; 
 				} else if (lowerArg.equals("-password")) { 
 				defPassword = arg[i]; 
 				autoConnect = true; 
 				} else if (lowerArg.equals("-urlid")) { 
 				urlid        = arg[i]; 
 				urlidConnect = true; 
 				} else if (lowerArg.equals("-rcfile")) { 
 				rcFile       = arg[i]; 
 				urlidConnect = true; 
 				} else if (lowerArg.equals("-dir")) { 
 				defDirectory = arg[i]; 
 				} else if (lowerArg.equals("-script")) { 
 				defScript = arg[i]; 
 				} else if (lowerArg.equals("-noexit")) { 
 				bMustExit = false; 
 				i--; 
 				} else if (lowerArg.equals("-help")) { 
 				showUsage(); 
 				return; 
 				} else { 
 				throw new IllegalArgumentException( 
 				"invalid argrument " + currentArg + " try:  java... " 
 				+ DatabaseManagerSwing.class.getName() + " --help"); 
 				} 
 				} 
 				
 
 LINES: 		| RowType.java: 124 - 132 || RowType.java: 368 - 376 || ArrayType.java: 150 - 158 |
 CLONE CLASS: 	return -1; 
 				} 
 				if (b == null) { 
 				return 1; 
 				} 
 				Object[] arra   = (Object[]) a; 
 				Object[] arrb   = (Object[]) b; 
 				
 
 LINES: 		| ParserDQL.java: 2376 - 2384 || ParserDQL.java: 3621 - 3629 |
 CLONE CLASS: 	read(); 
 				readThis(Tokens.OPENBRACKET); 
 				e = XreadRowElementList(true); 
 				readThis(Tokens.CLOSEBRACKET); 
 				break; 
 				default : 
 				
 
 LINES: 		| RangeVariableResolver.java: 1076 - 1082 || RangeVariableResolver.java: 1454 - 1460 |
 CLONE CLASS: 	break; 
 				} 
 				case OpTypes.SMALLER : 
 				case OpTypes.SMALLER_EQUAL : 
 				case OpTypes.GREATER : 
 				case OpTypes.GREATER_EQUAL : 
 				case OpTypes.GREATER_EQUAL_PRE : { 
 				
 
 LINES: 		| SqlFile.java: 6145 - 6154 || OdbcUtil.java: 252 - 261 |
 CLONE CLASS: 	char c; 
 				int octet; 
 				for (int i = 0; i < chars; i++) { 
 				octet = 0; 
 				c = hexChars.charAt(i); 
 				if (c >= 'a' && c <= 'f') { 
 				octet += 10 + c - 'a'; 
 				} else if (c >= 'A' && c <= 'F') { 
 				octet += 10 + c - 'A'; 
 				} else if (c >= '0' && c <= '9') { 
 				
 
 LINES: 		| BaseHashMap.java: 348 - 355 || BaseHashMap.java: 679 - 686 |
 CLONE CLASS: 	if (longKey == longKeyTable[lookup]) { 
 				break; 
 				} 
 				} 
 				} 
 				if (lookup >= 0) { 
 				if (remove) { 
 				
 
 LINES: 		| TestCacheSize.java: 733 - 739 || TestCacheSize.java: 775 - 781 || TestCacheSize.java: 821 - 827 || TestCacheSize.java: 863 - 869 |
 CLONE CLASS: 	} catch (SQLException e) { 
 				System.out.println("error : " + random); 
 				e.printStackTrace(); 
 				} 
 				long time = sw.elapsedTime(); 
 				long rate = (i * 1000) / (time + 1); 
 				
 
 LINES: 		| JDBCArrayBasic.java: 106 - 131 || JDBCArray.java: 108 - 133 |
 CLONE CLASS: 	public String getBaseTypeName() throws SQLException { 
 				checkClosed(); 
 				return elementType.getNameString(); 
 				} 
 				public int getBaseType() throws SQLException { 
 				checkClosed(); 
 				return elementType.getJDBCTypeCode(); 
 				} 
 				
 
 LINES: 		| DirectoryBlockCachedObject.java: 32 - 40 || IntArrayCachedObject.java: 32 - 40 |
 CLONE CLASS: 	package org.hsqldb.persist; 
 				import java.io.IOException; 
 				import org.hsqldb.error.Error; 
 				import org.hsqldb.error.ErrorCode; 
 				import org.hsqldb.lib.LongLookup; 
 				import org.hsqldb.rowio.RowInputInterface; 
 				import org.hsqldb.rowio.RowOutputInterface; 
 				
 
 LINES: 		| JDBCResultSet.java: 4731 - 4744 || JDBCCallableStatement.java: 1285 - 1298 |
 CLONE CLASS: 	Type.SQL_DATE); 
 				if (t == null) { 
 				return null; 
 				} 
 				long millis = t.getSeconds() * 1000; 
 				if (cal != null) { 
 				millis = HsqlDateTime.convertMillisToCalendar(cal, millis); 
 				} 
 				return new Date(millis); 
 				} 
 				
 
 LINES: 		| ParserRoutine.java: 2050 - 2060 || ParserRoutine.java: 2086 - 2096 |
 CLONE CLASS: 	statement = new StatementExpression(session, compileContext, 
 				StatementTypes.CONDITION, 
 				condition); 
 				list.add(statement); 
 				readThis(Tokens.THEN); 
 				statements = compileSQLProcedureStatementList(routine, context); 
 				for (int i = 0; i < statements.length; i++) { 
 				list.add(statements[i]); 
 				
 
 LINES: 		| StatementQuery.java: 98 - 105 || StatementDML.java: 298 - 305 |
 CLONE CLASS: 	} 
 				for (int i = 0; i < routines.length; i++) { 
 				set.addAll(routines[i].getTableNamesForRead()); 
 				} 
 				} 
 				void collectTableNamesForWrite(OrderedHashSet set) { 
 				
 
 LINES: 		| Collation.java: 499 - 507 || Constraint.java: 306 - 314 || Charset.java: 193 - 201 || Grantee.java: 162 - 170 || IndexAVL.java: 251 - 259 |
 CLONE CLASS: 	public OrderedHashSet getComponents() { 
 				return null; 
 				} 
 				public void compile(Session session, SchemaObject parentObject) {} 
 				public String getSQL() { 
 				StringBuffer sb = new StringBuffer(); 
 				
 
 LINES: 		| JDBCResultSet.java: 4379 - 4417 || JDBCResultSet.java: 7611 - 7622 |
 CLONE CLASS: 	throw JDBCUtil.notSupported(); 
 				} 
 				public Blob getBlob(int columnIndex) throws SQLException { 
 				checkColumn(columnIndex); 
 				Type   sourceType = resultMetaData.columnTypes[columnIndex - 1]; 
 				Object o          = getColumnInType(columnIndex, sourceType); 
 				if (o == null) { 
 				return null; 
 				
 
 LINES: 		| ArrayUtil.java: 542 - 555 || ArrayUtil.java: 566 - 579 |
 CLONE CLASS: 	int k     = 0; 
 				int limit = arra.length - start; 
 				if (limit > arrb.length) { 
 				limit = arrb.length; 
 				} 
 				for (int i = 0; i < limit; i++) { 
 				if (arra[i + start] == arrb[i]) { 
 				k++; 
 				} else { 
 				break; 
 				} 
 				} 
 				
 
 LINES: 		| TestBench.java: 44 - 49 || JDBCBench.java: 14 - 19 |
 CLONE CLASS: 	import java.io.PrintStream; 
 				import java.sql.Connection; 
 				import java.sql.DriverManager; 
 				import java.sql.PreparedStatement; 
 				import java.sql.ResultSet; 
 				import java.sql.SQLException; 
 				
 
 LINES: 		| BaseHashMap.java: 1363 - 1371 || BaseHashMap.java: 1375 - 1383 |
 CLONE CLASS: 	if (hashIndex.elementCount == 0) { 
 				return false; 
 				} 
 				int lookup = getLookup(key); 
 				return lookup == -1 ? false 
 				: true; 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 1966 - 1974 || DatabaseInformationFull.java: 4549 - 4556 |
 CLONE CLASS: 	Constraint   constraint; 
 				Object[]     row; 
 				tables = 
 				database.schemaManager.databaseObjectIterator(SchemaObject.TABLE); 
 				while (tables.hasNext()) { 
 				table = (Table) tables.next(); 
 				
 
 LINES: 		| LobManager.java: 1502 - 1510 || LobManager.java: 2119 - 2127 |
 CLONE CLASS: 	localLength); 
 				if (read == -1) { 
 				return Result.newErrorResult(new EOFException()); 
 				} 
 				localLength -= read; 
 				count       += read; 
 				} 
 				
 
 LINES: 		| TransferDb.java: 108 - 114 || TransferDb.java: 125 - 131 || TransferDb.java: 886 - 892 |
 CLONE CLASS: 	if (srcStatement != null) { 
 				try { 
 				srcStatement.close(); 
 				} catch (SQLException e) {} 
 				srcStatement = null; 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 3376 - 3382 || DatabaseInformationFull.java: 3556 - 3562 || DatabaseInformationFull.java: 4283 - 4289 |
 CLONE CLASS: 	addColumn(t, "MAXIMUM_CARDINALITY", CARDINAL_NUMBER); 
 				addColumn(t, "DTD_IDENTIFIER", SQL_IDENTIFIER); 
 				addColumn(t, "DECLARED_DATA_TYPE", CHARACTER_DATA); 
 				addColumn(t, "DECLARED_NUMERIC_PRECISION", CARDINAL_NUMBER); 
 				addColumn(t, "DECLARED_NUMERIC_SCALE", CARDINAL_NUMBER); 
 				HsqlName name = HsqlNameManager.newInfoSchemaObjectName( 
 				
 
 LINES: 		| TestBase.java: 32 - 142 || TestBase.java: 32 - 142 |
 CLONE CLASS: 	package org.hsqldb.test; 
 				import java.lang.reflect.Constructor; 
 				import java.sql.Connection; 
 				import java.sql.DriverManager; 
 				import java.sql.SQLException; 
 				import org.hsqldb.server.Server; 
 				import org.hsqldb.server.WebServer; 
 				import junit.framework.TestCase; 
 				import junit.framework.TestResult; 
 				public abstract class TestBase extends TestCase { 
 				String  dbPath = "mem:test;sql.enforce_strict_size=true"; 
 				String  serverProps; 
 				String  url; 
 				String  user     = "sa"; 
 				String  password = ""; 
 				Server  server; 
 				boolean isNetwork = true; 
 				boolean isHTTP    = false; 
 				boolean isServlet = false; 
 				public TestBase(String name) { 
 				super(name); 
 				} 
 				public TestBase(String name, String url, boolean isNetwork, 
 				boolean isHTTP) { 
 				super(name); 
 				this.isNetwork = isNetwork; 
 				this.url       = url; 
 				this.isHTTP    = isHTTP; 
 				} 
 				protected void setUp() { 
 				if (isNetwork) { 
 				if (url == null) { 
 				if (isServlet) { 
 				url = "jdbc:hsqldb:http: 
 				} else if (isHTTP) { 
 				url = "jdbc:hsqldb:http: 
 				} else { 
 				url = "jdbc:hsqldb:hsql: 
 				} 
 				} 
 				if (!isServlet) { 
 				server = isHTTP ? new WebServer() 
 				: new Server(); 
 				if (isHTTP) { 
 				server.setPort(8085); 
 				} 
 				server.setDatabaseName(0, "test"); 
 				server.setDatabasePath(0, dbPath); 
 				server.setLogWriter(null); 
 				server.setErrWriter(null); 
 				server.start(); 
 				} 
 				} else { 
 				if (url == null) { 
 				url = "jdbc:hsqldb:" + dbPath; 
 				} 
 				} 
 				try { 
 				Class.forName("org.hsqldb.jdbc.JDBCDriver"); 
 				} catch (Exception e) { 
 				e.printStackTrace(); 
 				System.out.println(this + ".setUp() error: " + e.getMessage()); 
 				} 
 				} 
 				
 
 LINES: 		| NodeAVLDiskLarge.java: 177 - 191 || NodeAVLDisk.java: 221 - 235 |
 CLONE CLASS: 	} 
 				if (node.iLeft == NO_POS) { 
 				return null; 
 				} 
 				if (node.nLeft == null || !node.nLeft.isInMemory()) { 
 				node.nLeft         = findNode(store, node.iLeft); 
 				node.nLeft.nParent = node; 
 				} 
 				return node.nLeft; 
 				} 
 				NodeAVL getRight(PersistentStore store) { 
 				
 
 LINES: 		| Document.java: 39 - 44 || JDBCSQLXML.java: 38 - 43 |
 CLONE CLASS: 	import java.io.IOException; 
 				import java.io.InputStream; 
 				import java.io.InputStreamReader; 
 				import java.io.OutputStream; 
 				import java.io.OutputStreamWriter; 
 				import java.io.Reader; 
 				
 
 LINES: 		| OrderedLongKeyHashMap.java: 175 - 183 || OrderedLongKeyHashMap.java: 214 - 222 |
 CLONE CLASS: 	} 
 				public int size() { 
 				return OrderedLongKeyHashMap.this.size(); 
 				} 
 				public boolean contains(Object o) { 
 				throw new RuntimeException(); 
 				} 
 				
 
 LINES: 		| TestPreparedSubQueries.java: 262 - 269 || TestPreparedSubQueries.java: 311 - 317 |
 CLONE CLASS: 	} 
 				assertTrue(valid); 
 				} catch (Exception e) { 
 				assertTrue(false); 
 				} 
 				} 
 				
 
 LINES: 		| TestBench.java: 915 - 934 || TestBench.java: 1029 - 1048 |
 CLONE CLASS: 	Conn.commit(); 
 				return aBalance; 
 				} catch (Exception E) { 
 				if (verbose) { 
 				System.out.println("Transaction failed: " 
 				+ E.getMessage()); 
 				E.printStackTrace(); 
 				} 
 				incrementFailedTransactionCount(); 
 				try { 
 				Conn.rollback(); 
 				} catch (SQLException E1) {} 
 				} 
 				return 0; 
 				} 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 4819 - 4831 || DatabaseInformationMain.java: 3350 - 3360 |
 CLONE CLASS: 	addColumn(t, "GRANTOR", SQL_IDENTIFIER); 
 				addColumn(t, "GRANTEE", SQL_IDENTIFIER); 
 				addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER); 
 				addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER); 
 				addColumn(t, "TABLE_NAME", SQL_IDENTIFIER); 
 				addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA); 
 				addColumn(t, "IS_GRANTABLE", YES_OR_NO); 
 				addColumn(t, "WITH_HIERARCHY", YES_OR_NO); 
 				HsqlName name = HsqlNameManager.newInfoSchemaObjectName( 
 				
 
 LINES: 		| Trigger.java: 32 - 128 || Trigger.java: 32 - 128 |
 CLONE CLASS: 	package org.hsqldb; 
 				public interface Trigger { 
 				int INSERT_AFTER      = 0; 
 				int DELETE_AFTER      = 1; 
 				int UPDATE_AFTER      = 2; 
 				int INSERT_AFTER_ROW  = 3; 
 				int DELETE_AFTER_ROW  = 4; 
 				int UPDATE_AFTER_ROW  = 5; 
 				int INSERT_BEFORE_ROW = 6; 
 				int DELETE_BEFORE_ROW = 7; 
 				int UPDATE_BEFORE_ROW = 8; 
 				void fire(int type, String trigName, String tabName, Object[] oldRow, 
 				Object[] newRow) throws HsqlException; 
 				} 
 				
 
 LINES: 		| HSQLDialect.java: 623 - 634 || HSQLDialect.java: 571 - 582 |
 CLONE CLASS: 	if ( hsqldbVersion < 20 ) { 
 				return new ReadUncommittedLockingStrategy( lockable, lockMode ); 
 				} 
 				else { 
 				return new SelectLockingStrategy( lockable, lockMode ); 
 				} 
 				} 
 				public static class ReadUncommittedLockingStrategy extends SelectLockingStrategy { 
 				public ReadUncommittedLockingStrategy(Lockable lockable, LockMode lockMode) { 
 				super( lockable, lockMode ); 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 3631 - 3637 || DatabaseInformationFull.java: 3747 - 3753 |
 CLONE CLASS: 	addTypeInfo(row, ((ArrayType) type).collectionBaseType()); 
 				try { 
 				t.insertSys(session, store, row); 
 				} catch (HsqlException e) {} 
 				} 
 				} 
 				
 
 LINES: 		| Session.java: 546 - 552 || Session.java: 587 - 593 |
 CLONE CLASS: 	if (isClosed) { 
 				return; 
 				} 
 				if (sessionContext.depth > 0) { 
 				return; 
 				} 
 				
 
 LINES: 		| TestBench.java: 687 - 697 || JDBCBench.java: 779 - 789 |
 CLONE CLASS: 	E.printStackTrace(); 
 				} 
 				} 
 				void checkSums(Connection conn) throws SQLException { 
 				Statement st1 = null; 
 				ResultSet rs  = null; 
 				int       bbalancesum; 
 				int       tbalancesum; 
 				int       abalancesum; 
 				
 
 LINES: 		| DataFileCacheSession.java: 124 - 129 || DataFileCache.java: 712 - 717 || DataFileCache.java: 804 - 809 || TextCache.java: 217 - 222 || TextCache.java: 249 - 254 |
 CLONE CLASS: 	t.toString(), dataFileName 
 				}); 
 				} finally { 
 				writeLock.unlock(); 
 				} 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 5273 - 5279 || DatabaseInformationMain.java: 3018 - 3024 |
 CLONE CLASS: 	: "NO"; 
 				try { 
 				t.insertSys(session, store, row); 
 				} catch (HsqlException e) {} 
 				} 
 				} 
 				
 
 LINES: 		| RowSetNavigatorData.java: 481 - 490 || RowSetNavigatorDataTable.java: 496 - 505 |
 CLONE CLASS: 	Object[] lastRowData = null; 
 				while (hasNext()) { 
 				Object[] currentData = getNext(); 
 				if (hasNull(currentData)) { 
 				continue; 
 				} 
 				if (lastRowData != null 
 				
 
 LINES: 		| BooleanType.java: 82 - 89 || RowType.java: 292 - 299 || ArrayType.java: 389 - 396 |
 CLONE CLASS: 	return true; 
 				} 
 				public Type getAggregateType(Type other) { 
 				if (other == null) { 
 				return this; 
 				} 
 				
 
 LINES: 		| TestHTTPKeepAlive.java: 131 - 138 || TestKarl.java: 145 - 152 |
 CLONE CLASS: 	try { 
 				c.close(); 
 				} catch (SQLException e) { 
 				e.printStackTrace(); 
 				} 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 2989 - 2994 || DatabaseInformationMain.java: 3021 - 3026 || DatabaseInformationMain.java: 3441 - 3446 |
 CLONE CLASS: 	t.insertSys(session, store, row); 
 				} catch (HsqlException e) {} 
 				} 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| SchemaManager.java: 2592 - 2601 || SchemaManager.java: 2634 - 2643 || SchemaManager.java: 2664 - 2673 || SchemaManager.java: 2695 - 2704 || SchemaManager.java: 2779 - 2788 |
 CLONE CLASS: 	} 
 				String[] array = new String[list.size()]; 
 				list.toArray(array); 
 				return array; 
 				} finally { 
 				readLock.unlock(); 
 				} 
 				
 
 LINES: 		| RowInputText.java: 232 - 244 || RowInputTextLog.java: 206 - 218 |
 CLONE CLASS: 	} 
 				public int readType() throws IOException { 
 				return 0; 
 				} 
 				protected boolean readNull() { 
 				return false; 
 				} 
 				protected String readChar(Type type) throws IOException { 
 				
 
 LINES: 		| IntKeyIntValueHashMap.java: 60 - 67 || LongKeyIntValueHashMap.java: 67 - 74 |
 CLONE CLASS: 	int lookup = getLookup(key); 
 				if (lookup != -1) { 
 				return intValueTable[lookup]; 
 				} 
 				throw new NoSuchElementException(); 
 				} 
 				
 
 LINES: 		| RAFileNIO.java: 432 - 439 || RAFileSimple.java: 137 - 144 |
 CLONE CLASS: 	} 
 				} 
 				public Database getDatabase() { 
 				return null; 
 				} 
 				public void synch() { 
 				
 
 LINES: 		| ExpressionOp.java: 675 - 691 || ExpressionOp.java: 753 - 769 |
 CLONE CLASS: 	escapeCount++; 
 				newArray[j++] = array[i]; 
 				wasEscape     = false; 
 				continue; 
 				} 
 				break; 
 				} 
 				if (wasEscape) { 
 				throw Error.error(ErrorCode.X_22025); 
 				} 
 				newArray[j++] = array[i]; 
 				} 
 				
 
 LINES: 		| TestHTTPKeepAlive.java: 183 - 189 || TestMerge.java: 430 - 436 |
 CLONE CLASS: 	Enumeration e = result.failures(); 
 				while (e.hasMoreElements()) { 
 				System.out.println(e.nextElement()); 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| TestSubselect.java: 35 - 41 || TestGroupByHaving.java: 34 - 40 || TestCascade.java: 40 - 46 |
 CLONE CLASS: 	import java.sql.Connection; 
 				import java.sql.DriverManager; 
 				import java.sql.ResultSet; 
 				import java.sql.SQLException; 
 				import java.sql.Statement; 
 				import junit.framework.TestCase; 
 				
 
 LINES: 		| BitMap.java: 506 - 515 || BitMap.java: 580 - 589 |
 CLONE CLASS: 	return; 
 				} 
 				shift = 8 - shift; 
 				if (count > shift) { 
 				mask           = ((source & 0xff) << 8) >>> shift; 
 				innermask      = 0xff00 >>> shift; 
 				innermask      = ~innermask; 
 				b              = map[index + 1]; 
 				
 
 LINES: 		| TransactionManagerMVCC.java: 377 - 235 || TransactionManagerMV2PL.java: 282 - 306 |
 CLONE CLASS: 	} 
 				} 
 				session.rowActionList.add(action); 
 				return action; 
 				} 
 				public void addInsertAction(Session session, Table table, 
 				PersistentStore store, Row row, 
 				int[] changedColumns) { 
 				return action; 
 				} 
 				public void addInsertAction(Session session, Table table, 
 				PersistentStore store, Row row, 
 				int[] changedColumns) { 
 				RowAction action = row.rowAction; 
 				if (action == null) { 
 				throw Error.runtimeError(ErrorCode.GENERAL_ERROR, 
 				"null insert action "); 
 				} 
 				store.indexRow(session, row); 
 				session.rowActionList.add(action); 
 				
 
 LINES: 		| KMPSearchAlgorithm.java: 463 - 474 || KMPSearchAlgorithm.java: 500 - 510 |
 CLONE CLASS: 	table[0] = -1; 
 				table[1] = 0; 
 				while (i < pattern.length) { 
 				if (pattern[i - 1] == pattern[j]) { 
 				table[i] = j + 1; 
 				j++; 
 				i++; 
 				} else if (j > 0) { 
 				j = table[j]; 
 				
 
 LINES: 		| TestOdbcService.java: 115 - 131 || TestOdbcService.java: 255 - 271 || TestOdbcService.java: 290 - 306 |
 CLONE CLASS: 	assertTrue("No rows fetched", rs.next()); 
 				assertEquals("str", rs.getString(4)); 
 				assertEquals(5, rs.getInt(1)); 
 				assertEquals(3, rs.getInt(2)); 
 				assertEquals("five", rs.getString(3)); 
 				assertTrue("No rows fetched", rs.next()); 
 				assertEquals("str", rs.getString(4)); 
 				assertEquals(10, rs.getInt(1)); 
 				assertEquals(3, rs.getInt(2)); 
 				assertEquals("ten", rs.getString(3)); 
 				assertTrue("No rows fetched", rs.next()); 
 				assertEquals("str", rs.getString(4)); 
 				assertEquals(15, rs.getInt(1)); 
 				assertEquals(3, rs.getInt(2)); 
 				assertEquals("fifteen", rs.getString(3)); 
 				
 
 LINES: 		| HsqlProperties.java: 231 - 236 || ServerProperties.java: 127 - 132 |
 CLONE CLASS: 	stringProps.load(fis); 
 				} finally { 
 				if (fis != null) { 
 				fis.close(); 
 				} 
 				} 
 				
 
 LINES: 		| IndexAVL.java: 1716 - 1721 || IndexAVL.java: 1815 - 1820 |
 CLONE CLASS: 	if (i < 0) { 
 				result = x; 
 				n      = x.getRight(store); 
 				} else { 
 				n = x.getLeft(store); 
 				} 
 				
 
 LINES: 		| BlobDataID.java: 188 - 196 || ClobDataID.java: 223 - 231 |
 CLONE CLASS: 	ResultLob resultOut = ResultLob.newLobGetTruncateLength(id); 
 				Result    resultIn  = session.execute(resultOut); 
 				if (resultIn.isError()) { 
 				throw resultIn.getException(); 
 				} 
 				return ((ResultLob) resultIn).getBlockLength(); 
 				} 
 				
 
 LINES: 		| TestSql.java: 492 - 503 || TestSqlPersistent.java: 566 - 577 |
 CLONE CLASS: 	connection.rollback(); 
 				} 
 				} 
 				} catch (SQLException e) { 
 				fail(e.getMessage()); 
 				} 
 				System.out.println("testDoubleNaN complete"); 
 				assertEquals(true, wasEqual); 
 				} 
 				
 
 LINES: 		| ParserBase.java: 469 - 477 || ParserBase.java: 504 - 512 |
 CLONE CLASS: 	boolean minus = false; 
 				if (token.tokenType == Tokens.MINUS) { 
 				minus = true; 
 				read(); 
 				} 
 				checkIsValue(); 
 				
 
 LINES: 		| JDBCStatement.java: 1735 - 1761 || JDBCConnection.java: 3225 - 3251 || JDBCResultSet.java: 6977 - 7003 || JDBCParameterMetaData.java: 287 - 313 || JDBCDatabaseMetaData.java: 5804 - 5830 || JDBCResultSetMetaData.java: 843 - 869 || JDBCPreparedStatement.java: 3808 - 3834 || JDBCDataSource.java: 219 - 245 |
 CLONE CLASS: 	if (isWrapperFor(iface)) { 
 				return (T) this; 
 				} 
 				throw JDBCUtil.invalidArgument("iface: " + iface); 
 				} 
 				public boolean isWrapperFor( 
 				java.lang.Class<?> iface) throws java.sql.SQLException { 
 				
 
 LINES: 		| ExpressionLogical.java: 982 - 988 || ExpressionArithmetic.java: 484 - 490 |
 CLONE CLASS: 	} 
 				if (nodes[LEFT].opType == OpTypes.VALUE 
 				&& nodes[RIGHT].opType == OpTypes.VALUE) { 
 				setAsConstantValue(session, parent); 
 				} 
 				} 
 				
 
 LINES: 		| HsqlSocketFactorySecure.java: 126 - 135 || HsqlSocketFactorySecure.java: 156 - 165 |
 CLONE CLASS: 	if (Error.TRACESYSTEMOUT) { 
 				Error.printSystemOut("[" + this + "]: createServerSocket()"); 
 				Error.printSystemOut("capabilities for " + ss + ":"); 
 				Error.printSystemOut("----------------------------"); 
 				dump("supported cipher suites", ss.getSupportedCipherSuites()); 
 				dump("enabled cipher suites", ss.getEnabledCipherSuites()); 
 				} 
 				return ss; 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 6810 - 6826 || DatabaseInformationFull.java: 6927 - 6943 || DatabaseInformationFull.java: 7036 - 7052 || DatabaseInformationFull.java: 7146 - 7162 |
 CLONE CLASS: 	Object[] row; 
 				it = database.schemaManager.databaseObjectIterator( 
 				SchemaObject.TRIGGER); 
 				while (it.hasNext()) { 
 				TriggerDef trigger = (TriggerDef) it.next(); 
 				if (!session.getGrantee().isFullyAccessibleByRole( 
 				trigger.getName())) { 
 				continue; 
 				} 
 				OrderedHashSet set = trigger.getReferences(); 
 				for (int i = 0; i < set.size(); i++) { 
 				HsqlName refName = (HsqlName) set.get(i); 
 				
 
 LINES: 		| TestMerge.java: 154 - 161 || TestMerge.java: 199 - 207 |
 CLONE CLASS: 	try { 
 				executeMerge( 
 				"MERGE INTO SA.T " + 
 				"USING SA.S " + 
 				"ON T.I = S.I " + 
 				"WHEN MATCHED THEN " + 
 				
 
 LINES: 		| JDBCBlob.java: 761 - 769 || JDBCClob.java: 892 - 900 |
 CLONE CLASS: 	m_createdByConnection = true; 
 				} 
 				protected synchronized void checkClosed() throws SQLException { 
 				if (m_closed) { 
 				throw JDBCUtil.sqlException(ErrorCode.X_07501); 
 				} 
 				} 
 				
 
 LINES: 		| CharacterType.java: 223 - 230 || BinaryType.java: 184 - 191 |
 CLONE CLASS: 	} 
 				} 
 				public Type getAggregateType(Type other) { 
 				if (other == null) { 
 				return this; 
 				} 
 				
 
 LINES: 		| HsqlDeque.java: 282 - 291 || LongDeque.java: 243 - 252 |
 CLONE CLASS: 	firstindex++; 
 				if (firstindex == list.length) { 
 				firstindex = 0; 
 				} 
 				} else { 
 				System.arraycopy(list, target + 1, list, target, 
 				endindex - target - 1); 
 				endindex--; 
 				
 
 LINES: 		| TestBatchExecution.java: 152 - 160 || TestBatchExecution.java: 176 - 184 || TestBatchExecution.java: 200 - 208 |
 CLONE CLASS: 	preparedTestOne(runs); 
 				println(drop_table_sql); 
 				stmnt.execute(drop_table_sql); 
 				println("---------------------------------------"); 
 				println("shutting down database"); 
 				stmnt.execute(shutdown_sql); 
 				println("---------------------------------------"); 
 				
 
 LINES: 		| TransactionManagerMVCC.java: 577 - 608 || TransactionManagerMV2PL.java: 351 - 382 |
 CLONE CLASS: 	rowActionMap.put(object.getPos(), row.rowAction); 
 				} 
 				} 
 				public void setTransactionInfo(PersistentStore store, 
 				CachedObject object) { 
 				if (object.isMemory()) { 
 				return; 
 				} 
 				Row row = (Row) object; 
 				if (row.getTable().tableType == TableBase.CACHED_TABLE) { 
 				RowAction rowact = (RowAction) rowActionMap.get(row.getPos()); 
 				row.rowAction = rowact; 
 				} 
 				} 
 				public void removeTransactionInfo(CachedObject object) { 
 				if (object.isMemory()) { 
 				return; 
 				} 
 				
 
 LINES: 		| IndexAVL.java: 1567 - 1588 || IndexAVL.java: 1593 - 1614 |
 CLONE CLASS: 	if (c == null) { 
 				break; 
 				} 
 				nodeData = c.getData(store); 
 				if (compareRow(session, data, nodeData) == 0) { 
 				row = c.getRow(store); 
 				session.database.txManager.setTransactionInfo(store, row); 
 				if (session.database.txManager.canRead( 
 				session, store, row, TransactionManager.ACTION_DUP, 
 				null)) { 
 				return true; 
 				} 
 				continue; 
 				} 
 				break; 
 				} 
 				
 
 LINES: 		| OrderedIntKeyHashMap.java: 101 - 108 || HashMap.java: 99 - 106 || HashMap.java: 111 - 118 || IntKeyHashMap.java: 86 - 93 |
 CLONE CLASS: 	int      i  = 0; 
 				while (it.hasNext()) { 
 				array[i] = it.next(); 
 				i++; 
 				} 
 				} 
 				
 
 LINES: 		| ParserDQL.java: 5543 - 5553 || ParserDQL.java: 5574 - 5584 |
 CLONE CLASS: 	read(); 
 				if (!readIfThis(Tokens.OPENBRACKET)) { 
 				rewind(position); 
 				return null; 
 				} 
 				Expression c = XreadValueExpression(); 
 				readThis(Tokens.COMMA); 
 				
 
 LINES: 		| ClobInputStream.java: 69 - 89 || BlobInputStream.java: 69 - 89 |
 CLONE CLASS: 	this.currentPosition = offset; 
 				this.streamBlockSize = session.getStreamBlockSize(); 
 				} 
 				public int read() throws IOException { 
 				checkClosed(); 
 				if (currentPosition >= availableLength) { 
 				return -1; 
 				} 
 				if (buffer == null 
 				|| currentPosition >= bufferOffset + buffer.length) { 
 				try { 
 				checkClosed(); 
 				readIntoBuffer(); 
 				} catch (Exception e) { 
 				throw JavaSystem.toIOException(e); 
 				} 
 				} 
 				
 
 LINES: 		| ClobDataID.java: 130 - 137 || ClobDataID.java: 183 - 190 |
 CLONE CLASS: 	Result    resultIn  = session.execute(resultOut); 
 				if (resultIn.isError()) { 
 				throw resultIn.getException(); 
 				} 
 				this.length = ((ResultLob) resultIn).getBlockLength(); 
 				} 
 				
 
 LINES: 		| TriggerSample.java: 332 - 340 || TriggerSample.java: 356 - 364 || TriggerSample.java: 332 - 340 || TriggerSample.java: 356 - 364 |
 CLONE CLASS: 	sb.append(trn); 
 				sb.append(' '); 
 				sb.append(getWhenSpec(typ)); 
 				sb.append(' '); 
 				sb.append(getOperationSpec(typ)); 
 				sb.append(" ON "); 
 				sb.append(tab); 
 				sb.append(' '); 
 				sb.append(getForEachSpec(typ)); 
 				
 
 LINES: 		| DatabaseManagerSwing.java: 1797 - 1850 || DatabaseManager.java: 974 - 1027 |
 CLONE CLASS: 	String       all   = txtCommand.getText(); 
 				StringBuffer b     = new StringBuffer(); 
 				long         total = 0; 
 				for (int i = 0; i < all.length(); i++) { 
 				char c = all.charAt(i); 
 				if (c != '\n') { 
 				b.append(c); 
 				} 
 				} 
 				all = b.toString(); 
 				String[] g = new String[4]; 
 				g[0] = "ms"; 
 				g[1] = "count"; 
 				g[2] = "sql"; 
 				g[3] = "error"; 
 				gResult.setHead(g); 
 				int max = 1; 
 				lTime = System.currentTimeMillis() - lTime; 
 				while (!all.equals("")) { 
 				int    i = all.indexOf(';'); 
 				String sql; 
 				if (i != -1) { 
 				sql = all.substring(0, i); 
 				all = all.substring(i + 1); 
 				} else { 
 				sql = all; 
 				all = ""; 
 				} 
 				if (sql.startsWith("--#")) { 
 				max = Integer.parseInt(sql.substring(3)); 
 				continue; 
 				} else if (sql.startsWith("--")) { 
 				continue; 
 				} 
 				g[2] = sql; 
 				long l = 0; 
 				try { 
 				l = DatabaseManagerCommon.testStatement(sStatement, sql, max); 
 				total += l; 
 				
 
 LINES: 		| Routine.java: 763 - 772 || StatementCompound.java: 972 - 981 |
 CLONE CLASS: 	} 
 				public void setCorrelated() { 
 				} 
 				public boolean isVariable() { 
 				return true; 
 				} 
 				
 
 LINES: 		| ParserDQL.java: 646 - 653 || ParserDQL.java: 672 - 679 |
 CLONE CLASS: 	throw Error.error(ErrorCode.X_42579, col.getName().name); 
 				} 
 				if (readIfThis(Tokens.COMMA)) { 
 				continue; 
 				} 
 				if (token.tokenType == Tokens.CLOSEBRACKET) { 
 				
 
 LINES: 		| RowAVLDisk.java: 187 - 196 || RowAVLDiskData.java: 188 - 197 |
 CLONE CLASS: 	accessCount = count; 
 				} 
 				public int getAccessCount() { 
 				return accessCount; 
 				} 
 				public int getStorageSize() { 
 				return storageSize; 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 3553 - 3560 || DatabaseInformationFull.java: 4280 - 4287 |
 CLONE CLASS: 	addColumn(t, "SCOPE_CATALOG", SQL_IDENTIFIER); 
 				addColumn(t, "SCOPE_SCHEMA", SQL_IDENTIFIER); 
 				addColumn(t, "SCOPE_NAME", SQL_IDENTIFIER); 
 				addColumn(t, "MAXIMUM_CARDINALITY", CARDINAL_NUMBER); 
 				addColumn(t, "DTD_IDENTIFIER", SQL_IDENTIFIER); 
 				addColumn(t, "DECLARED_DATA_TYPE", CHARACTER_DATA); 
 				addColumn(t, "DECLARED_NUMERIC_PRECISION", CARDINAL_NUMBER); 
 				addColumn(t, "DECLARED_NUMERIC_SCALE", CARDINAL_NUMBER); 
 				
 
 LINES: 		| TestOdbcTypes.java: 159 - 169 || TestOdbcTypes.java: 189 - 199 || TestOdbcTypes.java: 219 - 229 || TestOdbcTypes.java: 248 - 258 || TestOdbcTypes.java: 312 - 322 || TestOdbcTypes.java: 341 - 351 || TestOdbcTypes.java: 370 - 380 || TestOdbcTypes.java: 399 - 409 || TestOdbcTypes.java: 428 - 438 || TestOdbcTypes.java: 458 - 468 || TestOdbcTypes.java: 488 - 498 || TestOdbcTypes.java: 519 - 529 || TestOdbcTypes.java: 548 - 558 || TestOdbcTypes.java: 610 - 620 || TestOdbcTypes.java: 640 - 650 || TestOdbcTypes.java: 669 - 679 || TestOdbcTypes.java: 697 - 707 || TestOdbcTypes.java: 729 - 739 || TestOdbcTypes.java: 765 - 775 || TestOdbcTypes.java: 803 - 813 || TestOdbcTypes.java: 836 - 846 |
 CLONE CLASS: 	} finally { 
 				try { 
 				if (rs != null) { 
 				rs.close(); 
 				} 
 				if (st != null) { 
 				st.close(); 
 				} 
 				} catch(Exception e) { 
 				} 
 				} 
 				
 
 LINES: 		| BitType.java: 129 - 136 || CharacterType.java: 234 - 241 |
 CLONE CLASS: 	} 
 				if (typeCode == other.typeCode) { 
 				return precision >= other.precision ? this 
 				: other; 
 				} 
 				switch (other.typeCode) { 
 				
 
 LINES: 		| SchemaManager.java: 1635 - 1644 || SchemaManager.java: 1668 - 1677 |
 CLONE CLASS: 	if (set == null) { 
 				return; 
 				} 
 				for (int i = 0; i < set.size(); i++) { 
 				HsqlName referenced = (HsqlName) set.get(i); 
 				if (object instanceof Routine) { 
 				name = ((Routine) object).getSpecificName(); 
 				} 
 				
 
 LINES: 		| FunctionSQL.java: 983 - 998 || FunctionSQL.java: 1079 - 1094 |
 CLONE CLASS: 	case Tokens.BOTH : 
 				leading = trailing = true; 
 				break; 
 				case Tokens.LEADING : 
 				leading = true; 
 				break; 
 				case Tokens.TRAILING : 
 				trailing = true; 
 				break; 
 				default : 
 				throw Error.runtimeError(ErrorCode.U_S0500, 
 				"FunctionSQL"); 
 				} 
 				
 
 LINES: 		| RowStoreAVLHybrid.java: 291 - 304 || RowStoreAVLHybridExtended.java: 168 - 181 || RowStoreAVLMemory.java: 170 - 183 |
 CLONE CLASS: 	break; 
 				case RowAction.ACTION_INSERT : 
 				delete(session, row); 
 				remove(row); 
 				break; 
 				case RowAction.ACTION_INSERT_DELETE : 
 				remove(row); 
 				break; 
 				} 
 				} 
 				
 
 LINES: 		| JDBCConnection.java: 838 - 847 || JDBCConnection.java: 883 - 892 |
 CLONE CLASS: 	sb.append(sql.substring(tail, i)); 
 				i       = onStartEscapeSequence(sql, sb, i); 
 				tail    = i; 
 				changed = true; 
 				nest++; 
 				state = inside_escape; 
 				} 
 				
 
 LINES: 		| ExpressionLogical.java: 913 - 921 || ExpressionLogical.java: 934 - 942 |
 CLONE CLASS: 	if (session.database.sqlEnforceTypes) { 
 				throw Error.error(ErrorCode.X_42562); 
 				} 
 				if (nodes[LEFT].dataType.canConvertFrom( 
 				nodes[RIGHT].dataType)) { 
 				nodes[RIGHT] = ExpressionOp.getCastExpression(session, 
 				nodes[RIGHT], nodes[LEFT].dataType); 
 				} 
 				
 
 LINES: 		| ParserCommand.java: 756 - 778 || ParserCommand.java: 1514 - 1536 |
 CLONE CLASS: 	int delay = 0; 
 				if (token.tokenType == Tokens.TRUE) { 
 				delay = database.getProperties().getDefaultWriteDelay(); 
 				read(); 
 				} else if (token.tokenType == Tokens.FALSE) { 
 				delay = 0; 
 				read(); 
 				} else { 
 				delay = this.readInteger(); 
 				if (delay < 0) { 
 				delay = 0; 
 				} 
 				if (token.tokenType == Tokens.MILLIS) { 
 				read(); 
 				} else { 
 				delay *= 1000; 
 				} 
 				} 
 				
 
 LINES: 		| NodeAVL.java: 275 - 281 || NodeAVLDiskLarge.java: 539 - 545 || NodeAVLDisk.java: 554 - 560 |
 CLONE CLASS: 	public boolean hasChanged() { 
 				return false; 
 				} 
 				public boolean isKeepInMemory() { 
 				return false; 
 				} 
 				
 
 LINES: 		| Expression.java: 286 - 202 || ExpressionArithmetic.java: 89 - 102 |
 CLONE CLASS: 	} 
 				public String getSQL() { 
 				StringBuffer sb = new StringBuffer(64); 
 				switch (opType) { 
 				case OpTypes.VALUE : 
 				if (valueData == null) { 
 				return Tokens.T_NULL; 
 				} 
 				switch (opType) { 
 				case OpTypes.VALUE : 
 				if (valueData == null) { 
 				return Tokens.T_NULL; 
 				} 
 				if (dataType == null) { 
 				
 
 LINES: 		| TestBench.java: 105 - 117 || JDBCBench.java: 93 - 105 |
 CLONE CLASS: 	} 
 				} else if (Args[i].equals("-url")) { 
 				if (i + 1 < Args.length) { 
 				i++; 
 				DBUrl = Args[i]; 
 				} 
 				} else if (Args[i].equals("-user")) { 
 				if (i + 1 < Args.length) { 
 				i++; 
 				DBUser = Args[i]; 
 				} 
 				
 
 LINES: 		| JDBCBench.java: 448 - 455 || JDBCBench.java: 534 - 547 |
 CLONE CLASS: 	Stmt.execute(Query); 
 				Stmt.clearWarnings(); 
 				if (transactions) { 
 				Conn.commit(); 
 				} 
 				Stmt.close(); 
 				
 
 LINES: 		| TransactionManagerMVCC.java: 719 - 733 || TransactionManager2PL.java: 280 - 294 || TransactionManagerMV2PL.java: 485 - 499 |
 CLONE CLASS: 	return; 
 				} 
 				writeLock.lock(); 
 				try { 
 				if (cs.getCompileTimestamp() 
 				< database.schemaManager.getSchemaChangeTimestamp()) { 
 				cs = session.statementManager.getStatement(session, cs); 
 				session.sessionContext.currentStatement = cs; 
 				if (cs == null) { 
 				return; 
 				} 
 				} 
 				
 
 LINES: 		| KMPSearchAlgorithm.java: 278 - 287 || KMPSearchAlgorithm.java: 348 - 357 |
 CLONE CLASS: 	if (table == null) { 
 				table = computeTable(pattern); 
 				} 
 				while ((sourceIndex < sourceLength) 
 				&& (patternIndex < patternLength)) { 
 				if (source[sourceIndex] == pattern[patternIndex]) { 
 				patternIndex++; 
 				} else { 
 				
 
 LINES: 		| TestDatabaseMetaData.java: 205 - 210 || TestDatabaseMetaData.java: 244 - 249 || TestDatabaseMetaData.java: 266 - 271 |
 CLONE CLASS: 	} catch (Exception e) { 
 				assertTrue("unable to prepare or execute DDL", false); 
 				} finally { 
 				conn.close(); 
 				} 
 				} 
 				
 
 LINES: 		| TestBench.java: 78 - 90 || JDBCBench.java: 47 - 59 |
 CLONE CLASS: 	MemoryWatcherThread     MemoryWatcher; 
 				public static void main(String[] Args) { 
 				String  DriverName         = ""; 
 				String  DBUrl              = ""; 
 				String  DBUser             = ""; 
 				String  DBPassword         = ""; 
 				
 
 LINES: 		| DatabaseInformationMain.java: 2366 - 2374 || DatabaseInformationMain.java: 3546 - 3554 |
 CLONE CLASS: 	? (table.onCommitPreserve() ? "PRESERVE" 
 				: "DELETE") 
 				: null; 
 				t.insertSys(session, store, row); 
 				} 
 				return t; 
 				} 
 				
 
 LINES: 		| OrderedIntKeyHashMap.java: 103 - 113 || HashMap.java: 113 - 123 || IntKeyHashMap.java: 88 - 98 |
 CLONE CLASS: 	while (it.hasNext()) { 
 				array[i] = it.next(); 
 				i++; 
 				} 
 				} 
 				public Set keySet() { 
 				if (keySet == null) { 
 				keySet = new KeySet(); 
 				
 
 LINES: 		| TimestampData.java: 69 - 78 || TimeData.java: 67 - 76 |
 CLONE CLASS: 	return seconds; 
 				} 
 				public int getNanos() { 
 				return nanos; 
 				} 
 				public int getZone() { 
 				return zone; 
 				} 
 				
 
 LINES: 		| Testdb.java: 32 - 202 || Testdb.java: 32 - 202 |
 CLONE CLASS: 	package org.hsqldb.sample; 
 				import java.sql.Connection; 
 				import java.sql.DriverManager; 
 				import java.sql.ResultSet; 
 				import java.sql.ResultSetMetaData; 
 				import java.sql.SQLException; 
 				import java.sql.Statement; 
 				public class Testdb { 
 				Connection conn; 
 				public Testdb(String db_file_name_prefix) throws Exception { 
 				Class.forName("org.hsqldb.jdbc.JDBCDriver"); 
 				conn = DriverManager.getConnection("jdbc:hsqldb:" 
 				+ db_file_name_prefix, 
 				"SA", 
 				""); 
 				} 
 				public void shutdown() throws SQLException { 
 				Statement st = conn.createStatement(); 
 				st.execute("SHUTDOWN"); 
 				conn.close(); 
 				} 
 				public synchronized void query(String expression) throws SQLException { 
 				Statement st = null; 
 				ResultSet rs = null; 
 				st = conn.createStatement(); 
 				rs = st.executeQuery(expression); 
 				dump(rs); 
 				st.close(); 
 				} 
 				public synchronized void update(String expression) throws SQLException { 
 				Statement st = null; 
 				st = conn.createStatement(); 
 				int i = st.executeUpdate(expression); 
 				if (i == -1) { 
 				System.out.println("db error : " + expression); 
 				} 
 				st.close(); 
 				} 
 				public static void dump(ResultSet rs) throws SQLException { 
 				ResultSetMetaData meta   = rs.getMetaData(); 
 				int               colmax = meta.getColumnCount(); 
 				int               i; 
 				Object            o = null; 
 				for (; rs.next(); ) { 
 				for (i = 0; i < colmax; ++i) { 
 				o = rs.getObject(i + 1); 
 				System.out.print(o.toString() + " "); 
 				} 
 				System.out.println(" "); 
 				} 
 				} 
 				public static void main(String[] args) { 
 				Testdb db = null; 
 				try { 
 				db = new Testdb("db_file"); 
 				} catch (Exception ex1) { 
 				ex1.printStackTrace(); 
 				return; 
 				} 
 				try { 
 				db.update( 
 				"CREATE TABLE sample_table ( id INTEGER IDENTITY, str_col VARCHAR(256), num_col INTEGER)"); 
 				} catch (SQLException ex2) { 
 				} 
 				try { 
 				db.update( 
 				"INSERT INTO sample_table(str_col,num_col) VALUES('Ford', 100)"); 
 				db.update( 
 				"INSERT INTO sample_table(str_col,num_col) VALUES('Toyota', 200)"); 
 				db.update( 
 				"INSERT INTO sample_table(str_col,num_col) VALUES('Honda', 300)"); 
 				db.update( 
 				"INSERT INTO sample_table(str_col,num_col) VALUES('GM', 400)"); 
 				db.query("SELECT * FROM sample_table WHERE num_col < 250"); 
 				db.shutdown(); 
 				} catch (SQLException ex3) { 
 				ex3.printStackTrace(); 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| DatabaseInformationMain.java: 2008 - 2015 || DatabaseInformationMain.java: 2027 - 2034 |
 CLONE CLASS: 	row[icat]          = cat; 
 				row[ischem]        = schem; 
 				row[ipname]        = pName; 
 				row[iinput_parms]  = ip; 
 				row[ioutput_parms] = op; 
 				row[iresult_sets]  = rs; 
 				row[iremark]       = remark; 
 				row[iptype]        = pType; 
 				
 
 LINES: 		| RowStoreAVLHybrid.java: 170 - 179 || RowStoreAVLHybridExtended.java: 102 - 111 |
 CLONE CLASS: 	} 
 				Object[] data = ((Row) object).getData(); 
 				for (int i = 0; i < nullsList.length; i++) { 
 				if (data[i] == null) { 
 				nullsList[i] = true; 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| DirectoryBlockCachedObject.java: 91 - 99 || BitMapCachedObject.java: 74 - 82 || IntArrayCachedObject.java: 72 - 80 |
 CLONE CLASS: 	} 
 				} catch (IOException e) { 
 				throw Error.error(ErrorCode.GENERAL_IO_ERROR, e); 
 				} 
 				hasChanged = false; 
 				} 
 				public int getDefaultCapacity() { 
 				
 
 LINES: 		| ParserDQL.java: 797 - 612 || ParserDQL.java: 1301 - 649 |
 CLONE CLASS: 	if (readIfThis(Tokens.COMMA)) { 
 				continue; 
 				} 
 				break; 
 				} 
 				} 
 				continue; 
 				} 
 				break; 
 				} 
 				} 
 				Object[] args = new Object[] { 
 				
 
 LINES: 		| JDBCStatement.java: 1708 - 1740 || JDBCPreparedStatement.java: 3782 - 3813 |
 CLONE CLASS: 	return this.poolable; 
 				} 
 				@SuppressWarnings("unchecked") 
 				public <T>T unwrap(Class<T> iface) throws java.sql.SQLException { 
 				if (isWrapperFor(iface)) { 
 				return (T) this; 
 				} 
 				throw JDBCUtil.invalidArgument("iface: " + iface); 
 				} 
 				
 
 LINES: 		| IndexAVL.java: 1688 - 1695 || IndexAVL.java: 1703 - 1710 |
 CLONE CLASS: 	n = x.getRight(store); 
 				} else { 
 				result = x; 
 				n      = x.getLeft(store); 
 				} 
 				break; 
 				} 
 				
 
 LINES: 		| RowAVLDisk.java: 184 - 192 || CachedObjectBase.java: 49 - 57 || RowAVLDiskData.java: 185 - 193 |
 CLONE CLASS: 	} 
 				public void updateAccessCount(int count) { 
 				accessCount = count; 
 				} 
 				public int getAccessCount() { 
 				return accessCount; 
 				} 
 				
 
 LINES: 		| ValuePoolHashMap.java: 205 - 211 || ValuePoolHashMap.java: 250 - 256 || ValuePoolHashMap.java: 377 - 383 |
 CLONE CLASS: 	int    index      = hashIndex.getHashIndex(key.hashCode()); 
 				int    lookup     = hashIndex.hashTable[index]; 
 				int    lastLookup = -1; 
 				for (; lookup >= 0; 
 				lastLookup = lookup, 
 				lookup = hashIndex.getNextLookup(lookup)) { 
 				
 
 LINES: 		| DatabaseManagerSwing.java: 1311 - 1318 || DatabaseManager.java: 760 - 767 |
 CLONE CLASS: 	} else if (s.equals("SCRIPT")) { 
 				showHelp(DatabaseManagerCommon.scriptHelp); 
 				} else if (s.equals("SHUTDOWN")) { 
 				showHelp(DatabaseManagerCommon.shutdownHelp); 
 				} else if (s.equals("SET")) { 
 				showHelp(DatabaseManagerCommon.setHelp); 
 				} else if (s.equals("Test Script")) { 
 				showHelp(DatabaseManagerCommon.testHelp); 
 				
 
 LINES: 		| StatementSession.java: 205 - 211 || StatementSession.java: 226 - 232 |
 CLONE CLASS: 	break; 
 				default : 
 				throw Error.runtimeError(ErrorCode.U_S0500, 
 				"StatementSession"); 
 				} 
 				} 
 				
 
 LINES: 		| JDBCStatement.java: 1138 - 1239 || JDBCPreparedStatement.java: 2212 - 2316 |
 CLONE CLASS: 	} 
 				public synchronized boolean getMoreResults( 
 				int current) throws SQLException { 
 				return super.getMoreResults(current); 
 				} 
 				public synchronized ResultSet getGeneratedKeys() throws SQLException { 
 				return getGeneratedResultSet(); 
 				} 
 				
 
 LINES: 		| HashMap.java: 87 - 94 || IntValueHashMap.java: 261 - 268 || LongValueHashMap.java: 212 - 219 |
 CLONE CLASS: 	Iterator it = t.keySet().iterator(); 
 				while (it.hasNext()) { 
 				Object key = it.next(); 
 				put(key, t.get(key)); 
 				} 
 				} 
 				
 
 LINES: 		| KMPSearchAlgorithm.java: 275 - 284 || KMPSearchAlgorithm.java: 345 - 354 || KMPSearchAlgorithm.java: 409 - 418 |
 CLONE CLASS: 	int patternIndex = 0; 
 				if (table == null) { 
 				table = computeTable(pattern); 
 				} 
 				while ((sourceIndex < sourceLength) 
 				&& (patternIndex < patternLength)) { 
 				
 
 LINES: 		| ParserDML.java: 1156 - 1163 || ParserDQL.java: 4806 - 4813 || ParserDQL.java: 5239 - 5246 |
 CLONE CLASS: 	while (true) { 
 				Expression e = XreadValueExpression(); 
 				list.add(e); 
 				if (token.tokenType == Tokens.COMMA) { 
 				read(); 
 				} else { 
 				
 
 LINES: 		| BooleanType.java: 114 - 123 || IntervalType.java: 436 - 445 |
 CLONE CLASS: 	} 
 				throw Error.error(ErrorCode.X_42562); 
 				} 
 				public int compare(Session session, Object a, Object b) { 
 				if (a == b) { 
 				return 0; 
 				} 
 				
 
 LINES: 		| TestAllTypes.java: 36 - 41 || TestCacheSize.java: 36 - 41 |
 CLONE CLASS: 	import java.sql.DriverManager; 
 				import java.sql.PreparedStatement; 
 				import java.sql.ResultSet; 
 				import java.sql.SQLException; 
 				import java.sql.Statement; 
 				import java.util.Random; 
 				
 
 LINES: 		| Schema.java: 34 - 39 || SchemaManager.java: 38 - 43 |
 CLONE CLASS: 	import org.hsqldb.HsqlNameManager.HsqlName; 
 				import org.hsqldb.error.Error; 
 				import org.hsqldb.error.ErrorCode; 
 				import org.hsqldb.lib.HashMappedList; 
 				import org.hsqldb.lib.HsqlArrayList; 
 				import org.hsqldb.lib.Iterator; 
 				
 
 LINES: 		| TransactionManagerCommon.java: 591 - 600 || TransactionManagerCommon.java: 621 - 630 || TransactionManagerCommon.java: 735 - 744 || TransactionManagerCommon.java: 761 - 770 |
 CLONE CLASS: 	for (int i = 0; i < nameList.length; i++) { 
 				HsqlName name = nameList[i]; 
 				if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) { 
 				continue; 
 				} 
 				Session holder = (Session) tableWriteLocks.get(name); 
 				if (holder != null && holder != session) { 
 				
 
 LINES: 		| RangeVariable.java: 1770 - 1777 || RangeVariable.java: 1800 - 1807 |
 CLONE CLASS: 	indexedColumnCount++; 
 				return true; 
 				} 
 				} 
 				} 
 				return false; 
 				
 
 LINES: 		| IndexAVL.java: 1717 - 1724 || IndexAVL.java: 1731 - 1738 |
 CLONE CLASS: 	result = x; 
 				n      = x.getRight(store); 
 				} else { 
 				n = x.getLeft(store); 
 				} 
 				break; 
 				} 
 				
 
 LINES: 		| BitType.java: 235 - 246 || BinaryType.java: 392 - 403 |
 CLONE CLASS: 	} 
 				Object castOrConvertToType(SessionInterface session, Object a, 
 				Type otherType, boolean cast) { 
 				BlobData b; 
 				if (a == null) { 
 				return null; 
 				} 
 				switch (otherType.typeCode) { 
 				
 
 LINES: 		| DatabaseInformationFull.java: 1546 - 1553 || DatabaseInformationFull.java: 1794 - 1802 || DatabaseInformationFull.java: 1948 - 1956 || DatabaseInformationFull.java: 3290 - 3297 |
 CLONE CLASS: 	}, false); 
 				return t; 
 				} 
 				final int constraint_catalog = 0; 
 				final int constraint_schema  = 1; 
 				final int constraint_name    = 2; 
 				
 
 LINES: 		| ParserRoutine.java: 2036 - 2047 || ParserDQL.java: 4990 - 5001 |
 CLONE CLASS: 	if (condition == null) { 
 				condition = newCondition; 
 				} else { 
 				condition = new ExpressionLogical(OpTypes.OR, condition, 
 				newCondition); 
 				} 
 				if (token.tokenType == Tokens.COMMA) { 
 				read(); 
 				} else { 
 				break; 
 				} 
 				
 
 LINES: 		| ClosableCharArrayWriter.java: 382 - 430 || ClosableByteArrayOutputStream.java: 367 - 420 |
 CLONE CLASS: 	} 
 				public synchronized void close() throws IOException { 
 				closed = true; 
 				} 
 				public synchronized boolean isClosed() { 
 				return closed; 
 				} 
 				public synchronized void free() throws IOException { 
 				closed = true; 
 				freed  = true; 
 				buf    = null; 
 				count  = 0; 
 				} 
 				public synchronized boolean isFreed() { 
 				return freed; 
 				} 
 				protected synchronized void checkClosed() throws IOException { 
 				if (closed) { 
 				
 
 LINES: 		| ParserDQL.java: 2196 - 2205 || ParserDQL.java: 3329 - 3338 |
 CLONE CLASS: 	if (e == null) { 
 				return null; 
 				} 
 				if (minus) { 
 				e = new ExpressionArithmetic(OpTypes.NEGATE, e); 
 				} 
 				return e; 
 				} 
 				
 
 LINES: 		| HSQLDialect.java: 517 - 541 || HSQLDialect.java: 479 - 505 |
 CLONE CLASS: 	} 
 				else { 
 				return Boolean.FALSE; 
 				} 
 				} 
 				public boolean dropTemporaryTableAfterUse() { 
 				if ( hsqldbVersion < 20 ) { 
 				return Boolean.TRUE; 
 				} 
 				else { 
 				return Boolean.FALSE; 
 				
 
 LINES: 		| TestMerge.java: 82 - 96 || TestMultiInsert.java: 77 - 88 |
 CLONE CLASS: 	while (rs.next()) { 
 				for (int i = 0; i < rsmd.getColumnCount(); i++) { 
 				result += rsmd.getColumnLabel(i + 1) + ":" 
 				+ rs.getString(i + 1) + ":"; 
 				} 
 				result += "\n"; 
 				rows++; 
 				} 
 				rs.close(); 
 				System.out.println(result); 
 				assertEquals(expected, rows); 
 				} 
 				
 
 LINES: 		| NumberType.java: 2005 - 2015 || Type.java: 833 - 843 || Type.java: 1040 - 1050 |
 CLONE CLASS: 	case Types.SQL_INTEGER : 
 				return SQL_INTEGER; 
 				case Types.SQL_SMALLINT : 
 				return SQL_SMALLINT; 
 				case Types.SQL_BIGINT : 
 				return SQL_BIGINT; 
 				case Types.TINYINT : 
 				return TINYINT; 
 				
 
 LINES: 		| Scanner.java: 1600 - 1606 || Scanner.java: 1629 - 1635 |
 CLONE CLASS: 	token.tokenString = sqlString.substring(currentPosition 
 				+ 2, pos); 
 				token.tokenType   = Tokens.X_REMARK; 
 				token.isDelimiter = true; 
 				return; 
 				} 
 				
 
 LINES: 		| TestBatchExecution.java: 32 - 40 || TestSubQueriesInPreparedStatements.java: 37 - 44 |
 CLONE CLASS: 	package org.hsqldb.test; 
 				import java.sql.Connection; 
 				import java.sql.Driver; 
 				import java.sql.DriverManager; 
 				import java.sql.PreparedStatement; 
 				import java.sql.ResultSet; 
 				import java.sql.Connection; 
 				import java.sql.Driver; 
 				import java.sql.DriverManager; 
 				import java.sql.PreparedStatement; 
 				import java.sql.ResultSet; 
 				import java.sql.Statement; 
 				
 
 LINES: 		| TestSql.java: 34 - 39 || TransferDb.java: 34 - 39 |
 CLONE CLASS: 	import java.sql.Connection; 
 				import java.sql.DatabaseMetaData; 
 				import java.sql.PreparedStatement; 
 				import java.sql.ResultSet; 
 				import java.sql.ResultSetMetaData; 
 				import java.sql.SQLException; 
 				
 
 LINES: 		| JDBCPooledConnection.java: 153 - 164 || JDBCPooledConnection.java: 179 - 190 |
 CLONE CLASS: 	if (userConnection != null) { 
 				try { 
 				userConnection.close(); 
 				} catch (SQLException e) { 
 				} 
 				} 
 				try { 
 				
 
 LINES: 		| IntValueHashMap.java: 63 - 71 || IntValueHashMap.java: 79 - 87 |
 CLONE CLASS: 	throw new NoSuchElementException(); 
 				} 
 				int hash   = key.hashCode(); 
 				int lookup = getLookup(key, hash); 
 				if (lookup != -1) { 
 				return intValueTable[lookup]; 
 				} 
 				
 
 LINES: 		| NodeAVLDiskLarge.java: 469 - 479 || NodeAVLDisk.java: 488 - 498 |
 CLONE CLASS: 	nParent.nLeft = null; 
 				} else { 
 				nParent.nRight = null; 
 				} 
 				} 
 				nLeft = nRight = nParent = null; 
 				} 
 				} 
 				public void write(RowOutputInterface out) { 
 				
 
 LINES: 		| DatabaseInformationFull.java: 3477 - 3484 || DatabaseInformationFull.java: 7967 - 7974 |
 CLONE CLASS: 	row[interval_type] = 
 				((IntervalType) type).getQualifier(type.typeCode); 
 				row[interval_precision] = ValuePool.getLong(type.precision); 
 				row[datetime_precision] = ValuePool.getLong(type.scale); 
 				} else if (type.isBinaryType()) { 
 				row[character_maximum_length] = 
 				ValuePool.getLong(type.precision); 
 				row[character_octet_length] = 
 				
 
 LINES: 		| DatabaseInformationFull.java: 588 - 598 || DatabaseInformationFull.java: 2658 - 2668 || DatabaseInformationFull.java: 3601 - 3611 |
 CLONE CLASS: 	columnList = 
 				session.getGrantee().getColumnsForAllPrivileges(table); 
 				if (columnList.isEmpty()) { 
 				continue; 
 				} 
 				columnCount = table.getColumnCount(); 
 				for (int i = 0; i < columnCount; i++) { 
 				ColumnSchema column = table.getColumn(i); 
 				
 
 LINES: 		| DatabaseManager.java: 628 - 637 || DatabaseManager.java: 667 - 676 |
 CLONE CLASS: 	FileDialog.SAVE); 
 				if (defDirectory != null) { 
 				f.setDirectory(defDirectory); 
 				} 
 				f.show(); 
 				String file = f.getFile(); 
 				
 
 LINES: 		| RowSetNavigatorData.java: 422 - 378 || RowSetNavigatorDataTable.java: 435 - 388 |
 CLONE CLASS: 	public void except(Session session, RowSetNavigatorData other) { 
 				removeDuplicates(session); 
 				other.sortFull(session); 
 				while (hasNext()) { 
 				Object[] currentData = getNext(); 
 				boolean  hasRow      = other.containsRow(currentData); 
 				removeDuplicates(session); 
 				other.sortFull(session); 
 				while (hasNext()) { 
 				Object[] currentData = getNext(); 
 				boolean  hasRow      = other.containsRow(currentData); 
 				if (!hasRow) { 
 				removeCurrent(); 
 				} 
 				} 
 				
 
 LINES: 		| BaseHashMap.java: 719 - 727 || BaseHashMap.java: 759 - 767 |
 CLONE CLASS: 	if (isTwoObjectValue) { 
 				objectKeyTable[lookup] = objectValueTwo; 
 				} 
 				if (accessTable != null) { 
 				accessTable[lookup] = ++accessCount; 
 				} 
 				return returnValue; 
 				
 
 LINES: 		| ArrayUtil.java: 226 - 231 || ParserDDL.java: 3385 - 3390 |
 CLONE CLASS: 	array[i + 1] = array[i]; 
 				array[i]     = temp; 
 				swapped      = true; 
 				} 
 				} 
 				} while (swapped); 
 				
 
 LINES: 		| HsqlDeque.java: 60 - 68 || LongDeque.java: 56 - 64 |
 CLONE CLASS: 	} 
 				public int size() { 
 				return elementCount; 
 				} 
 				public boolean isEmpty() { 
 				return elementCount == 0; 
 				} 
 				
 
 LINES: 		| JDBCPreparedStatement.java: 4000 - 4008 || JDBCPreparedStatement.java: 4020 - 4028 |
 CLONE CLASS: 	if (isClosed || connection.isClosed) { 
 				checkClosed(); 
 				} 
 				if (i < 1 || i > parameterValues.length) { 
 				String msg = "parameter index out of range: " + i; 
 				throw JDBCUtil.outOfRangeArgument(msg); 
 				} 
 				
 
 LINES: 		| TriggerSample.java: 360 - 486 || TriggerSample.java: 360 - 486 |
 CLONE CLASS: 	sb.append(getOperationSpec(typ)); 
 				sb.append(" ON "); 
 				sb.append(tab); 
 				sb.append(' '); 
 				sb.append(getForEachSpec(typ)); 
 				return sb.toString(); 
 				} 
 				private static Connection getConnection() throws SQLException { 
 				try { 
 				Class.forName(drv).newInstance(); 
 				return DriverManager.getConnection(url, usr, pwd); 
 				} catch (SQLException se) { 
 				throw se; 
 				} catch (Exception e) { 
 				throw new SQLException(e.toString()); 
 				} 
 				} 
 				private static void createTrigger(Statement stmt, String trn, 
 				int typ) throws SQLException { 
 				stmt.execute(getTriggerDDL(trn, typ, tn, 0, impl)); 
 				} 
 				private static void setup() throws SQLException { 
 				Connection conn = getConnection(); 
 				Statement  stmt = conn.createStatement(); 
 				stmt.execute(drop_test_table_stmt); 
 				stmt.execute(create_test_table_stmt); 
 				stmt.execute(drop_audit_table_stmt); 
 				stmt.execute(create_audit_table_stmt); 
 				createTrigger(stmt, "tibr_" + tn, INSERT_BEFORE_ROW); 
 				createTrigger(stmt, "tia_" + tn, INSERT_AFTER); 
 				createTrigger(stmt, "tiar_" + tn, INSERT_AFTER_ROW); 
 				createTrigger(stmt, "tubr_" + tn, UPDATE_BEFORE_ROW); 
 				createTrigger(stmt, "tua_" + tn, UPDATE_AFTER); 
 				createTrigger(stmt, "tuar_" + tn, UPDATE_AFTER_ROW); 
 				createTrigger(stmt, "tdbr_" + tn, DELETE_BEFORE_ROW); 
 				createTrigger(stmt, "tda_" + tn, DELETE_AFTER); 
 				createTrigger(stmt, "tdar_" + tn, DELETE_AFTER_ROW); 
 				stmt.close(); 
 				conn.close(); 
 				} 
 				private static void doSomeWork() throws SQLException { 
 				Connection conn = getConnection(); 
 				Statement  stmt = conn.createStatement(); 
 				conn.setAutoCommit(false); 
 				stmt.execute("INSERT INTO trig_test VALUES (1, 'hello')"); 
 				stmt.execute("INSERT INTO trig_test VALUES (2, 'now what?')"); 
 				stmt.execute("INSERT INTO trig_test VALUES (3, 'unchangable')"); 
 				stmt.execute("INSERT INTO trig_test VALUES (4, 'goodbye')"); 
 				conn.commit(); 
 				dumpTable("trig_test"); 
 				stmt.execute("UPDATE trig_test SET value = 'all done'"); 
 				conn.commit(); 
 				dumpTable("trig_test"); 
 				stmt.execute("DELETE FROM trig_test"); 
 				conn.rollback(); 
 				dumpTable("trig_test"); 
 				try { 
 				stmt.execute("INSERT INTO trig_test VALUES(11, 'whatever')"); 
 				} catch (SQLException se) { 
 				se.printStackTrace(); 
 				} 
 				stmt.execute("INSERT INTO trig_test VALUES(10, 'whatever')"); 
 				conn.commit(); 
 				dumpTable("trig_test"); 
 				stmt.close(); 
 				conn.close(); 
 				} 
 				private static void dumpTable(String tn) throws SQLException { 
 				Connection        conn  = getConnection(); 
 				Statement         stmt  = conn.createStatement(); 
 				ResultSet         rs    = stmt.executeQuery("select * from " + tn); 
 				ResultSetMetaData rsmd  = rs.getMetaData(); 
 				int               count = rsmd.getColumnCount(); 
 				out.println(); 
 				out.println("****************************************"); 
 				out.println("DUMP FOR TABLE: " + tn); 
 				out.println("****************************************"); 
 				out.flush(); 
 				while (rs.next()) { 
 				out.print("["); 
 				for (int i = 1; i <= count; i++) { 
 				out.print(rs.getString(i)); 
 				if (i < count) { 
 				out.print(" : "); 
 				} 
 				} 
 				out.println("]"); 
 				} 
 				out.println(); 
 				out.flush(); 
 				rs.close(); 
 				stmt.close(); 
 				conn.close(); 
 				} 
 				private static void runSample() throws SQLException { 
 				setup(); 
 				doSomeWork(); 
 				dumpTable("audit"); 
 				} 
 				public static void main(String[] args) throws SQLException { 
 				runSample(); 
 				} 
 				} 
 				
 
 LINES: 		| JDBCResultSet.java: 7258 - 7292 || JDBCResultSet.java: 7567 - 7583 |
 CLONE CLASS: 	} 
 				protected Object getColumnInType(int columnIndex, 
 				Type targetType) throws SQLException { 
 				Object[] rowData = getCurrent(); 
 				Type     sourceType; 
 				Object   value; 
 				checkColumn(columnIndex); 
 				sourceType = resultMetaData.columnTypes[--columnIndex]; 
 				value      = rowData[columnIndex]; 
 				if (trackNull(value)) { 
 				return null; 
 				} 
 				
 
 LINES: 		| SqlFile.java: 954 - 961 || SqlFile.java: 1006 - 1013 |
 CLONE CLASS: 	historize(); 
 				Statement statement = processSQL(); 
 				ResultSet rs = null; 
 				if (statement != null) { 
 				try { 
 				rs = statement.getResultSet(); 
 				} catch (SQLException se) { 
 				try { 
 				
 
 LINES: 		| TransactionManagerMVCC.java: 227 - 241 || TransactionManagerMV2PL.java: 169 - 183 |
 CLONE CLASS: 	return true; 
 				} 
 				public void rollback(Session session) { 
 				writeLock.lock(); 
 				try { 
 				session.abortTransaction        = false; 
 				session.actionTimestamp         = getNextGlobalChangeTimestamp(); 
 				session.transactionEndTimestamp = session.actionTimestamp; 
 				rollbackPartial(session, 0, session.transactionTimestamp); 
 				endTransaction(session); 
 				endTransactionTPL(session); 
 				
 
 LINES: 		| TestMerge.java: 361 - 367 || TestMerge.java: 386 - 392 |
 CLONE CLASS: 	printTable("SA.T", "*", 4); 
 				} catch (SQLException e) { 
 				fail(e.getMessage()); 
 				} 
 				System.out.println("testMerge10 complete\n"); 
 				} 
 				
 
 LINES: 		| FileArchiver.java: 134 - 140 || FileArchiver.java: 213 - 219 |
 CLONE CLASS: 	} 
 				completed = true; 
 				} catch (Throwable e) { 
 				throw JavaSystem.toIOException(e); 
 				} finally { 
 				try { 
 				
 
 LINES: 		| RowStoreAVLDisk.java: 32 - 39 || RowStoreAVLHybrid.java: 32 - 39 |
 CLONE CLASS: 	package org.hsqldb.persist; 
 				import java.io.IOException; 
 				import org.hsqldb.HsqlException; 
 				import org.hsqldb.Row; 
 				import org.hsqldb.RowAVL; 
 				import org.hsqldb.RowAVLDisk; 
 				
 
 LINES: 		| JDBCBlobFile.java: 863 - 871 || JDBCClobFile.java: 1018 - 1026 || JDBCClobFile.java: 1083 - 1091 |
 CLONE CLASS: 	throws FileNotFoundException, IOException { 
 				if (file == null) { 
 				throw new NullPointerException("file"); 
 				} 
 				if (pos < 0) { 
 				throw new IllegalArgumentException("pos: " + pos); 
 				} 
 				
 
 LINES: 		| Transfer.java: 937 - 966 || DatabaseManager.java: 799 - 810 |
 CLONE CLASS: 	fMain.dispose(); 
 				if (bMustExit) { 
 				System.exit(0); 
 				} 
 				} 
 				public void windowDeiconified(WindowEvent e) {} 
 				public void windowIconified(WindowEvent e) {} 
 				public void windowOpened(WindowEvent e) {} 
 				
 
 LINES: 		| Collation.java: 529 - 536 || Collation.java: 560 - 567 |
 CLONE CLASS: 	sb.append(' '); 
 				if (!padSpace) { 
 				sb.append(Tokens.T_NO).append(' ').append(Tokens.T_PAD); 
 				} 
 				return sb.toString(); 
 				} 
 				
 
 LINES: 		| ParserDDL.java: 2842 - 2850 || ParserDDL.java: 4227 - 4235 |
 CLONE CLASS: 	read(); 
 				long value = readBigint(); 
 				sequence.setMaxValueNoCheck(value); 
 				break; 
 				} 
 				case Tokens.MINVALUE : { 
 				
 
 LINES: 		| TestBench.java: 381 - 390 || JDBCBench.java: 400 - 409 |
 CLONE CLASS: 	Query = "SELECT count(*) "; 
 				Query += "FROM   accounts"; 
 				ResultSet RS = Stmt.executeQuery(Query); 
 				Stmt.clearWarnings(); 
 				while (RS.next()) { 
 				accountsnb = RS.getInt(1); 
 				} 
 				
 
 LINES: 		| Grid.java: 143 - 152 || Tree.java: 138 - 147 |
 CLONE CLASS: 	setLayout(null); 
 				sbHoriz = new Scrollbar(Scrollbar.HORIZONTAL); 
 				add(sbHoriz); 
 				sbVert = new Scrollbar(Scrollbar.VERTICAL); 
 				add(sbVert); 
 				} 
 				
 
 LINES: 		| DatabaseInformationMain.java: 2966 - 2974 || DatabaseInformationMain.java: 3391 - 3398 |
 CLONE CLASS: 	OrderedHashSet grantees = 
 				session.getGrantee().getGranteeAndAllRolesWithPublic(); 
 				tables = allTables(); 
 				while (tables.hasNext()) { 
 				table        = (Table) tables.next(); 
 				tableName    = table.getName().name; 
 				
 
 LINES: 		| DatabaseInformationFull.java: 2954 - 2961 || DatabaseInformationFull.java: 2984 - 2991 |
 CLONE CLASS: 	row[constraint_catalog] = constraintCatalog; 
 				row[constraint_schema]  = constraintSchema; 
 				row[constraint_name]    = constraintName; 
 				try { 
 				t.insertSys(session, store, row); 
 				} catch (HsqlException e) {} 
 				} 
 				
 
 LINES: 		| StatementCommand.java: 220 - 232 || StatementSession.java: 242 - 254 |
 CLONE CLASS: 	} 
 				if (result.isError()) { 
 				result.getException().setStatementType(group, type); 
 				return result; 
 				} 
 				try { 
 				if (isLogged) { 
 				session.database.logger.writeOtherStatement(session, sql); 
 				} 
 				} catch (Throwable e) { 
 				
 
 LINES: 		| TestCacheSize.java: 751 - 758 || TestCacheSize.java: 839 - 846 |
 CLONE CLASS: 	boolean          slow      = false; 
 				int              count     = 0; 
 				int              random    = 0; 
 				try { 
 				PreparedStatement ps = cConnection.prepareStatement( 
 				"UPDATE test SET zip = zip + 1 WHERE id = ? and zip <> " 
 				+ smallrows); 
 				
 
 LINES: 		| ParserDQL.java: 3342 - 3349 || ParserDQL.java: 3368 - 3375 |
 CLONE CLASS: 	Expression e = XreadDateTimeIntervalTerm(); 
 				while (true) { 
 				int type; 
 				if (token.tokenType == Tokens.PLUS) { 
 				type = OpTypes.ADD; 
 				} else if (token.tokenType == Tokens.MINUS) { 
 				
 
 LINES: 		| TestCacheSize.java: 769 - 776 || TestCacheSize.java: 815 - 822 || TestCacheSize.java: 857 - 864 || TestCacheSize.java: 908 - 915 || TestCacheSize.java: 952 - 959 |
 CLONE CLASS: 	+ sw.elapsedTime() + " rps: " 
 				+ (i * 1000 / (sw.elapsedTime() + 1))); 
 				} 
 				} 
 				ps.close(); 
 				} catch (SQLException e) { 
 				System.out.println("error : " + random); 
 				
 
 LINES: 		| TestLobs.java: 72 - 80 || TestTypeConversion.java: 58 - 66 |
 CLONE CLASS: 	super.setUp(); 
 				try { 
 				connection = super.newConnection(); 
 				statement  = connection.createStatement(); 
 				} catch (Exception e) { 
 				System.out.println(e); 
 				} 
 				} 
 				
 
 LINES: 		| TestPreparedSubQueries.java: 91 - 101 || TestPreparedStatements.java: 130 - 140 |
 CLONE CLASS: 	super(name); 
 				} 
 				protected void setUp() { 
 				String url = "jdbc:hsqldb:test"; 
 				try { 
 				Class.forName("org.hsqldb.jdbc.JDBCDriver"); 
 				con = java.sql.DriverManager.getConnection(url, "sa", ""); 
 				
 
 LINES: 		| RowOutputBinary.java: 45 - 50 || RowOutputBase.java: 46 - 51 || RowOutputText.java: 46 - 51 |
 CLONE CLASS: 	import org.hsqldb.types.IntervalSecondData; 
 				import org.hsqldb.types.JavaObjectData; 
 				import org.hsqldb.types.TimeData; 
 				import org.hsqldb.types.TimestampData; 
 				import org.hsqldb.types.Type; 
 				import org.hsqldb.types.Types; 
 				
 
 LINES: 		| TestJDBCGeneratedColumns.java: 199 - 207 || TestJDBCGeneratedColumns.java: 216 - 224 |
 CLONE CLASS: 	ps.addBatch(); 
 				ps.executeBatch(); 
 				rs = ps.getGeneratedKeys(); 
 				while (rs.next()) { 
 				System.out.println("" + rs.getInt(1)); 
 				successPrepared &= rs.getInt(1) == val; 
 				
 
 LINES: 		| ExpressionOp.java: 341 - 349 || Expression.java: 1016 - 1024 || ExpressionArithmetic.java: 230 - 238 |
 CLONE CLASS: 	} 
 				public HsqlList resolveColumnReferences(Session session, 
 				RangeGroup rangeGroup, int rangeCount, RangeGroup[] rangeGroups, 
 				HsqlList unresolvedSet, boolean acceptsSequences) { 
 				if (opType == OpTypes.VALUE) { 
 				return unresolvedSet; 
 				} 
 				
 
 LINES: 		| DateTimeType.java: 42 - 47 || OtherType.java: 36 - 41 |
 CLONE CLASS: 	import org.hsqldb.Session; 
 				import org.hsqldb.SessionInterface; 
 				import org.hsqldb.Tokens; 
 				import org.hsqldb.error.Error; 
 				import org.hsqldb.error.ErrorCode; 
 				import org.hsqldb.lib.StringConverter; 
 				
 
 LINES: 		| CharacterType.java: 589 - 596 || BooleanType.java: 143 - 150 || NumberType.java: 798 - 805 || DateTimeType.java: 499 - 506 |
 CLONE CLASS: 	} 
 				public Object convertToType(SessionInterface session, Object a, 
 				Type otherType) { 
 				if (a == null) { 
 				return a; 
 				} 
 				
 
 LINES: 		| JDBCPreparedStatement.java: 1646 - 1659 || JDBCPreparedStatement.java: 1721 - 1734 |
 CLONE CLASS: 	if (x == null) { 
 				parameterValues[i] = null; 
 				parameterSet[i]    = Boolean.TRUE; 
 				return; 
 				} 
 				Type     outType    = parameterTypes[i]; 
 				long     millis     = x.getTime(); 
 				int      zoneOffset = 0; 
 				Calendar calendar   = cal == null ? session.getCalendar() 
 				: cal; 
 				millis = HsqlDateTime.convertMillisFromCalendar(calendar, millis); 
 				
 
 LINES: 		| RowStoreAVLHybrid.java: 124 - 131 || BlockObjectStore.java: 85 - 92 |
 CLONE CLASS: 	} catch (HsqlException e) { 
 				return null; 
 				} 
 				} 
 				public CachedObject get(long i, boolean keep) { 
 				try { 
 				
 
 LINES: 		| StatementInsert.java: 60 - 68 || StatementInsert.java: 87 - 95 |
 CLONE CLASS: 	super(StatementTypes.INSERT, StatementTypes.X_SQL_DATA_CHANGE, 
 				session.getCurrentSchemaHsqlName()); 
 				this.targetTable = targetTable; 
 				this.baseTable   = targetTable.isTriggerInsertable() ? targetTable 
 				: targetTable 
 				.getBaseTable(); 
 				this.insertColumnMap    = columnMap; 
 				this.insertCheckColumns = checkColumns; 
 				
 
 LINES: 		| FunctionCustom.java: 2175 - 2182 || FunctionSQL.java: 1197 - 1204 |
 CLONE CLASS: 	} 
 				} 
 				public void resolveTypes(Session session, Expression parent) { 
 				for (int i = 0; i < nodes.length; i++) { 
 				if (nodes[i] != null) { 
 				nodes[i].resolveTypes(session, this); 
 				
 
 LINES: 		| IntKeyIntValueHashMap.java: 87 - 109 || IntKeyLongValueHashMap.java: 84 - 106 |
 CLONE CLASS: 	return true; 
 				} 
 				return false; 
 				} 
 				public boolean put(int key, int value) { 
 				int oldSize = size(); 
 				super.addOrRemove(key, value, null, null, false); 
 				return oldSize != size(); 
 				} 
 				public boolean remove(int key) { 
 				int oldSize = size(); 
 				super.addOrRemove(key, 0, null, null, true); 
 				return oldSize != size(); 
 				} 
 				
 
 LINES: 		| LobStoreMem.java: 62 - 68 || LobStoreMem.java: 94 - 100 |
 CLONE CLASS: 	byte[] largeBlock = (byte[]) byteStoreList.get(largeBlockIndex); 
 				int    blockOffset       = blockAddress % blocksInLargeBlock; 
 				int    currentBlockCount = blockCount; 
 				if ((blockOffset + currentBlockCount) > blocksInLargeBlock) { 
 				currentBlockCount = blocksInLargeBlock - blockOffset; 
 				} 
 				
 
 LINES: 		| JDBCPooledDataSource.java: 91 - 112 || JDBCXADataSource.java: 130 - 151 || JDBCDataSource.java: 247 - 270 |
 CLONE CLASS: 	} 
 				public Reference getReference() throws NamingException { 
 				String    cname = "org.hsqldb.jdbc.JDBCDataSourceFactory"; 
 				Reference ref   = new Reference(getClass().getName(), cname, null); 
 				ref.add(new StringRefAddr("database", getDatabase())); 
 				ref.add(new StringRefAddr("user", getUser())); 
 				ref.add(new StringRefAddr("password", password)); 
 				ref.add(new StringRefAddr("loginTimeout", 
 				Integer.toString(loginTimeout))); 
 				return ref; 
 				} 
 				
 
 LINES: 		| ClosableCharArrayWriter.java: 306 - 338 || ClosableByteArrayOutputStream.java: 271 - 303 |
 CLONE CLASS: 	checkFreed(); 
 				return copyOf(buf, count); 
 				} 
 				public synchronized int size() throws IOException { 
 				return count; 
 				} 
 				public synchronized void setSize(int newSize) { 
 				if (newSize < 0) { 
 				throw new ArrayIndexOutOfBoundsException(newSize); 
 				} else if (newSize > buf.length) { 
 				buf = copyOf(buf, Math.max(buf.length << 1, newSize)); 
 				} 
 				count = newSize; 
 				} 
 				
 
 LINES: 		| IntKeyHashMapConcurrent.java: 195 - 204 || IntKeyHashMapConcurrent.java: 230 - 239 |
 CLONE CLASS: 	} 
 				public boolean isEmpty() { 
 				return size() == 0; 
 				} 
 				public void clear() { 
 				IntKeyHashMapConcurrent.this.clear(); 
 				} 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 1970 - 1980 || DatabaseInformationFull.java: 2233 - 2243 || DatabaseInformationFull.java: 2903 - 2914 |
 CLONE CLASS: 	tables = 
 				database.schemaManager.databaseObjectIterator(SchemaObject.TABLE); 
 				while (tables.hasNext()) { 
 				table = (Table) tables.next(); 
 				if (table.isView() 
 				|| !session.getGrantee().isFullyAccessibleByRole( 
 				table.getName())) { 
 				continue; 
 				} 
 				
 
 LINES: 		| TestPreparedSubQueries.java: 189 - 197 || TestPreparedSubQueries.java: 201 - 209 |
 CLONE CLASS: 	r = s.getGeneratedKeys(); 
 				while (r.next()) { 
 				r.getInt(1); 
 				valid = true; 
 				} 
 				assertTrue(valid); 
 				
 
 LINES: 		| JDBCConnection.java: 2124 - 2156 || JDBCConnection.java: 2213 - 2245 |
 CLONE CLASS: 	checkClosed(); 
 				if (savepoint == null) { 
 				throw JDBCUtil.nullArgument(); 
 				} 
 				if (!(savepoint instanceof JDBCSavepoint)) { 
 				String msg = Error.getMessage(ErrorCode.X_3B001); 
 				throw JDBCUtil.invalidArgument(msg); 
 				} 
 				sp = (JDBCSavepoint) savepoint; 
 				if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && sp.name == null) { 
 				String msg = Error.getMessage(ErrorCode.X_3B001); 
 				throw JDBCUtil.invalidArgument(msg); 
 				} 
 				if (this != sp.connection) { 
 				String msg = Error.getMessage(ErrorCode.X_3B001); 
 				throw JDBCUtil.invalidArgument(msg); 
 				} 
 				if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && getAutoCommit()) { 
 				sp.name       = null; 
 				sp.connection = null; 
 				throw JDBCUtil.sqlException(ErrorCode.X_3B001); 
 				} 
 				try { 
 				
 
 LINES: 		| NumberType.java: 1424 - 1431 || NumberType.java: 1474 - 1481 || NumberType.java: 1522 - 1529 || NumberType.java: 1573 - 1580 || NumberType.java: 1783 - 1790 || NumberType.java: 1815 - 1822 |
 CLONE CLASS: 	} 
 				switch (typeCode) { 
 				case Types.SQL_REAL : 
 				case Types.SQL_FLOAT : 
 				case Types.SQL_DOUBLE : { 
 				double ad = ((Number) a).doubleValue(); 
 				
 
 LINES: 		| IndexAVL.java: 1261 - 1268 || IndexAVL.java: 1297 - 1304 || IndexAVL.java: 1326 - 1333 |
 CLONE CLASS: 	readLock.lock(); 
 				try { 
 				NodeAVL x = getAccessor(store); 
 				NodeAVL l = x; 
 				while (l != null) { 
 				x = l; 
 				
 
 LINES: 		| TestPreparedSubQueries.java: 32 - 38 || TestBug1191815.java: 32 - 38 |
 CLONE CLASS: 	package org.hsqldb.test; 
 				import java.sql.Connection; 
 				import java.sql.PreparedStatement; 
 				import java.sql.ResultSet; 
 				import java.sql.Statement; 
 				import java.sql.Timestamp; 
 				
 
 LINES: 		| TestUtil.java: 1020 - 1034 || TestUtil.java: 1107 - 1121 |
 CLONE CLASS: 	try { 
 				int index = trimmed.indexOf(' '); 
 				if (index < 0) { 
 				throw new IllegalArgumentException(); 
 				} 
 				enforceSequence = Boolean.valueOf(trimmed.substring(0, 
 				index)).booleanValue(); 
 				waiter = Waiter.getWaiter(trimmed.substring(index).trim()); 
 				} catch (IllegalArgumentException ie) { 
 				
 
 LINES: 		| BinaryType.java: 135 - 142 || BlobType.java: 119 - 126 |
 CLONE CLASS: 	return true; 
 				} 
 				public boolean acceptsPrecision() { 
 				return true; 
 				} 
 				public long getMaxPrecision() { 
 				
 
 LINES: 		| DatabaseInformationFull.java: 7574 - 7584 || DatabaseInformationFull.java: 7769 - 7779 |
 CLONE CLASS: 	row[privilege_type] = Tokens.T_USAGE; 
 				row[is_grantable] = 
 				right.getGrantee() == object.getOwner() 
 				|| grantableRight.isFull() ? Tokens.T_YES 
 				: Tokens.T_NO;; 
 				try { 
 				t.insertSys(session, store, row); 
 				} catch (HsqlException e) {} 
 				} 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 3491 - 3498 || DatabaseInformationFull.java: 6022 - 6029 |
 CLONE CLASS: 	} else if (type.isArrayType()) { 
 				row[maximum_cardinality] = 
 				ValuePool.getLong(type.arrayLimitCardinality()); 
 				row[data_type] = "ARRAY"; 
 				} 
 				row[dtd_identifier]     = type.getDefinition(); 
 				row[declared_data_type] = row[data_type]; 
 				
 
 LINES: 		| RowInputTextLog.java: 419 - 431 || RowInputTextLog.java: 457 - 469 |
 CLONE CLASS: 	readFieldPrefix(); 
 				if (scanner.scanNull()) { 
 				return null; 
 				} 
 				scanner.scanBinaryStringWithQuote(); 
 				if (scanner.getTokenType() == Tokens.X_MALFORMED_BINARY_STRING) { 
 				throw Error.error(ErrorCode.X_42587); 
 				} 
 				value = scanner.getValue(); 
 				
 
 LINES: 		| ParserDQL.java: 650 - 659 || ParserDQL.java: 718 - 727 |
 CLONE CLASS: 	continue; 
 				} 
 				if (token.tokenType == Tokens.CLOSEBRACKET) { 
 				break; 
 				} 
 				throw unexpectedToken(); 
 				} 
 				} 
 				
 
 LINES: 		| ParserDDL.java: 1886 - 1894 || ParserCommand.java: 1023 - 1031 |
 CLONE CLASS: 	if (readIfThis(Tokens.NO)) { 
 				readThis(Tokens.PAD); 
 				padSpace = Boolean.FALSE; 
 				} else if (readIfThis(Tokens.PAD)) { 
 				readThis(Tokens.SPACE); 
 				padSpace = Boolean.TRUE; 
 				} 
 				
 
 LINES: 		| LongValueHashMap.java: 62 - 70 || LongValueHashMap.java: 78 - 86 |
 CLONE CLASS: 	throw new NoSuchElementException(); 
 				} 
 				int hash   = key.hashCode(); 
 				int lookup = getLookup(key, hash); 
 				if (lookup != -1) { 
 				return longValueTable[lookup]; 
 				} 
 				
 
 LINES: 		| BaseList.java: 198 - 204 || WrapperIterator.java: 208 - 214 |
 CLONE CLASS: 	throw new NoSuchElementException(); 
 				} 
 				public void setValue(Object value) { 
 				throw new NoSuchElementException(); 
 				} 
 				} 
 				
 
 LINES: 		| TestCacheSize.java: 893 - 913 || TestCacheSize.java: 945 - 957 |
 CLONE CLASS: 	ps.setInt(1, random); 
 				count += ps.executeUpdate(); 
 				if (reportProgress && (i + 1) % 10000 == 0 
 				|| (slow && (i + 1) % 100 == 0)) { 
 				System.out.println("delete " + (i + 1) + " : " 
 				+ sw.elapsedTime() + " rps: " 
 				+ (i * 1000 / (sw.elapsedTime() + 1))); 
 				} 
 				} 
 				ps.close(); 
 				
 
 LINES: 		| Type.java: 258 - 267 || RowType.java: 357 - 367 |
 CLONE CLASS: 	} 
 				public int compare(Session session, Object a, Object b, 
 				SortAndSlice sort) { 
 				if (a == b) { 
 				return 0; 
 				} 
 				if (a == null) { 
 				
 
 LINES: 		| SqlFile.java: 1688 - 1702 || SqlFile.java: 3217 - 3231 |
 CLONE CLASS: 	if (rs != null) try { 
 				rs.close(); 
 				} catch (SQLException se) { 
 				} finally { 
 				rs = null; 
 				} 
 				if (st != null) try { 
 				st.close(); 
 				} catch (SQLException se) { 
 				} finally { 
 				st = null; 
 				} 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 5242 - 5250 || DatabaseInformationFull.java: 7751 - 7759 || DatabaseInformationMain.java: 2986 - 2994 || DatabaseInformationMain.java: 3410 - 3418 |
 CLONE CLASS: 	if (!grants.isEmpty()) { 
 				grants.addAll(rights); 
 				rights = grants; 
 				} 
 				for (int j = 0; j < rights.size(); j++) { 
 				Right right          = (Right) rights.get(j); 
 				Right grantableRight = right.getGrantableRights(); 
 				
 
 LINES: 		| IndexAVL.java: 1687 - 1692 || IndexAVL.java: 1822 - 1827 |
 CLONE CLASS: 	if (i <= 0) { 
 				n = x.getRight(store); 
 				} else { 
 				result = x; 
 				n      = x.getLeft(store); 
 				} 
 				
 
 LINES: 		| DatabaseManagerSwing.java: 1728 - 1734 || DatabaseManager.java: 917 - 923 |
 CLONE CLASS: 	} else { 
 				showResultInText(); 
 				} 
 				txtCommand.selectAll(); 
 				txtCommand.requestFocus(); 
 				} 
 				
 
 LINES: 		| ValuePoolHashMap.java: 204 - 210 || ValuePoolHashMap.java: 249 - 255 |
 CLONE CLASS: 	String testValue; 
 				int    index      = hashIndex.getHashIndex(key.hashCode()); 
 				int    lookup     = hashIndex.hashTable[index]; 
 				int    lastLookup = -1; 
 				for (; lookup >= 0; 
 				lastLookup = lookup, 
 				
 
 LINES: 		| Grid.java: 253 - 268 || Tree.java: 247 - 262 |
 CLONE CLASS: 	} 
 				public void update() { 
 				adjustScroll(); 
 				repaint(); 
 				} 
 				void adjustScroll() { 
 				
 
 LINES: 		| Grantee.java: 485 - 496 || Grantee.java: 508 - 519 |
 CLONE CLASS: 	if (rights.hasNext()) { 
 				OrderedHashSet set = new OrderedHashSet(); 
 				while (rights.hasNext()) { 
 				set.add(rights.next()); 
 				} 
 				return set; 
 				} 
 				return Right.emptySet; 
 				} 
 				
 
 LINES: 		| DateTimeType.java: 1096 - 1103 || DateTimeType.java: 1145 - 1152 |
 CLONE CLASS: 	} 
 				break; 
 				case Types.SQL_DATE : 
 				case Types.SQL_TIMESTAMP_WITH_TIME_ZONE : 
 				case Types.SQL_TIMESTAMP : 
 				if (b instanceof IntervalMonthData) { 
 				return addMonths(session, (TimestampData) a, 
 				
 
 LINES: 		| StatementExpression.java: 142 - 150 || StatementSet.java: 295 - 303 || StatementSchemaDefinition.java: 65 - 73 || StatementSimple.java: 127 - 135 |
 CLONE CLASS: 	} catch (Throwable t) { 
 				result = Result.newErrorResult(t, null); 
 				} 
 				if (result.isError()) { 
 				result.getException().setStatementType(group, type); 
 				} 
 				return result; 
 				
 
 LINES: 		| BaseHashMap.java: 225 - 231 || BaseHashMap.java: 241 - 247 |
 CLONE CLASS: 	if (key == tempKey) { 
 				break; 
 				} 
 				} 
 				return lookup; 
 				} 
 				
 
 LINES: 		| RAFileSimple.java: 103 - 113 || RAFile.java: 368 - 378 |
 CLONE CLASS: 	} 
 				public void close() throws IOException { 
 				file.close(); 
 				} 
 				public boolean isReadOnly() { 
 				return readOnly; 
 				} 
 				public boolean ensureLength(long newLength) { 
 				
 
 LINES: 		| JDBCResultSet.java: 2501 - 2506 || JDBCResultSet.java: 5796 - 5801 |
 CLONE CLASS: 	break; 
 				} 
 				default : { 
 				throw JDBCUtil.notSupported(); 
 				} 
 				} 
 				
 
 LINES: 		| CharacterType.java: 87 - 94 || BinaryType.java: 88 - 95 || BlobType.java: 56 - 63 || ClobType.java: 57 - 64 || OtherType.java: 56 - 63 |
 CLONE CLASS: 	} 
 				public int displaySize() { 
 				return precision > Integer.MAX_VALUE ? Integer.MAX_VALUE 
 				: (int) precision; 
 				} 
 				public int getJDBCTypeCode() { 
 				
 
 LINES: 		| CharArrayWriter.java: 115 - 121 || HsqlByteArrayOutputStream.java: 280 - 286 |
 CLONE CLASS: 	if (read == -1) { 
 				break; 
 				} 
 				left  -= read; 
 				count += read; 
 				} 
 				
 
 LINES: 		| JDBCClobFile.java: 47 - 52 || JDBCClobClient.java: 37 - 42 |
 CLONE CLASS: 	import java.io.Reader; 
 				import java.io.UnsupportedEncodingException; 
 				import java.io.Writer; 
 				import java.nio.ByteBuffer; 
 				import java.nio.CharBuffer; 
 				import java.nio.charset.Charset; 
 				
 
 LINES: 		| Scanner.java: 523 - 531 || Scanner.java: 2477 - 2485 |
 CLONE CLASS: 	if (c == '0') { 
 				bitIndex++; 
 				} else if (c == '1') { 
 				map.set(bitIndex); 
 				bitIndex++; 
 				} else { 
 				token.tokenType   = Tokens.X_MALFORMED_BIT_STRING; 
 				token.isMalformed = true; 
 				
 
 LINES: 		| GranteeManager.java: 586 - 593 || GranteeManager.java: 607 - 614 |
 CLONE CLASS: 	if (map.containsKey(name.name)) { 
 				throw Error.error(ErrorCode.X_28503, name.name); 
 				} 
 				if (SqlInvariants.isLobsSchemaName(name.name) 
 				|| SqlInvariants.isSystemSchemaName(name.name)) { 
 				throw Error.error(ErrorCode.X_28502, name.name); 
 				} 
 				
 
 LINES: 		| ParserDQL.java: 3142 - 3152 || ParserDQL.java: 3588 - 3598 |
 CLONE CLASS: 	} else if (token.tokenType == Tokens.UNKNOWN) { 
 				read(); 
 				unknown = true; 
 				} else { 
 				throw unexpectedToken(); 
 				} 
 				} 
 				if (unknown) { 
 				e = new ExpressionLogical(OpTypes.IS_NULL, e); 
 				
 
 LINES: 		| TestOdbcTypes.java: 735 - 745 || TestOdbcTypes.java: 771 - 781 |
 CLONE CLASS: 	st.close(); 
 				} 
 				} catch(Exception e) { 
 				} 
 				} 
 				assertEquals("Retrieved bye array length wrong", 
 				expectedBytes.length, ba.length); 
 				for (int i = 0; i < ba.length; i++) { 
 				assertEquals("Byte " + i + " wrong", expectedBytes[i], ba[i]); 
 				} 
 				} 
 				
 
 LINES: 		| JDBCBlob.java: 592 - 599 || JDBCClob.java: 633 - 640 |
 CLONE CLASS: 	} catch (SQLException se) { 
 				throw JavaSystem.toIOException(se); 
 				} finally { 
 				super.close(); 
 				} 
 				} 
 				}; 
 				} 
 				
 
 LINES: 		| JDBCBlobClient.java: 382 - 392 || JDBCClobClient.java: 728 - 738 |
 CLONE CLASS: 	resultSet.preparedStatement.parameterSet[colIndex]    = Boolean.TRUE; 
 				} 
 				private void checkClosed() throws SQLException { 
 				if (isClosed) { 
 				throw JDBCUtil.sqlException(ErrorCode.X_07501); 
 				} 
 				} 
 				static boolean isInLimits(long fullLength, long pos, long len) { 
 				
 
 LINES: 		| TestAllTypes.java: 34 - 39 || FindFile.java: 73 - 78 |
 CLONE CLASS: 	import java.io.File; 
 				import java.sql.Connection; 
 				import java.sql.DriverManager; 
 				import java.sql.PreparedStatement; 
 				import java.sql.ResultSet; 
 				import java.sql.SQLException; 
 				
 
 LINES: 		| ParserDML.java: 488 - 511 || ParserDML.java: 607 - 630 |
 CLONE CLASS: 	} 
 				condition = 
 				ExpressionLogical.andExpressions(baseSelect.queryCondition, 
 				condition); 
 				rangeVariables = baseSelect.rangeVariables; 
 				} 
 				if (condition != null) { 
 				rangeVariables[0].addJoinCondition(condition); 
 				RangeVariableResolver resolver = 
 				new RangeVariableResolver(rangeVariables, null, 
 				compileContext, false); 
 				resolver.processConditions(session); 
 				rangeVariables = resolver.rangeVariables; 
 				} 
 				for (int i = 0; i < rangeVariables.length; i++) { 
 				rangeVariables[i].resolveRangeTableTypes(session, 
 				RangeVariable.emptyArray); 
 				} 
 				
 
 LINES: 		| RAFileSimple.java: 91 - 109 || RAStorageWrapper.java: 82 - 100 |
 CLONE CLASS: 	} 
 				public void write(byte[] b, int off, int len) throws IOException { 
 				file.write(b, off, len); 
 				} 
 				public void writeInt(int i) throws IOException { 
 				file.writeInt(i); 
 				} 
 				public void writeLong(long i) throws IOException { 
 				file.writeLong(i); 
 				} 
 				public void close() throws IOException { 
 				file.close(); 
 				} 
 				public boolean isReadOnly() { 
 				
 
 LINES: 		| TestOdbcTypes.java: 878 - 887 || TestOdbcTypes.java: 918 - 927 || TestOdbcTypes.java: 959 - 968 || TestOdbcTypes.java: 999 - 1008 || TestOdbcTypes.java: 1044 - 1053 || TestOdbcTypes.java: 1084 - 1093 || TestOdbcTypes.java: 1124 - 1133 || TestOdbcTypes.java: 1164 - 1173 || TestOdbcTypes.java: 1204 - 1213 || TestOdbcTypes.java: 1286 - 1295 || TestOdbcTypes.java: 1328 - 1337 || TestOdbcTypes.java: 1375 - 1384 || TestOdbcTypes.java: 1417 - 1426 |
 CLONE CLASS: 	if (rs != null) { 
 				rs.close(); 
 				} 
 				if (ps != null) { 
 				ps.close(); 
 				} 
 				} catch(Exception e) { 
 				} 
 				} 
 				} 
 				
 
 LINES: 		| ExpressionLogical.java: 520 - 528 || ExpressionArrayAggregate.java: 131 - 139 || ExpressionOp.java: 280 - 288 || Expression.java: 380 - 388 || ExpressionAggregate.java: 140 - 148 || ExpressionValue.java: 83 - 91 || ExpressionArithmetic.java: 156 - 164 |
 CLONE CLASS: 	StringBuffer sb = new StringBuffer(64); 
 				sb.append('\n'); 
 				for (int i = 0; i < blanks; i++) { 
 				sb.append(' '); 
 				} 
 				switch (opType) { 
 				
 
 LINES: 		| PgType.java: 365 - 370 || JDBCPreparedStatement.java: 4242 - 4247 |
 CLONE CLASS: 	case Types.SQL_REAL : 
 				case Types.SQL_FLOAT : 
 				case Types.SQL_DOUBLE : 
 				case Types.SQL_NUMERIC : 
 				case Types.SQL_DECIMAL : 
 				try { 
 				
 
 LINES: 		| IntKeyHashMapConcurrent.java: 171 - 179 || IntKeyHashMapConcurrent.java: 210 - 218 |
 CLONE CLASS: 	} 
 				public int size() { 
 				return IntKeyHashMapConcurrent.this.size(); 
 				} 
 				public boolean contains(Object o) { 
 				throw new RuntimeException(); 
 				} 
 				
 
 LINES: 		| Expression.java: 369 - 380 || ExpressionArithmetic.java: 145 - 156 |
 CLONE CLASS: 	break; 
 				default : 
 				throw Error.runtimeError(ErrorCode.U_S0500, "Expression"); 
 				} 
 				return sb.toString(); 
 				} 
 				protected String describe(Session session, int blanks) { 
 				StringBuffer sb = new StringBuffer(64); 
 				
 
 LINES: 		| IndexAVLMemory.java: 220 - 231 || IndexAVL.java: 908 - 919 |
 CLONE CLASS: 	if (compare == 0 && session != null && !compareRowId 
 				&& session.database.txManager.isMVRows()) { 
 				if (!isEqualReadable(session, store, n)) { 
 				compareRowId = true; 
 				compare = compareRowForInsertOrDelete(session, row, 
 				currentRow, 
 				compareRowId, 
 				colIndex.length); 
 				} 
 				} 
 				if (compare == 0) { 
 				
 
 LINES: 		| TestOdbcTypes.java: 154 - 160 || TestOdbcTypes.java: 184 - 190 || TestOdbcTypes.java: 214 - 220 || TestOdbcTypes.java: 243 - 249 || TestOdbcTypes.java: 307 - 313 || TestOdbcTypes.java: 336 - 342 || TestOdbcTypes.java: 365 - 371 || TestOdbcTypes.java: 394 - 400 || TestOdbcTypes.java: 423 - 429 || TestOdbcTypes.java: 453 - 459 || TestOdbcTypes.java: 483 - 489 || TestOdbcTypes.java: 514 - 520 || TestOdbcTypes.java: 543 - 549 || TestOdbcTypes.java: 605 - 611 || TestOdbcTypes.java: 635 - 641 || TestOdbcTypes.java: 664 - 670 || TestOdbcTypes.java: 692 - 698 || TestOdbcTypes.java: 760 - 766 || TestOdbcTypes.java: 798 - 804 || TestOdbcTypes.java: 831 - 837 || TestOdbcTypes.java: 871 - 877 || TestOdbcTypes.java: 911 - 917 || TestOdbcTypes.java: 952 - 958 || TestOdbcTypes.java: 992 - 998 || TestOdbcTypes.java: 1037 - 1043 || TestOdbcTypes.java: 1077 - 1083 || TestOdbcTypes.java: 1117 - 1123 || TestOdbcTypes.java: 1157 - 1163 || TestOdbcTypes.java: 1197 - 1203 || TestOdbcTypes.java: 1279 - 1285 || TestOdbcTypes.java: 1321 - 1327 || TestOdbcTypes.java: 1368 - 1374 || TestOdbcTypes.java: 1410 - 1416 || TestOdbcTypes.java: 1538 - 1544 || TestOdbcTypes.java: 1590 - 1596 |
 CLONE CLASS: 	} catch (SQLException se) { 
 				junit.framework.AssertionFailedError ase 
 				= new junit.framework.AssertionFailedError(se.getMessage()); 
 				ase.initCause(se); 
 				throw ase; 
 				} finally { 
 				try { 
 				
 
 LINES: 		| RowStoreAVLHybrid.java: 302 - 311 || RowStoreAVLDiskData.java: 260 - 268 |
 CLONE CLASS: 	break; 
 				} 
 				} 
 				public DataFileCache getCache() { 
 				return cache; 
 				} 
 				public void setCache(DataFileCache cache) { 
 				
 
 LINES: 		| DatabaseInformationFull.java: 2714 - 2728 || DatabaseInformationFull.java: 3464 - 3478 || DatabaseInformationFull.java: 3806 - 3820 || DatabaseInformationFull.java: 5994 - 6008 |
 CLONE CLASS: 	row[numeric_scale] = row[declared_numeric_scale] = 
 				ValuePool.getLong(type.scale); 
 				} 
 				row[numeric_precision_radix] = 
 				ValuePool.getLong(type.getPrecisionRadix()); 
 				} else if (type.isBooleanType()) { 
 				} else if (type.isDateTimeType()) { 
 				row[datetime_precision] = ValuePool.getLong(type.scale); 
 				} else if (type.isIntervalType()) { 
 				row[data_type] = "INTERVAL"; 
 				row[interval_type] = 
 				((IntervalType) type).getQualifier(type.typeCode); 
 				
 
 LINES: 		| DatabaseInformationFull.java: 1248 - 1258 || DatabaseInformationFull.java: 2229 - 2237 || DatabaseInformationFull.java: 8320 - 8330 |
 CLONE CLASS: 	Iterator tables; 
 				Table    table; 
 				Object[] row; 
 				tables = 
 				database.schemaManager.databaseObjectIterator(SchemaObject.TABLE); 
 				while (tables.hasNext()) { 
 				table = (Table) tables.next(); 
 				
 
 LINES: 		| BaseHashMap.java: 400 - 407 || BaseHashMap.java: 450 - 458 || BaseHashMap.java: 649 - 657 || BaseHashMap.java: 721 - 728 || BaseHashMap.java: 761 - 768 |
 CLONE CLASS: 	} 
 				if (accessTable != null) { 
 				accessTable[lookup] = ++accessCount; 
 				} 
 				return returnValue; 
 				} 
 				
 
 LINES: 		| CharacterType.java: 588 - 595 || NumberType.java: 797 - 804 |
 CLONE CLASS: 	} 
 				} 
 				public Object convertToType(SessionInterface session, Object a, 
 				Type otherType) { 
 				if (a == null) { 
 				return a; 
 				
 
 LINES: 		| ParserDDL.java: 807 - 812 || ParserDDL.java: 847 - 852 |
 CLONE CLASS: 	object.getName(), ValuePool.getInt(SchemaObject.CONSTRAINT), 
 				Boolean.valueOf(cascade), Boolean.valueOf(false) 
 				}; 
 				HsqlName[] writeLockNames = 
 				database.schemaManager.getCatalogAndBaseTableNames( 
 				table.getName()); 
 				
 
 LINES: 		| SchemaManager.java: 324 - 330 || SchemaManager.java: 400 - 406 |
 CLONE CLASS: 	throw Error.error(ErrorCode.X_3F000, name); 
 				} 
 				return schema.getName(); 
 				} finally { 
 				readLock.unlock(); 
 				} 
 				
 
 LINES: 		| IndexAVL.java: 1198 - 1206 || IndexAVL.java: 1223 - 1231 || IndexAVL.java: 1243 - 1251 |
 CLONE CLASS: 	TransactionManager.ACTION_READ, false); 
 				if (node == null) { 
 				return emptyIterator; 
 				} 
 				return new IndexRowIterator(session, store, this, node, 0, false, 
 				false); 
 				} 
 				
 
 LINES: 		| Scanner.java: 1492 - 1503 || Scanner.java: 1556 - 1567 |
 CLONE CLASS: 	currentPosition   += 2; 
 				token.isDelimiter = true; 
 				return; 
 				} 
 				token.tokenString = sqlString.substring(currentPosition, 
 				currentPosition + 2); 
 				token.tokenType   = Tokens.X_UNKNOWN_TOKEN; 
 				token.isDelimiter = true; 
 				return; 
 				
 
 LINES: 		| BasicResolver.java: 73 - 80 || Preprocessor.java: 661 - 668 |
 CLONE CLASS: 	} 
 				try { 
 				return file.getCanonicalFile(); 
 				} catch (Exception e) { 
 				return file.getAbsoluteFile(); 
 				} 
 				} 
 				
 
 LINES: 		| ExpressionLogical.java: 647 - 656 || Expression.java: 1159 - 1168 || ExpressionArithmetic.java: 255 - 264 |
 CLONE CLASS: 	for (int i = 0; i < nodes.length; i++) { 
 				if (nodes[i] != null) { 
 				nodes[i].resolveTypes(session, this); 
 				} 
 				} 
 				switch (opType) { 
 				case OpTypes.VALUE : 
 				break; 
 				
 
 LINES: 		| JDBCResultSet.java: 1989 - 2006 || JDBCCallableStatement.java: 983 - 1000 |
 CLONE CLASS: 	switch (targetType.typeCode) { 
 				case Types.SQL_NUMERIC : 
 				case Types.SQL_DECIMAL : 
 				break; 
 				case Types.TINYINT : 
 				case Types.SQL_SMALLINT : 
 				case Types.SQL_INTEGER : 
 				case Types.SQL_BIGINT : 
 				targetType = Type.SQL_DECIMAL; 
 				break; 
 				case Types.SQL_DOUBLE : 
 				default : 
 				targetType = Type.SQL_DECIMAL_DEFAULT; 
 				break; 
 				} 
 				
 
 LINES: 		| TransactionManagerMVCC.java: 289 - 310 || TransactionManagerMV2PL.java: 233 - 254 |
 CLONE CLASS: 	} 
 				action.rollback(session, timestamp); 
 				} 
 				writeLock.lock(); 
 				try { 
 				Object[] list = session.rowActionList.getArray(); 
 				mergeRolledBackTransaction(session, timestamp, list, start, limit); 
 				} finally { 
 				writeLock.unlock(); 
 				} 
 				session.rowActionList.setSize(start); 
 				} 
 				public RowAction addDeleteAction(Session session, Table table, 
 				PersistentStore store, Row row, 
 				
 
 LINES: 		| BaseHashMap.java: 1567 - 1577 || BaseHashMap.java: 1590 - 1600 || BaseHashMap.java: 1613 - 1623 |
 CLONE CLASS: 	throw new NoSuchElementException("Hash Iterator"); 
 				} 
 				removed = false; 
 				if (hasNext()) { 
 				counter++; 
 				lookup = nextLookup(lookup); 
 				if (keys) { 
 				
 
 LINES: 		| Constraint.java: 261 - 269 || RoutineSchema.java: 68 - 76 || TriggerDef.java: 214 - 222 || NumberSequence.java: 157 - 165 || Charset.java: 170 - 178 || IndexAVL.java: 233 - 241 |
 CLONE CLASS: 	} 
 				public HsqlName getCatalogName() { 
 				return name.schema.schema; 
 				} 
 				public HsqlName getSchemaName() { 
 				return name.schema; 
 				} 
 				
 
 LINES: 		| BooleanType.java: 145 - 152 || DateTimeType.java: 501 - 508 |
 CLONE CLASS: 	public Object convertToType(SessionInterface session, Object a, 
 				Type otherType) { 
 				if (a == null) { 
 				return a; 
 				} 
 				switch (otherType.typeCode) { 
 				
 
 LINES: 		| ParserDDL.java: 4675 - 4682 || ParserDDL.java: 4906 - 4913 || ParserCommand.java: 602 - 609 || ParserCommand.java: 639 - 646 || ParserDML.java: 800 - 807 || ParserDML.java: 834 - 841 || ParserDML.java: 875 - 882 || ParserDQL.java: 1004 - 1011 || ParserDQL.java: 1527 - 1534 || ParserDQL.java: 1796 - 1803 || ParserDQL.java: 4032 - 4039 |
 CLONE CLASS: 	if (token.tokenType == Tokens.COMMA) { 
 				read(); 
 				continue; 
 				} 
 				break; 
 				} 
 				
 
 LINES: 		| Log.java: 599 - 605 || Log.java: 614 - 620 || Log.java: 627 - 633 || Log.java: 640 - 646 || Log.java: 655 - 661 |
 CLONE CLASS: 	} catch (IOException e) { 
 				throw Error.error(ErrorCode.FILE_IO_ERROR, logFileName); 
 				} 
 				if (maxLogSize > 0 && dbLogWriter.size() > maxLogSize) { 
 				database.logger.setCheckpointRequired(); 
 				} 
 				
 
 LINES: 		| CharacterType.java: 685 - 692 || NumberType.java: 1249 - 1256 || IntervalType.java: 676 - 683 || DateTimeType.java: 998 - 1005 |
 CLONE CLASS: 	} 
 				} 
 				public String convertToSQLString(Object a) { 
 				if (a == null) { 
 				return Tokens.T_NULL; 
 				} 
 				
 
 LINES: 		| JDBCArrayBasic.java: 258 - 343 || JDBCArray.java: 270 - 355 |
 CLONE CLASS: 	} 
 				return slice; 
 				} 
 				public Object getArray(long index, int count, 
 				java.util.Map<String, 
 				Class<?>> map) throws SQLException { 
 				return getArray(index, count); 
 				} 
 				public ResultSet getResultSet() throws SQLException { 
 				checkClosed(); 
 				Result result = this.newColumnResult(0, data.length); 
 				
 
 LINES: 		| Result.java: 432 - 444 || Result.java: 1161 - 1173 |
 CLONE CLASS: 	break; 
 				case ResultConstants.TX_COMMIT : 
 				case ResultConstants.TX_ROLLBACK : 
 				case ResultConstants.TX_COMMIT_AND_CHAIN : 
 				case ResultConstants.TX_ROLLBACK_AND_CHAIN : 
 				break; 
 				default : 
 				throw Error.runtimeError(ErrorCode.U_S0500, "Result"); 
 				} 
 				break; 
 				
 
 LINES: 		| Row.java: 124 - 132 || NodeAVL.java: 271 - 279 || NodeAVLDisk.java: 550 - 558 |
 CLONE CLASS: 	public boolean isNew() { 
 				return false; 
 				} 
 				public boolean hasChanged() { 
 				return false; 
 				} 
 				public boolean isKeepInMemory() { 
 				
 
 LINES: 		| DatabaseManagerSwing.java: 1284 - 1291 || DatabaseManager.java: 742 - 749 |
 CLONE CLASS: 	} else if (s.equals("SELECT")) { 
 				showHelp(DatabaseManagerCommon.selectHelp); 
 				} else if (s.equals("INSERT")) { 
 				showHelp(DatabaseManagerCommon.insertHelp); 
 				} else if (s.equals("UPDATE")) { 
 				showHelp(DatabaseManagerCommon.updateHelp); 
 				} else if (s.equals("DELETE")) { 
 				showHelp(DatabaseManagerCommon.deleteHelp); 
 				
 
 LINES: 		| TransferSQLText.java: 378 - 394 || TransferSQLText.java: 445 - 461 |
 CLONE CLASS: 	WTextRead = new BufferedReader(new FileReader(sFileName)); 
 				} catch (IOException e) { 
 				throw new DataAccessPointException(e.getMessage()); 
 				} 
 				} 
 				String        currentLine  = ""; 
 				String        Token        = ""; 
 				String        name         = ""; 
 				TransferTable relatedTable = null; 
 				try { 
 				while ((currentLine = WTextRead.readLine()) != null) { 
 				currentLine = currentLine.trim() + ";"; 
 				Tokenizer   = new StringTokenizer(currentLine); 
 				try { 
 				
 
 LINES: 		| InputStreamWrapper.java: 61 - 67 || InputStreamWrapper.java: 91 - 97 |
 CLONE CLASS: 	if (limitSize == -1) { 
 				return -1; 
 				} else { 
 				throw new IOException("stream not reached the end" 
 				+ fetchedSize + " " + limitSize); 
 				} 
 				} 
 				
 
 LINES: 		| OrderedIntHashSet.java: 116 - 125 || OrderedLongHashSet.java: 116 - 125 |
 CLONE CLASS: 	int i = 0; 
 				for (; i < array.length; i++) { 
 				if (i >= size() || get(i) != array[i]) { 
 				break; 
 				} 
 				} 
 				return i; 
 				} 
 				
 
 LINES: 		| LongKeyLongValueHashMap.java: 111 - 122 || IntKeyIntValueHashMap.java: 104 - 115 || LongKeyIntValueHashMap.java: 115 - 126 |
 CLONE CLASS: 	int oldSize = size(); 
 				super.addOrRemove(key, 0, null, null, true); 
 				return oldSize != size(); 
 				} 
 				public Set keySet() { 
 				if (keySet == null) { 
 				keySet = new KeySet(); 
 				} 
 				
 
 LINES: 		| RowStoreAVLDiskData.java: 168 - 175 || RowStoreAVLMemory.java: 117 - 124 |
 CLONE CLASS: 	} 
 				public void removeAll() { 
 				destroy(); 
 				elementCount.set(0); 
 				ArrayUtil.fillArray(accessorList, null); 
 				} 
 				
 
 LINES: 		| SqlFile.java: 1013 - 1019 || SqlFile.java: 2477 - 2483 |
 CLONE CLASS: 	try { 
 				if (statement != null) statement.close(); 
 				} catch (SQLException nse) { 
 				} finally { 
 				statement = null; 
 				} 
 				
 
 LINES: 		| DatabaseManagerSwing.java: 1947 - 1966 || DatabaseManager.java: 1152 - 1171 |
 CLONE CLASS: 	txtResult.setText(b.toString()); 
 				} 
 				private void addToRecent(String s) { 
 				for (int i = 0; i < iMaxRecent; i++) { 
 				if (s.equals(sRecent[i])) { 
 				return; 
 				} 
 				} 
 				if (sRecent[iRecent] != null) { 
 				mRecent.remove(iRecent); 
 				} 
 				sRecent[iRecent] = s; 
 				if (s.length() > 43) { 
 				s = s.substring(0, 40) + "..."; 
 				} 
 				
 
 LINES: 		| ValuePoolHashMap.java: 221 - 229 || ValuePoolHashMap.java: 266 - 274 |
 CLONE CLASS: 	return testValue; 
 				} 
 				} 
 				if (hashIndex.elementCount >= threshold) { 
 				reset(); 
 				return getOrAddString(key); 
 				} 
 				
 
 LINES: 		| KMPSearchAlgorithm.java: 300 - 307 || KMPSearchAlgorithm.java: 370 - 377 || KMPSearchAlgorithm.java: 434 - 441 |
 CLONE CLASS: 	} 
 				if (patternIndex == patternLength) { 
 				return matchStart; 
 				} else { 
 				return -1; 
 				} 
 				} 
 				
 
 LINES: 		| NodeAVLDiskLarge.java: 326 - 341 || NodeAVLDisk.java: 365 - 380 |
 CLONE CLASS: 	} 
 				if (!row.isInMemory()) { 
 				throw Error.runtimeError(ErrorCode.U_S0500, "NodeAVLDisk"); 
 				} 
 				row.setNodesChanged(); 
 				node.iBalance = b; 
 				row.keepInMemory(false); 
 				return node; 
 				} 
 				NodeAVL setLeft(PersistentStore store, NodeAVL n) { 
 				
 
 LINES: 		| RowAVL.java: 159 - 170 || RowAVLDiskData.java: 144 - 155 |
 CLONE CLASS: 	} 
 				public NodeAVL insertNode(int index) { 
 				NodeAVL backnode = getNode(index - 1); 
 				NodeAVL newnode  = new NodeAVL(this); 
 				newnode.nNext  = backnode.nNext; 
 				backnode.nNext = newnode; 
 				return newnode; 
 				} 
 				
 
 LINES: 		| RowStoreAVLDisk.java: 181 - 195 || RowStoreAVLHybrid.java: 213 - 227 |
 CLONE CLASS: 	} 
 				add(session, row, tx); 
 				return row; 
 				} 
 				public void indexRow(Session session, Row row) { 
 				try { 
 				row = (Row) get(row, true); 
 				super.indexRow(session, row); 
 				row.keepInMemory(false); 
 				} catch (HsqlException e) { 
 				
 
 LINES: 		| TransactionManager2PL.java: 70 - 80 || TransactionManagerMV2PL.java: 80 - 90 |
 CLONE CLASS: 	} 
 				public void setTransactionControl(Session session, int mode) { 
 				super.setTransactionControl(session, mode); 
 				} 
 				public void completeActions(Session session) { 
 				endActionTPL(session); 
 				} 
 				public boolean prepareCommitActions(Session session) { 
 				
 
 LINES: 		| ParserDQL.java: 4154 - 4161 || ParserDQL.java: 4165 - 4172 |
 CLONE CLASS: 	Expression e = XreadExplicitRowValueConstructorOrNull(); 
 				if (e != null) { 
 				return e; 
 				} 
 				return XreadRowValueSpecialCase(); 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 3364 - 3373 || DatabaseInformationFull.java: 3539 - 3548 || DatabaseInformationFull.java: 4266 - 4275 || DatabaseInformationFull.java: 5750 - 5759 || DatabaseInformationFull.java: 7844 - 7853 |
 CLONE CLASS: 	addColumn(t, "CHARACTER_SET_SCHEMA", SQL_IDENTIFIER); 
 				addColumn(t, "CHARACTER_SET_NAME", SQL_IDENTIFIER); 
 				addColumn(t, "COLLATION_CATALOG", SQL_IDENTIFIER); 
 				addColumn(t, "COLLATION_SCHEMA", SQL_IDENTIFIER); 
 				addColumn(t, "COLLATION_NAME", SQL_IDENTIFIER); 
 				addColumn(t, "NUMERIC_PRECISION", CARDINAL_NUMBER); 
 				addColumn(t, "NUMERIC_PRECISION_RADIX", CARDINAL_NUMBER); 
 				addColumn(t, "NUMERIC_SCALE", CARDINAL_NUMBER); 
 				addColumn(t, "DATETIME_PRECISION", CARDINAL_NUMBER); 
 				addColumn(t, "INTERVAL_TYPE", CHARACTER_DATA); 
 				
 
 LINES: 		| NumberType.java: 499 - 508 || ArrayType.java: 395 - 404 |
 CLONE CLASS: 	return this; 
 				} 
 				if (other == SQL_ALL_TYPES) { 
 				return this; 
 				} 
 				if (this == other) { 
 				return this; 
 				} 
 				
 
 LINES: 		| JDBCBlobFile.java: 443 - 450 || JDBCBlobFile.java: 624 - 631 || JDBCClobFile.java: 227 - 234 || JDBCClobFile.java: 509 - 516 || JDBCClobFile.java: 739 - 746 |
 CLONE CLASS: 	} finally { 
 				m_streams.remove(this); 
 				} 
 				} 
 				}; 
 				} catch (Exception ex) { 
 				throw JDBCUtil.sqlException(ex); 
 				} 
 				
 
 LINES: 		| TestGroupByHaving.java: 176 - 183 || TestGroupByHaving.java: 202 - 209 || TestGroupByHaving.java: 229 - 236 |
 CLONE CLASS: 	new Double(42500), new Integer(13) 
 				}, { 
 				new Double(45000), new Integer(23) 
 				}, 
 				}; 
 				compareResults(sql, expected, "00000"); 
 				} 
 				
 
 LINES: 		| Expression.java: 891 - 906 || ExpressionColumn.java: 995 - 1007 |
 CLONE CLASS: 	} 
 				Expression replaceAliasInOrderBy(Session session, Expression[] columns, 
 				int length) { 
 				for (int i = 0; i < nodes.length; i++) { 
 				if (nodes[i] == null) { 
 				continue; 
 				} 
 				nodes[i] = nodes[i].replaceAliasInOrderBy(session, columns, 
 				length); 
 				} 
 				
 
 LINES: 		| RAFileSimple.java: 123 - 132 || RAFile.java: 387 - 396 |
 CLONE CLASS: 	return false; 
 				} 
 				return true; 
 				} 
 				public boolean setLength(long newLength) { 
 				try { 
 				file.setLength(newLength); 
 				
 
 LINES: 		| DatabaseManagerSwing.java: 1074 - 1079 || DatabaseManager.java: 564 - 569 |
 CLONE CLASS: 	windowClosing(null); 
 				} else if (s.equals("Transfer")) { 
 				Transfer.work(null); 
 				} else if (s.equals("Dump")) { 
 				Transfer.work(new String[]{ "-d" }); 
 				} else if (s.equals("Restore")) { 
 				
 
 LINES: 		| DatabaseManagerSwing.java: 1569 - 1576 || DatabaseManagerSwing.java: 1611 - 1618 |
 CLONE CLASS: 	} catch (RuntimeException re) { 
 				CommonSwing.errorMessage(re); 
 				throw re; 
 				} finally { 
 				setWaiting(null); 
 				} 
 				} 
 				
 
 LINES: 		| NumberSequence.java: 192 - 215 || NumberSequence.java: 237 - 260 |
 CLONE CLASS: 	sb.append(Tokens.T_START).append(' '); 
 				sb.append(Tokens.T_WITH).append(' '); 
 				sb.append(startValue); 
 				if (getIncrement() != 1) { 
 				sb.append(' ').append(Tokens.T_INCREMENT).append(' '); 
 				sb.append(Tokens.T_BY).append(' '); 
 				sb.append(getIncrement()); 
 				} 
 				if (!hasDefaultMinMax()) { 
 				sb.append(' ').append(Tokens.T_MINVALUE).append(' '); 
 				sb.append(getMinValue()); 
 				sb.append(' ').append(Tokens.T_MAXVALUE).append(' '); 
 				sb.append(getMaxValue()); 
 				} 
 				if (isCycle()) { 
 				sb.append(' ').append(Tokens.T_CYCLE); 
 				} 
 				if (name == null) { 
 				sb.append(Tokens.T_CLOSEBRACKET); 
 				} 
 				
 
 LINES: 		| TransferSQLText.java: 423 - 428 || TransferSQLText.java: 567 - 572 |
 CLONE CLASS: 	DbStmts.put(relatedTable.Stmts.sSourceTable, 
 				relatedTable); 
 				} catch (NoSuchElementException NSE) { 
 				continue; 
 				} 
 				} 
 				
 
 LINES: 		| MultiValueHashMap.java: 159 - 168 || MultiValueHashMap.java: 194 - 203 |
 CLONE CLASS: 	} 
 				public boolean isEmpty() { 
 				return size() == 0; 
 				} 
 				public void clear() { 
 				MultiValueHashMap.this.clear(); 
 				} 
 				} 
 				
 
 LINES: 		| RowType.java: 34 - 39 || ArrayType.java: 36 - 41 |
 CLONE CLASS: 	import org.hsqldb.OpTypes; 
 				import org.hsqldb.Session; 
 				import org.hsqldb.SessionInterface; 
 				import org.hsqldb.SortAndSlice; 
 				import org.hsqldb.Tokens; 
 				import org.hsqldb.error.Error; 
 				
 
 LINES: 		| TestJDBCGeneratedColumns.java: 147 - 155 || TestJDBCGeneratedColumns.java: 268 - 276 |
 CLONE CLASS: 	} 
 				ps.close(); 
 				} catch (Exception e) { 
 				System.out.print(e); 
 				} 
 				assertTrue(successPrepared); 
 				
 
 LINES: 		| HSQLDialect.java: 346 - 363 || HSQLDialect.java: 326 - 343 |
 CLONE CLASS: 	} 
 				return constraintName; 
 				} 
 				}; 
 				private static ViolatedConstraintNameExtracter EXTRACTER_20 = new TemplatedViolatedConstraintNameExtracter() { 
 				public String extractConstraintName(SQLException sqle) { 
 				String constraintName = null; 
 				int errorCode = JDBCExceptionHelper.extractErrorCode( sqle ); 
 				if ( errorCode == -8 ) { 
 				
 
 LINES: 		| JDBCCallableStatement.java: 1181 - 1188 || JDBCCallableStatement.java: 4263 - 4270 |
 CLONE CLASS: 	Type   sourceType = parameterMetaData.columnTypes[parameterIndex - 1]; 
 				Object o          = getColumnInType(parameterIndex, sourceType); 
 				if (o == null) { 
 				return null; 
 				} 
 				if (o instanceof ClobDataID) { 
 				
 
 LINES: 		| Table.java: 824 - 830 || Table.java: 871 - 877 |
 CLONE CLASS: 	mainCount++; 
 				break; 
 				case SchemaObject.ConstraintTypes.CHECK : 
 				if (constraintList[i].isNotNull()) { 
 				break; 
 				} 
 				
 
 LINES: 		| SchemaObjectSet.java: 65 - 71 || SchemaObjectSet.java: 277 - 283 |
 CLONE CLASS: 	case SchemaObject.CHARSET : 
 				case SchemaObject.DOMAIN : 
 				case SchemaObject.TYPE : 
 				case SchemaObject.COLLATION : 
 				case SchemaObject.PROCEDURE : 
 				case SchemaObject.FUNCTION : 
 				case SchemaObject.SPECIFIC_ROUTINE : 
 				
 
 LINES: 		| NodeAVLDiskLarge.java: 294 - 304 || NodeAVLDisk.java: 338 - 348 |
 CLONE CLASS: 	} 
 				if (!row.isInMemory()) { 
 				row.keepInMemory(false); 
 				throw Error.runtimeError(ErrorCode.U_S0500, "NodeAVLDisk"); 
 				} 
 				row.setNodesChanged(); 
 				node.iParent = n == null ? NO_POS 
 				
 
 LINES: 		| ExpressionAccessor.java: 74 - 81 || Expression.java: 1154 - 1161 || ExpressionAggregate.java: 221 - 228 || ExpressionArithmetic.java: 250 - 257 |
 CLONE CLASS: 	return unresolvedSet; 
 				} 
 				public void resolveTypes(Session session, Expression parent) { 
 				for (int i = 0; i < nodes.length; i++) { 
 				if (nodes[i] != null) { 
 				nodes[i].resolveTypes(session, this); 
 				
 
 LINES: 		| ParserDDL.java: 4449 - 4456 || ParserDDL.java: 4470 - 4477 || ParserDDL.java: 4515 - 4522 |
 CLONE CLASS: 	}; 
 				HsqlName[] writeLockNames = 
 				database.schemaManager.getCatalogAndBaseTableNames( 
 				domain.getName()); 
 				return new StatementSchema(sql, 
 				StatementTypes.ALTER_DOMAIN, 
 				args, null, writeLockNames); 
 				
 
 LINES: 		| IntKeyIntValueHashMap.java: 84 - 91 || LongKeyIntValueHashMap.java: 91 - 98 || IntValueHashMap.java: 101 - 108 |
 CLONE CLASS: 	if (lookup != -1) { 
 				value[0] = intValueTable[lookup]; 
 				return true; 
 				} 
 				return false; 
 				} 
 				
 
 LINES: 		| RowStoreAVLDisk.java: 114 - 130 || RowStoreAVLDiskData.java: 73 - 89 |
 CLONE CLASS: 	} 
 				public CachedObject get(long key, boolean keep) { 
 				CachedObject object = cache.get(key, this, keep); 
 				return object; 
 				} 
 				public CachedObject get(CachedObject object, boolean keep) { 
 				object = cache.get(object, this, keep); 
 				return object; 
 				} 
 				public void add(Session session, CachedObject object, boolean tx) { 
 				
 
 LINES: 		| StatementDML.java: 1129 - 1136 || StatementDML.java: 1387 - 1394 |
 CLONE CLASS: 	if (extraUpdateTables != null) { 
 				for (int i = 0; i < extraUpdateTables.size(); i++) { 
 				Table currentTable = (Table) extraUpdateTables.get(i); 
 				currentTable.fireTriggers(session, Trigger.UPDATE_AFTER, 
 				navigator); 
 				} 
 				} 
 				
 
 LINES: 		| AuthBeanMultiplexer.java: 110 - 115 || AuthUtils.java: 70 - 75 |
 CLONE CLASS: 	} 
 				return rs.getString(1); 
 				} finally { 
 				if (rs != null) try { 
 				rs.close(); 
 				} catch (SQLException se) { 
 				
 
 LINES: 		| ParserDQL.java: 2257 - 2274 || ParserDQL.java: 2320 - 2337 |
 CLONE CLASS: 	case Tokens.COLON : 
 				read(); 
 				if (token.tokenType == Tokens.X_DELIMITED_IDENTIFIER 
 				|| token.tokenType == Tokens.X_IDENTIFIER) {} 
 				else { 
 				throw unexpectedToken(Tokens.T_COLON); 
 				} 
 				case Tokens.QUESTION : 
 				ExpressionColumn p = 
 				new ExpressionColumn(OpTypes.DYNAMIC_PARAM); 
 				compileContext.addParameter(p, getPosition()); 
 				read(); 
 				return p; 
 				
 
 LINES: 		| JDBCClobFile.java: 230 - 239 || JDBCClobFile.java: 512 - 521 |
 CLONE CLASS: 	} 
 				}; 
 				} catch (Exception ex) { 
 				throw JDBCUtil.sqlException(ex); 
 				} 
 				m_streams.add(stream); 
 				return stream; 
 				} 
 				
 
 LINES: 		| FunctionCustom.java: 1980 - 1986 || FunctionSQL.java: 713 - 719 |
 CLONE CLASS: 	if (data[0] == null) { 
 				return null; 
 				} 
 				if (data[1] == null) { 
 				return null; 
 				} 
 				
 
 LINES: 		| DatabaseManagerSwing.java: 1100 - 1106 || DatabaseManager.java: 584 - 590 |
 CLONE CLASS: 	} else if (s.equals("Refresh Tree")) { 
 				refreshTree(); 
 				} else if (s.startsWith("#")) { 
 				int i = Integer.parseInt(s.substring(1)); 
 				txtCommand.setText(sRecent[i]); 
 				} else if (s.equals("Connect...")) { 
 				
 
 LINES: 		| TestOdbcTypes.java: 153 - 158 || TestOdbcTypes.java: 183 - 188 || TestOdbcTypes.java: 213 - 218 || TestOdbcTypes.java: 242 - 247 || TestOdbcTypes.java: 306 - 311 || TestOdbcTypes.java: 335 - 340 || TestOdbcTypes.java: 364 - 369 || TestOdbcTypes.java: 393 - 398 || TestOdbcTypes.java: 422 - 427 || TestOdbcTypes.java: 452 - 457 || TestOdbcTypes.java: 482 - 487 || TestOdbcTypes.java: 513 - 518 || TestOdbcTypes.java: 542 - 547 || TestOdbcTypes.java: 604 - 609 || TestOdbcTypes.java: 634 - 639 || TestOdbcTypes.java: 663 - 668 || TestOdbcTypes.java: 691 - 696 || TestOdbcTypes.java: 759 - 764 || TestOdbcTypes.java: 797 - 802 || TestOdbcTypes.java: 830 - 835 |
 CLONE CLASS: 	assertFalse("Got too many rows with id in (1, 2)", rs.next()); 
 				} catch (SQLException se) { 
 				junit.framework.AssertionFailedError ase 
 				= new junit.framework.AssertionFailedError(se.getMessage()); 
 				ase.initCause(se); 
 				throw ase; 
 				
 
 LINES: 		| ParserDDL.java: 4826 - 4833 || ParserDDL.java: 4927 - 4934 |
 CLONE CLASS: 	read(); 
 				} else { 
 				break; 
 				} 
 				} 
 				if (grant) { 
 				if (token.tokenType == Tokens.WITH) { 
 				
 
 LINES: 		| TransactionManagerMVCC.java: 615 - 663 || TransactionManagerMV2PL.java: 385 - 433 |
 CLONE CLASS: 	} 
 				public void removeTransactionInfo(long id) { 
 				rowActionMap.getWriteLock().lock(); 
 				try { 
 				RowAction action = (RowAction) rowActionMap.get(id); 
 				synchronized (action) { 
 				if (action.type == RowActionBase.ACTION_NONE) { 
 				rowActionMap.remove(id); 
 				} 
 				} 
 				} finally { 
 				rowActionMap.getWriteLock().unlock(); 
 				} 
 				} 
 				void addToCommittedQueue(Session session, Object[] list) { 
 				synchronized (committedTransactionTimestamps) { 
 				committedTransactions.addLast(list); 
 				committedTransactionTimestamps.addLast(session.actionTimestamp); 
 				void mergeExpiredTransactions(Session session) { 
 				long timestamp = getFirstLiveTransactionTimestamp(); 
 				while (true) { 
 				
 
 LINES: 		| TestStressInsert.java: 159 - 170 || TestStressInsert.java: 182 - 193 |
 CLONE CLASS: 	if (i % 100 == 0) { 
 				long t3 = System.currentTimeMillis(); 
 				System.out.println("inserted " + i + ", 100 in " + (t3 - t2)); 
 				t2 = t3; 
 				} 
 				} 
 				System.out.println("total inserted " + MAX_SIZE + " in " + (t2 - t1)); 
 				shutdown(); 
 				} 
 				
 
 LINES: 		| BitType.java: 91 - 107 || CharacterType.java: 163 - 179 || BinaryType.java: 116 - 132 |
 CLONE CLASS: 	} 
 				public String getDefinition() { 
 				if (precision == 0) { 
 				return getNameString(); 
 				} 
 				StringBuffer sb = new StringBuffer(16); 
 				sb.append(getNameString()); 
 				sb.append('('); 
 				sb.append(precision); 
 				sb.append(')'); 
 				return sb.toString(); 
 				} 
 				
 
 LINES: 		| TestPreparedSubQueries.java: 183 - 191 || TestPreparedSubQueries.java: 225 - 233 |
 CLONE CLASS: 	} 
 				r.close(); 
 				assertTrue(valid); 
 				s.execute("insert into a(b) values(2)", new int[]{ 1 }); 
 				r = s.getGeneratedKeys(); 
 				while (r.next()) { 
 				
 
 LINES: 		| JDBCClobClient.java: 219 - 226 || JDBCClobClient.java: 449 - 456 |
 CLONE CLASS: 	} catch (Exception ex) { 
 				} 
 				} 
 				if (m_closed) { 
 				throw new IOException("The stream is closed."); 
 				} 
 				} 
 				
 
 LINES: 		| RoutineSchema.java: 80 - 88 || UserTypeModifier.java: 151 - 159 || Charset.java: 178 - 186 |
 CLONE CLASS: 	} 
 				public Grantee getOwner() { 
 				return name.schema.owner; 
 				} 
 				public OrderedHashSet getReferences() { 
 				OrderedHashSet set = new OrderedHashSet(); 
 				
 
 LINES: 		| DatabaseInformationFull.java: 1322 - 1330 || DatabaseInformationFull.java: 8420 - 8427 || DatabaseInformationMain.java: 3477 - 3485 |
 CLONE CLASS: 	}, false); 
 				return t; 
 				} 
 				Iterator  tables; 
 				Table     table; 
 				Object[]  row; 
 				
 
 LINES: 		| FunctionCustom.java: 1364 - 1374 || FunctionCustom.java: 1381 - 1391 |
 CLONE CLASS: 	TimestampData ts; 
 				if (nodes[0] == null) { 
 				ts = session.getCurrentTimestamp(true); 
 				} else { 
 				if (data[0] == null) { 
 				return null; 
 				} 
 				ts = (TimestampData) data[0]; 
 				} 
 				
 
 LINES: 		| PersistentStoreCollectionSession.java: 127 - 134 || PersistentStoreCollectionSession.java: 138 - 145 || PersistentStoreCollectionSession.java: 167 - 174 |
 CLONE CLASS: 	table.getPersistenceId()); 
 				if (store == null) { 
 				store = session.database.logger.newStore(session, this, 
 				table); 
 				} 
 				return store; 
 				
 
 LINES: 		| ExpressionAccessor.java: 173 - 183 || ExpressionLogical.java: 516 - 526 || ExpressionArrayAggregate.java: 127 - 137 || ExpressionOp.java: 276 - 286 || Expression.java: 376 - 386 || ExpressionAggregate.java: 136 - 146 || ExpressionValue.java: 79 - 89 || ExpressionTable.java: 74 - 84 || ExpressionArithmetic.java: 152 - 162 |
 CLONE CLASS: 	} 
 				protected String describe(Session session, int blanks) { 
 				StringBuffer sb = new StringBuffer(64); 
 				sb.append('\n'); 
 				for (int i = 0; i < blanks; i++) { 
 				sb.append(' '); 
 				} 
 				
 
 LINES: 		| Routine.java: 1144 - 1153 || Routine.java: 1300 - 1309 |
 CLONE CLASS: 	} 
 				} 
 				Type methodParamType = Types.getParameterSQLType(param); 
 				if (methodParamType == null) { 
 				method = null; 
 				break; 
 				} 
 				
 
 LINES: 		| Calculator.java: 227 - 234 || Calculator.java: 262 - 269 |
 CLONE CLASS: 	i += 2; 
 				atom = nextAtom; 
 				continue; 
 				} 
 				remaining -= 2; 
 				atoms.remove(i + 1); 
 				atoms.remove(i + 1); 
 				
 
 LINES: 		| IntKeyIntValueHashMap.java: 82 - 90 || LongKeyIntValueHashMap.java: 89 - 97 |
 CLONE CLASS: 	int lookup = getLookup(key); 
 				if (lookup != -1) { 
 				value[0] = intValueTable[lookup]; 
 				return true; 
 				} 
 				return false; 
 				
 
 LINES: 		| DateTimeType.java: 306 - 315 || DateTimeType.java: 357 - 366 |
 CLONE CLASS: 	if (startType == Types.SQL_INTERVAL_HOUR) { 
 				newType = zone ? Types.SQL_TIME_WITH_TIME_ZONE 
 				: Types.SQL_TIME; 
 				} else { 
 				newType = zone ? Types.SQL_TIMESTAMP_WITH_TIME_ZONE 
 				: Types.SQL_TIMESTAMP; 
 				} 
 				return getDateTimeType(newType, scale); 
 				} 
 				
 
 LINES: 		| TriggerSample.java: 336 - 360 || TriggerSample.java: 336 - 360 |
 CLONE CLASS: 	sb.append(getOperationSpec(typ)); 
 				sb.append(" ON "); 
 				sb.append(tab); 
 				sb.append(' '); 
 				sb.append(getForEachSpec(typ)); 
 				sb.append(' '); 
 				sb.append(getQueueSpec(qs)); 
 				sb.append(" CALL \""); 
 				sb.append(impl); 
 				sb.append("\""); 
 				return sb.toString(); 
 				} 
 				public static String getTriggerDescriptor(String trn, int typ, 
 				String tab) { 
 				StringBuffer sb = new StringBuffer(); 
 				sb.append("TRIGGER : "); 
 				sb.append(trn); 
 				sb.append(' '); 
 				sb.append(getWhenSpec(typ)); 
 				sb.append(' '); 
 				sb.append(getOperationSpec(typ)); 
 				
 
 LINES: 		| OrderedLongKeyHashMap.java: 80 - 87 || OrderedIntKeyHashMap.java: 62 - 69 || IntKeyHashMap.java: 58 - 65 |
 CLONE CLASS: 	int lookup = getLookup(key); 
 				if (lookup != -1) { 
 				return objectValueTable[lookup]; 
 				} 
 				return null; 
 				} 
 				
 
 LINES: 		| RB.java: 129 - 142 || SqltoolRB.java: 288 - 301 |
 CLONE CLASS: 	} 
 				public String getString() { 
 				return vrb.getString(this); 
 				} 
 				public String toString() { 
 				return ValidatingResourceBundle.resourceKeyFor(this); 
 				} 
 				public String getExpandedString() { 
 				return vrb.getExpandedString(this); 
 				} 
 				public String getExpandedString(String... strings) { 
 				return vrb.getExpandedString(this, strings); 
 				} 
 				
 
 LINES: 		| ServerConnection.java: 798 - 815 || ServerConnection.java: 1158 - 1175 |
 CLONE CLASS: 	outPacket.writeInt(pgTypes[i].getOid()); 
 				outPacket.writeShort(pgTypes[i].getTypeWidth()); 
 				outPacket.writeInt(pgTypes[i].getLPConstraint()); 
 				outPacket.writeShort(0); 
 				} 
 				outPacket.xmit('T', dataOutput); 
 				
 
 LINES: 		| DoubleIntIndex.java: 365 - 372 || DoubleIntIndex.java: 401 - 408 |
 CLONE CLASS: 	if (sortOnValues) { 
 				sorted       = false; 
 				sortOnValues = false; 
 				} 
 				int i = findFirstEqualKeyIndex(key); 
 				if (i == -1) { 
 				
 
 LINES: 		| TableWorks.java: 619 - 627 || TableWorks.java: 662 - 670 |
 CLONE CLASS: 	emptySet); 
 				moveData(table, tn, -1, 0); 
 				table = tn; 
 				database.schemaManager.addSchemaObject(constraint); 
 				setNewTableInSchema(table); 
 				updateConstraints(table, emptySet); 
 				
 
 LINES: 		| DatabaseInformationFull.java: 6794 - 6805 || DatabaseInformationFull.java: 7131 - 7142 |
 CLONE CLASS: 	}, false); 
 				return t; 
 				} 
 				final int trigger_catalog = 0; 
 				final int trigger_schema  = 1; 
 				final int trigger_name    = 2; 
 				final int table_catalog   = 3; 
 				final int table_schema    = 4; 
 				final int table_name      = 5; 
 				
 
 LINES: 		| TestSql.java: 917 - 923 || TestHTTPKeepAlive.java: 107 - 113 || TestBug785429.java: 154 - 160 || TestMerge.java: 398 - 404 || TestMultiInsert.java: 143 - 148 |
 CLONE CLASS: 	} catch (Exception e) { 
 				e.printStackTrace(); 
 				System.out.println("TestSql.tearDown() error: " + e.getMessage()); 
 				} 
 				super.tearDown(); 
 				} 
 				
 
 LINES: 		| LongKeyIntValueHashMap.java: 168 - 177 || LongKeyIntValueHashMap.java: 203 - 212 |
 CLONE CLASS: 	} 
 				public boolean isEmpty() { 
 				return size() == 0; 
 				} 
 				public void clear() { 
 				LongKeyIntValueHashMap.this.clear(); 
 				} 
 				} 
 				
 
 LINES: 		| TableWorks.java: 621 - 629 || TableWorks.java: 664 - 672 || TableWorks.java: 689 - 697 |
 CLONE CLASS: 	moveData(table, tn, -1, 0); 
 				table = tn; 
 				database.schemaManager.addSchemaObject(constraint); 
 				setNewTableInSchema(table); 
 				updateConstraints(table, emptySet); 
 				database.schemaManager.recompileDependentObjects(table); 
 				} 
 				
 
 LINES: 		| ValuePoolHashMap.java: 206 - 221 || ValuePoolHashMap.java: 251 - 266 |
 CLONE CLASS: 	int    lookup     = hashIndex.hashTable[index]; 
 				int    lastLookup = -1; 
 				for (; lookup >= 0; 
 				lastLookup = lookup, 
 				lookup = hashIndex.getNextLookup(lookup)) { 
 				testValue = (String) objectKeyTable[lookup]; 
 				if (key.equals(testValue)) { 
 				if (accessCount > ACCESS_MAX) { 
 				resetAccessCount(); 
 				} 
 				accessTable[lookup] = accessCount++; 
 				return testValue; 
 				
 
 LINES: 		| TestHarness.java: 183 - 188 || TestHarness.java: 208 - 213 || TestHarness.java: 229 - 234 |
 CLONE CLASS: 	stmt.close(); 
 				con.close(); 
 				} 
 				} catch (SQLException e) { 
 				e.printStackTrace(); 
 				} 
 				
 
 LINES: 		| TransferDb.java: 224 - 233 || TransferSQLText.java: 118 - 127 |
 CLONE CLASS: 	if (iMaxRows != 0 && i == iMaxRows) { 
 				break; 
 				} 
 				i++; 
 				if (iMaxRows != 0 || i % 100 == 0) { 
 				tracer.trace("Transfered " + i + " rows"); 
 				} 
 				} 
 				
 
 LINES: 		| TextCache.java: 216 - 221 || TextCache.java: 248 - 253 |
 CLONE CLASS: 	new Object[] { 
 				t.toString(), dataFileName 
 				}); 
 				} finally { 
 				writeLock.unlock(); 
 				} 
 				
 
 LINES: 		| DatabaseInformationFull.java: 5557 - 5565 || DatabaseInformationFull.java: 7030 - 7038 |
 CLONE CLASS: 	final int sequence_catalog = 3; 
 				final int sequence_schema  = 4; 
 				final int sequence_name    = 5; 
 				Iterator it; 
 				Object[] row; 
 				it = database.schemaManager.databaseObjectIterator( 
 				
 
 LINES: 		| RowStoreAVLDisk.java: 86 - 92 || RowStoreAVLDiskData.java: 66 - 72 || RowStoreAVLMemory.java: 60 - 66 |
 CLONE CLASS: 	this.database     = table.database; 
 				this.manager      = manager; 
 				this.table        = table; 
 				this.indexList    = table.getIndexList(); 
 				this.accessorList = new CachedObject[indexList.length]; 
 				manager.setStore(table, this); 
 				
 
